// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'build/sweeper.data';
    var REMOTE_PACKAGE_BASE = 'sweeper.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'layouts', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) err('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_build/sweeper.data');

    };
    Module['addRunDependency']('datafile_build/sweeper.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"filename": "/layouts/triangle_basic.json", "start": 0, "end": 1396, "audio": 0}, {"filename": "/layouts/hexagonal_basic.json", "start": 1396, "end": 2723, "audio": 0}, {"filename": "/layouts/square_basic.json", "start": 2723, "end": 4090, "audio": 0}], "remote_package_size": 4090, "package_uuid": "e477ce21-7e84-4a18-b5d5-4cf1ee7e0a02"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  assert(__cxa_demangle_func);
  try {
    var s = func;
    if (s.startsWith('__Z'))
      s = s.substr(1);
    var len = lengthBytesUTF8(s)+1;
    var buf = _malloc(len);
    stringToUTF8(s, buf, len);
    var status = _malloc(4);
    var ret = __cxa_demangle_func(buf, 0, 0, status);
    if (HEAP32[((status)>>2)] === 0 && ret) {
      return Pointer_stringify(ret);
    }
    // otherwise, libcxxabi failed
  } catch(e) {
    // ignore problems here
  } finally {
    if (buf) _free(buf);
    if (status) _free(status);
    if (ret) _free(ret);
  }
  // failure when using libcxxabi, don't demangle
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];

function _init(){ layout = new Layout( "hexagonal_basic" ); }



STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 7408;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,AAAAAAAAAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAARMJCwsAAAkGCwAACwAGEQAAABEREQAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAARAAoKERERAAoAAAIACQsAAAAJAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAA0AAAAEDQAAAAAJDgAAAAAADgAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAPAAAAAA8AAAAACRAAAAAAABAAABAAABIAAAASEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAABISEgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAoAAAAACgAAAAAJCwAAAAAACwAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAwAAAAACQwAAAAAAAwAAAwAADAxMjM0NTY3ODlBQkNERUZUISIZDQECAxFLHAwQBAsdEh4naG5vcHFiIAUGDxMUFRoIFgcoJBcYCQoOGx8lI4OCfSYqKzw9Pj9DR0pNWFlaW1xdXl9gYWNkZWZnaWprbHJzdHl6e3wAAAAAAAAAAABJbGxlZ2FsIGJ5dGUgc2VxdWVuY2UARG9tYWluIGVycm9yAFJlc3VsdCBub3QgcmVwcmVzZW50YWJsZQBOb3QgYSB0dHkAUGVybWlzc2lvbiBkZW5pZWQAT3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQATm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQBObyBzdWNoIHByb2Nlc3MARmlsZSBleGlzdHMAVmFsdWUgdG9vIGxhcmdlIGZvciBkYXRhIHR5cGUATm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UAT3V0IG9mIG1lbW9yeQBSZXNvdXJjZSBidXN5AEludGVycnVwdGVkIHN5c3RlbSBjYWxsAFJlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlAEludmFsaWQgc2VlawBDcm9zcy1kZXZpY2UgbGluawBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0ARGlyZWN0b3J5IG5vdCBlbXB0eQBDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIAT3BlcmF0aW9uIHRpbWVkIG91dABDb25uZWN0aW9uIHJlZnVzZWQASG9zdCBpcyBkb3duAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MAQmxvY2sgZGV2aWNlIHJlcXVpcmVkAE5vIHN1Y2ggZGV2aWNlAE5vdCBhIGRpcmVjdG9yeQBJcyBhIGRpcmVjdG9yeQBUZXh0IGZpbGUgYnVzeQBFeGVjIGZvcm1hdCBlcnJvcgBJbnZhbGlkIGFyZ3VtZW50AEFyZ3VtZW50IGxpc3QgdG9vIGxvbmcAU3ltYm9saWMgbGluayBsb29wAEZpbGVuYW1lIHRvbyBsb25nAFRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtAE5vIGZpbGUgZGVzY3JpcHRvcnMgYXZhaWxhYmxlAEJhZCBmaWxlIGRlc2NyaXB0b3IATm8gY2hpbGQgcHJvY2VzcwBCYWQgYWRkcmVzcwBGaWxlIHRvbyBsYXJnZQBUb28gbWFueSBsaW5rcwBObyBsb2NrcyBhdmFpbGFibGUAUmVzb3VyY2UgZGVhZGxvY2sgd291bGQgb2NjdXIAU3RhdGUgbm90IHJlY292ZXJhYmxlAFByZXZpb3VzIG93bmVyIGRpZWQAT3BlcmF0aW9uIGNhbmNlbGVkAEZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZABObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZQBJZGVudGlmaWVyIHJlbW92ZWQARGV2aWNlIG5vdCBhIHN0cmVhbQBObyBkYXRhIGF2YWlsYWJsZQBEZXZpY2UgdGltZW91dABPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMATGluayBoYXMgYmVlbiBzZXZlcmVkAFByb3RvY29sIGVycm9yAEJhZCBtZXNzYWdlAEZpbGUgZGVzY3JpcHRvciBpbiBiYWQgc3RhdGUATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABTb2NrZXQgdHlwZSBub3Qgc3VwcG9ydGVkAE5vdCBzdXBwb3J0ZWQAUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWQAQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbABBZGRyZXNzIG5vdCBhdmFpbGFibGUATmV0d29yayBpcyBkb3duAE5ldHdvcmsgdW5yZWFjaGFibGUAQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrAENvbm5lY3Rpb24gYWJvcnRlZABObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlAFNvY2tldCBpcyBjb25uZWN0ZWQAU29ja2V0IG5vdCBjb25uZWN0ZWQAQ2Fubm90IHNlbmQgYWZ0ZXIgc29ja2V0IHNodXRkb3duAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBSZW1vdGUgSS9PIGVycm9yAFF1b3RhIGV4Y2VlZGVkAE5vIG1lZGl1bSBmb3VuZABXcm9uZyBtZWRpdW0gdHlwZQBObyBlcnJvciBpbmZvcm1hdGlvbgAAAAAAACAMAACzDQAASAwAABMOAAB4CQAAAAAAAEgMAADADQAAiAkAAAAAAAAgDAAA4Q0AAEgMAADuDQAAaAkAAAAAAACkCQAABQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAMAAADkHAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQKAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAwAAAIgWAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALgaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAABoCQAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAAAAAAkAkAAAcAAAAPAAAACQAAAAoAAAALAAAAEAAAABEAAAASAAAAcmIAbGF5b3V0cy8lcy5qc29uAGxheW91dCBmaWxlOiAlcwoAJXMgaXMgbm90IGEgZmlsZQoAanNvbl9zdHJpbmc6ICVzCgAoKTw6Oj57IGxheW91dCA9IG5ldyBMYXlvdXQoICJoZXhhZ29uYWxfYmFzaWMiICk7IH0AaGVsbG8KAC0rICAgMFgweAAobnVsbCkALTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgByd2EAdGVybWluYXRpbmcgd2l0aCAlcyBleGNlcHRpb24gb2YgdHlwZSAlczogJXMAdGVybWluYXRpbmcgd2l0aCAlcyBleGNlcHRpb24gb2YgdHlwZSAlcwB0ZXJtaW5hdGluZyB3aXRoICVzIGZvcmVpZ24gZXhjZXB0aW9uAHRlcm1pbmF0aW5nAHVuY2F1Z2h0AFN0OWV4Y2VwdGlvbgBOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQBTdDl0eXBlX2luZm8ATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQBwdGhyZWFkX29uY2UgZmFpbHVyZSBpbiBfX2N4YV9nZXRfZ2xvYmFsc19mYXN0KCkAY2Fubm90IGNyZWF0ZSBwdGhyZWFkIGtleSBmb3IgX19jeGFfZ2V0X2dsb2JhbHMoKQBjYW5ub3QgemVybyBvdXQgdGhyZWFkIHZhbHVlIGZvciBfX2N4YV9nZXRfZ2xvYmFscygpAHRlcm1pbmF0ZV9oYW5kbGVyIHVuZXhwZWN0ZWRseSByZXR1cm5lZAAgY29uc3QAIHZvbGF0aWxlACByZXN0cmljdAAgY29tcGxleAAgaW1hZ2luYXJ5ACBbACAoACkAKAAmJgBvYmpjX29iamVjdDwAKgAmAG9iamNwcm90bwAgADwAPgAgdmVjdG9yWwBdAHBpeGVsIHZlY3RvclsAJj0APQAsAH4AOjoAZGVsZXRlW10gAGRlbGV0ZSAALwAvPQBeAF49AD09AD49AClbADw9ADw8ADw8PQAtAC09ACo9AC0tACktLQAhPQAhAHx8AHwAfD0ALT4qACsAKz0AKysAKSsrACkgPyAoACkgOiAoACUAJT0APj4APj49AHRocm93AHRocm93IAB0eXBlaWQoAHNpemVvZi4uLigALCAAc2l6ZW9mICgAc3RhdGljX2Nhc3Q8AD4oAHJlaW50ZXJwcmV0X2Nhc3Q8AC0+AG5vZXhjZXB0ICgAW10gACkgAC4ALioAc3RkOjoAb3BlcmF0b3ImJgBvcGVyYXRvciYAb3BlcmF0b3ImPQBvcGVyYXRvcj0Ab3BlcmF0b3IoKQBvcGVyYXRvciwAb3BlcmF0b3J+AG9wZXJhdG9yIABvcGVyYXRvciBkZWxldGVbXQBvcGVyYXRvcioAb3BlcmF0b3IvAG9wZXJhdG9yLz0Ab3BlcmF0b3JeAG9wZXJhdG9yXj0Ab3BlcmF0b3I9PQBvcGVyYXRvcj49AG9wZXJhdG9yPgBvcGVyYXRvcltdAG9wZXJhdG9yPD0Ab3BlcmF0b3IiIiAAb3BlcmF0b3I8PABvcGVyYXRvcjw8PQBvcGVyYXRvcjwAb3BlcmF0b3ItAG9wZXJhdG9yLT0Ab3BlcmF0b3IqPQBvcGVyYXRvci0tAG9wZXJhdG9yIG5ld1tdAG9wZXJhdG9yIT0Ab3BlcmF0b3IhAG9wZXJhdG9yIG5ldwBvcGVyYXRvcnx8AG9wZXJhdG9yfABvcGVyYXRvcnw9AG9wZXJhdG9yLT4qAG9wZXJhdG9yKwBvcGVyYXRvcis9AG9wZXJhdG9yKysAb3BlcmF0b3ItPgBvcGVyYXRvcj8Ab3BlcmF0b3IlAG9wZXJhdG9yJT0Ab3BlcmF0b3I+PgBvcGVyYXRvcj4+PQBvcGVyYXRvciBkZWxldGUAJ3VubmFtZWQAJ2xhbWJkYScoAHN0ZDo6c3RyaW5nAHN0ZDo6YmFzaWNfc3RyaW5nPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4sIHN0ZDo6YWxsb2NhdG9yPGNoYXI+ID4AYmFzaWNfc3RyaW5nAHN0ZDo6aXN0cmVhbQBzdGQ6OmJhc2ljX2lzdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AGJhc2ljX2lzdHJlYW0Ac3RkOjpvc3RyZWFtAHN0ZDo6YmFzaWNfb3N0cmVhbTxjaGFyLCBzdGQ6OmNoYXJfdHJhaXRzPGNoYXI+ID4AYmFzaWNfb3N0cmVhbQBzdGQ6Omlvc3RyZWFtAHN0ZDo6YmFzaWNfaW9zdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AGJhc2ljX2lvc3RyZWFtAGR5bmFtaWNfY2FzdDwAKSgAY29uc3RfY2FzdDwAYWxpZ25vZiAoAGZwAHdjaGFyX3QAZmFsc2UAdHJ1ZQBjaGFyAHNpZ25lZCBjaGFyAHVuc2lnbmVkIGNoYXIAc2hvcnQAdW5zaWduZWQgc2hvcnQAdQBsAHVsAGxsAHVsbABfX2ludDEyOAB1bnNpZ25lZCBfX2ludDEyOAAlTGFMACVhACVhZgBkZWNsdHlwZSgAc3RkOjphbGxvY2F0b3IAc3RkOjpiYXNpY19zdHJpbmcAOjpzdHJpbmcgbGl0ZXJhbABzdGQAX0dMT0JBTF9fTgAoYW5vbnltb3VzIG5hbWVzcGFjZSkAID4AVF8AaWQAOjoqACAmACAmJgAgW10Adm9pZABib29sAGludAB1bnNpZ25lZCBpbnQAbG9uZwB1bnNpZ25lZCBsb25nAGxvbmcgbG9uZwBmbG9hdABsb25nIGRvdWJsZQBfX2Zsb2F0MTI4AC4uLgBkZWNpbWFsNjQAZGVjaW1hbDEyOABkZWNpbWFsMzIAZGVjaW1hbDE2AGNoYXIzMl90AGNoYXIxNl90AGF1dG8Ac3RkOjpudWxscHRyX3QAZG91YmxlAHVuc2lnbmVkIGxvbmcgbG9uZwBfYmxvY2tfaW52b2tlAGludm9jYXRpb24gZnVuY3Rpb24gZm9yIGJsb2NrIGluIAB2dGFibGUgZm9yIABWVFQgZm9yIAB0eXBlaW5mbyBmb3IgAHR5cGVpbmZvIG5hbWUgZm9yIABjb3ZhcmlhbnQgcmV0dXJuIHRodW5rIHRvIABjb25zdHJ1Y3Rpb24gdnRhYmxlIGZvciAALWluLQB2aXJ0dWFsIHRodW5rIHRvIABub24tdmlydHVhbCB0aHVuayB0byAAZ3VhcmQgdmFyaWFibGUgZm9yIAByZWZlcmVuY2UgdGVtcG9yYXJ5IGZvciA=";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function(node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function(node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //err(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function() {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function(allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_init": _init, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _init=env._init;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN6LayoutC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (_strlen($9)|0);
 $11 = (13 + ($10))|0;
 $12 = (__Znam($11)|0);
 $4 = $12;
 $13 = ((($8)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_fopen($14,3176)|0);
 $5 = $15;
 $16 = $4;
 $17 = $3;
 HEAP32[$vararg_buffer>>2] = $17;
 (_sprintf($16,3179,$vararg_buffer)|0);
 $18 = $4;
 $19 = ((($8)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($8)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $21;
 (_printf(3195,$vararg_buffer1)|0);
 $22 = $5;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $36 = ((($8)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $37;
  (_printf(3212,$vararg_buffer4)|0);
  $38 = $7;
  HEAP32[$vararg_buffer7>>2] = $38;
  (_printf(3230,$vararg_buffer7)|0);
  $39 = $7;
  _free($39);
  STACKTOP = sp;return;
 }
 $24 = $5;
 (_fseek($24,0,2)|0);
 $25 = $5;
 $26 = (_ftell($25)|0);
 $6 = $26;
 $27 = $5;
 (_fseek($27,0,0)|0);
 $28 = $6;
 $29 = (_malloc($28)|0);
 $7 = $29;
 $30 = $7;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $7;
  $33 = $6;
  $34 = $5;
  (_fread($32,1,$33,$34)|0);
 }
 $35 = $5;
 (_fclose($35)|0);
 $38 = $7;
 HEAP32[$vararg_buffer7>>2] = $38;
 (_printf(3230,$vararg_buffer7)|0);
 $39 = $7;
 _free($39);
 STACKTOP = sp;return;
}
function _emscripten_bind_VoidPtr___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_Layout_Layout_1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(12)|0);
 $3 = $1;
 __ZN6LayoutC2EPKc($2,$3);
 STACKTOP = sp;return ($2|0);
}
function _emscripten_bind_Layout___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function ___em_js__init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3247|0);
}
function _main() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = 0;
 (_printf(3299,$vararg_buffer)|0);
 _init();
 STACKTOP = sp;return 0;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6864|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=2724; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out_717($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint_718($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint_718($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((16 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_720($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 3306;$$2256 = $spec$select295;$$4266 = $spec$select;$277 = $240;$279 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = tempRet0;
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 3306;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 3306 : (3308);
       $spec$select296 = $266 ? $$ : (3307);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 3306;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 3306;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 3316 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_723($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 3306;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (3306 + ($236)|0);
      $spec$select293 = $or$cond278 ? 3306 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$277 = $225;$279 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$277 = $271;$279 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 3306;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_723($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out_717($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $276 = ($277|0)!=(0);
     $278 = ($279|0)!=(0);
     $280 = $276 | $278;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_723($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_723($0,32,$$2261,$341,$$6268);
    _out_717($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_723($0,48,$$2261,$341,$343);
    _pad_723($0,48,$spec$select284,$339,0);
    _out_717($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_723($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg_720($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $354 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $353 = ($354>>>0)<(10);
      if ($353) {
       $$3317 = $354;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_717($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint_718($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_720($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (480 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = tempRet0;
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = tempRet0;
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_391()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_723($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_717($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_717($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_724($1)|0);
 $13 = tempRet0;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_724($15)|0);
  $17 = tempRet0;
  $$0471 = $15;$$0522 = 1;$$0523 = 3323;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (3324) : (3329);
  $spec$select565 = $19 ? $$ : (3326);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 3342 : 3346;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 3350 : 3354;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_723($0,32,$2,$34,$35);
   _out_717($0,$$0523,$$0522);
   _out_717($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_723($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (480 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_723($0,32,$2,$113,$4);
    _out_717($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_723($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out_717($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_723($0,48,$118,0,0);
    _out_717($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_723($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = tempRet0;
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = tempRet0;
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = tempRet0;
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = tempRet0;
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = tempRet0;
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_723($0,32,$2,$339,$4);
   _out_717($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_723($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out_717($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out_717($0,4173,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out_717($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_723($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out_717($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out_717($0,4173,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out_717($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_723($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out_717($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_723($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_724($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_306()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_306() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2848|0);
}
function ___pthread_self_391() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (496 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 592;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 592;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 31]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_642()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_642() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 31]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(3358,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(3358,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 19;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 2;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(6804)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((6868|0));
 return (6876|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((6868|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[680]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[680]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 31]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 31]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 31]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isdigit($0)|0);
 $2 = ($1|0)!=(0);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $5 | $2;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $37 = $9;
 } else {
  $37 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 31]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $36 = ($37|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($37|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 31]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[648]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[1720]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (6920 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[1720] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(6888)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (6920 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[1720] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(6900)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (6920 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[1720] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(6888)>>2] = $76;
     HEAP32[(6900)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(6884)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (7184 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (7184 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(6884)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(6900)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (6920 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[1720] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(6888)>>2] = $$0171$i;
       HEAP32[(6900)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(6884)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (7184 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (7184 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(6888)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (7184 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(6884)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (6920 + ($382<<2)|0);
           $384 = HEAP32[1720]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[1720] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (7184 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(6884)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(6888)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(6900)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(6900)>>2] = $465;
   HEAP32[(6888)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(6888)>>2] = 0;
   HEAP32[(6900)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(6892)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(6892)>>2] = $480;
  $481 = HEAP32[(6904)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(6904)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[1838]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(7360)>>2] = 4096;
  HEAP32[(7356)>>2] = 4096;
  HEAP32[(7364)>>2] = -1;
  HEAP32[(7368)>>2] = -1;
  HEAP32[(7372)>>2] = 0;
  HEAP32[(7324)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[1838] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(7360)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(7320)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(7312)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(7324)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(6904)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (7328);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(7356)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(7312)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(7320)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(7360)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(7324)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(7324)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(7312)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(7312)>>2] = $582;
  $583 = HEAP32[(7316)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(7316)>>2] = $582;
  }
  $585 = HEAP32[(6904)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(6896)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(6896)>>2] = $$748$i;
    }
    HEAP32[(7328)>>2] = $$748$i;
    HEAP32[(7332)>>2] = $$723947$i;
    HEAP32[(7340)>>2] = 0;
    $590 = HEAP32[1838]|0;
    HEAP32[(6916)>>2] = $590;
    HEAP32[(6912)>>2] = -1;
    HEAP32[(6932)>>2] = (6920);
    HEAP32[(6928)>>2] = (6920);
    HEAP32[(6940)>>2] = (6928);
    HEAP32[(6936)>>2] = (6928);
    HEAP32[(6948)>>2] = (6936);
    HEAP32[(6944)>>2] = (6936);
    HEAP32[(6956)>>2] = (6944);
    HEAP32[(6952)>>2] = (6944);
    HEAP32[(6964)>>2] = (6952);
    HEAP32[(6960)>>2] = (6952);
    HEAP32[(6972)>>2] = (6960);
    HEAP32[(6968)>>2] = (6960);
    HEAP32[(6980)>>2] = (6968);
    HEAP32[(6976)>>2] = (6968);
    HEAP32[(6988)>>2] = (6976);
    HEAP32[(6984)>>2] = (6976);
    HEAP32[(6996)>>2] = (6984);
    HEAP32[(6992)>>2] = (6984);
    HEAP32[(7004)>>2] = (6992);
    HEAP32[(7000)>>2] = (6992);
    HEAP32[(7012)>>2] = (7000);
    HEAP32[(7008)>>2] = (7000);
    HEAP32[(7020)>>2] = (7008);
    HEAP32[(7016)>>2] = (7008);
    HEAP32[(7028)>>2] = (7016);
    HEAP32[(7024)>>2] = (7016);
    HEAP32[(7036)>>2] = (7024);
    HEAP32[(7032)>>2] = (7024);
    HEAP32[(7044)>>2] = (7032);
    HEAP32[(7040)>>2] = (7032);
    HEAP32[(7052)>>2] = (7040);
    HEAP32[(7048)>>2] = (7040);
    HEAP32[(7060)>>2] = (7048);
    HEAP32[(7056)>>2] = (7048);
    HEAP32[(7068)>>2] = (7056);
    HEAP32[(7064)>>2] = (7056);
    HEAP32[(7076)>>2] = (7064);
    HEAP32[(7072)>>2] = (7064);
    HEAP32[(7084)>>2] = (7072);
    HEAP32[(7080)>>2] = (7072);
    HEAP32[(7092)>>2] = (7080);
    HEAP32[(7088)>>2] = (7080);
    HEAP32[(7100)>>2] = (7088);
    HEAP32[(7096)>>2] = (7088);
    HEAP32[(7108)>>2] = (7096);
    HEAP32[(7104)>>2] = (7096);
    HEAP32[(7116)>>2] = (7104);
    HEAP32[(7112)>>2] = (7104);
    HEAP32[(7124)>>2] = (7112);
    HEAP32[(7120)>>2] = (7112);
    HEAP32[(7132)>>2] = (7120);
    HEAP32[(7128)>>2] = (7120);
    HEAP32[(7140)>>2] = (7128);
    HEAP32[(7136)>>2] = (7128);
    HEAP32[(7148)>>2] = (7136);
    HEAP32[(7144)>>2] = (7136);
    HEAP32[(7156)>>2] = (7144);
    HEAP32[(7152)>>2] = (7144);
    HEAP32[(7164)>>2] = (7152);
    HEAP32[(7160)>>2] = (7152);
    HEAP32[(7172)>>2] = (7160);
    HEAP32[(7168)>>2] = (7160);
    HEAP32[(7180)>>2] = (7168);
    HEAP32[(7176)>>2] = (7168);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(6904)>>2] = $599;
    HEAP32[(6892)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(7368)>>2]|0;
    HEAP32[(6908)>>2] = $605;
   } else {
    $$024372$i = (7328);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(6892)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(6904)>>2] = $631;
       HEAP32[(6892)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(7368)>>2]|0;
       HEAP32[(6908)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(6896)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(6896)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (7328);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(6892)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(6892)>>2] = $678;
        HEAP32[(6904)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(6900)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(6888)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(6888)>>2] = $684;
         HEAP32[(6900)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[1720]|0;
            $703 = $702 & $701;
            HEAP32[1720] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (7184 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(6884)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(6884)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (6920 + ($763<<2)|0);
         $765 = HEAP32[1720]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[1720] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (7184 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(6884)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(6884)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (7328);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(6904)>>2] = $870;
    HEAP32[(6892)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(7368)>>2]|0;
    HEAP32[(6908)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(7328)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(7328)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(7328)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(7328)+12>>2]|0;
    HEAP32[(7328)>>2] = $$748$i;
    HEAP32[(7332)>>2] = $$723947$i;
    HEAP32[(7340)>>2] = 0;
    HEAP32[(7336)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (6920 + ($892<<2)|0);
      $894 = HEAP32[1720]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[1720] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (7184 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(6884)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(6884)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(6892)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(6892)>>2] = $971;
   $972 = HEAP32[(6904)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(6904)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(6896)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(6900)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(6888)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[1720]|0;
     $29 = $28 & $27;
     HEAP32[1720] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (7184 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(6884)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(6884)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(6904)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(6892)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(6892)>>2] = $98;
   HEAP32[(6904)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(6900)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(6900)>>2] = 0;
   HEAP32[(6888)>>2] = 0;
   return;
  }
  $103 = HEAP32[(6900)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(6888)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(6888)>>2] = $106;
   HEAP32[(6900)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[1720]|0;
     $122 = $121 & $120;
     HEAP32[1720] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (7184 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(6884)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(6884)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(6900)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(6888)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (6920 + ($183<<2)|0);
  $185 = HEAP32[1720]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[1720] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (7184 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(6884)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(6884)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(6912)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(6912)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (7336);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(6912)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(7360)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(6904)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(6892)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(6904)>>2] = $33;
  HEAP32[(6892)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(6900)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(6888)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(6888)>>2] = $storemerge1;
  HEAP32[(6900)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[1720]|0;
    $81 = $80 & $79;
    HEAP32[1720] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (7184 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(6884)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(6884)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(6900)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(6888)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[1720]|0;
     $25 = $24 & $23;
     HEAP32[1720] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (7184 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(6884)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(6884)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(6904)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(6892)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(6892)>>2] = $89;
   HEAP32[(6904)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(6900)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(6900)>>2] = 0;
   HEAP32[(6888)>>2] = 0;
   return;
  }
  $94 = HEAP32[(6900)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(6888)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(6888)>>2] = $97;
   HEAP32[(6900)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[1720]|0;
     $113 = $112 & $111;
     HEAP32[1720] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (7184 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(6884)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(6884)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(6900)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(6888)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (6920 + ($174<<2)|0);
  $176 = HEAP32[1720]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[1720] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (7184 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(6884)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(6884)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function __Znwm($0) {
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 31]();
 }
 return ($$lcssa|0);
}
function __Znam($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 3498;
    _abort_message(3448,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[600]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 31](2400,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1]($30)|0);
    HEAP32[$vararg_buffer>>2] = 3498;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(3362,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 3498;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(3407,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(3486,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((7376|0),(20|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[1845]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(3637,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[616]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,2424,2408,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 31]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 31]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 31]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 31]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 31]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 31]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((7380|0),(21|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(3686,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[1845]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(3736,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 31]();
 _abort_message(3789,$vararg_buffer);
 // unreachable;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[773]|0;
 $1 = (($0) + 0)|0;
 HEAP32[773] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_demangle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$158 = 0, $$2 = 0, $$pr$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, $or$cond54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $4 = sp + 4184|0;
 $5 = sp;
 $6 = sp + 4120|0;
 $7 = sp + 4112|0;
 $8 = ($0|0)==(0|0);
 if ($8) {
  label = 3;
 } else {
  $9 = ($1|0)!=(0|0);
  $10 = ($2|0)==(0|0);
  $or$cond = $9 & $10;
  if ($or$cond) {
   label = 3;
  } else {
   if ($9) {
    $12 = HEAP32[$2>>2]|0;
    $63 = $12;
   } else {
    $63 = 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EEC2Ev($5);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILm4096EEERNS0_5arenaIXT_EEE($6,$5);
   $13 = ((($6)) + 48|0);
   $14 = ((($6)) + 61|0);
   ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP8[$13+12>>0]=0|0;
   HEAP8[$14>>0] = 1;
   $15 = ((($6)) + 32|0);
   $16 = ((($6)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($6)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17>>>0)<($19>>>0);
   if ($20) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($4,$5);
    HEAP32[$17>>2] = 0;
    $21 = ((($17)) + 4|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($17)) + 8|0);
    HEAP32[$22>>2] = 0;
    $23 = ((($17)) + 12|0);
    $24 = HEAP32[$4>>2]|0;
    HEAP32[$23>>2] = $24;
    $25 = HEAP32[$16>>2]|0;
    $26 = ((($25)) + 16|0);
    HEAP32[$16>>2] = $26;
   } else {
    __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILm4096EEEEEEvDpOT_($15,$5);
   }
   $27 = ((($6)) + 62|0);
   HEAP8[$27>>0] = 0;
   $28 = ((($6)) + 63|0);
   HEAP8[$28>>0] = 1;
   HEAP32[$7>>2] = 0;
   $29 = (_strlen($0)|0);
   $30 = (($0) + ($29)|0);
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$30,$6,$7);
   $31 = HEAP32[$7>>2]|0;
   $32 = ($31|0)!=(0);
   $33 = HEAP8[$27>>0]|0;
   $34 = ($33<<24>>24)==(0);
   $or$cond54 = $32 | $34;
   do {
    if ($or$cond54) {
     $56 = $31;
     label = 22;
    } else {
     $35 = HEAP32[$15>>2]|0;
     $36 = HEAP32[$16>>2]|0;
     $37 = ($35|0)==($36|0);
     if ($37) {
      label = 23;
     } else {
      $38 = HEAP32[$35>>2]|0;
      $39 = ((($35)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38|0)==($40|0);
      if ($41) {
       label = 23;
      } else {
       HEAP8[$27>>0] = 0;
       HEAP8[$14>>0] = 0;
       $42 = HEAP32[$6>>2]|0;
       $43 = ((($6)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $$0$i$i$i = $44;
       while(1) {
        $45 = ($$0$i$i$i|0)==($42|0);
        if ($45) {
         break;
        }
        $46 = ((($$0$i$i$i)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
        $$0$i$i$i = $46;
       }
       HEAP32[$43>>2] = $42;
       $47 = ((($6)) + 16|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ((($6)) + 20|0);
       $50 = HEAP32[$49>>2]|0;
       $$0$i$i$i55 = $50;
       while(1) {
        $51 = ($$0$i$i$i55|0)==($48|0);
        if ($51) {
         break;
        }
        $52 = ((($$0$i$i$i55)) + -16|0);
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($52);
        $$0$i$i$i55 = $52;
       }
       HEAP32[$49>>2] = $48;
       __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$30,$6,$7);
       $53 = HEAP8[$27>>0]|0;
       $54 = ($53<<24>>24)==(0);
       if ($54) {
        $$pr$pre = HEAP32[$7>>2]|0;
        $56 = $$pr$pre;
        label = 22;
        break;
       } else {
        HEAP32[$7>>2] = -2;
        $$2 = 0;$88 = -2;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $55 = ($56|0)==(0);
    if ($55) {
     label = 23;
    } else {
     $$2 = 0;$88 = $56;
    }
   }
   do {
    if ((label|0) == 23) {
     $57 = ((($6)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($58)) + -24|0);
     $60 = (__ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($59)|0);
     $61 = (($60) + 1)|0;
     $62 = ($61>>>0)>($63>>>0);
     if ($62) {
      $64 = (_realloc($1,$61)|0);
      $65 = ($64|0)==(0|0);
      if ($65) {
       HEAP32[$7>>2] = -1;
       $$2 = 0;$88 = -1;
       break;
      }
      if ($10) {
       $$158 = $64;
      } else {
       HEAP32[$2>>2] = $61;
       $$158 = $64;
      }
     } else {
      $66 = ($1|0)==(0|0);
      if ($66) {
       $$2 = 0;$88 = 0;
       break;
      } else {
       $$158 = $1;
      }
     }
     $67 = HEAP32[$57>>2]|0;
     $68 = ((($67)) + -12|0);
     $69 = ((($67)) + -24|0);
     $70 = ((($68)) + 11|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)<(0);
     $73 = HEAP32[$68>>2]|0;
     $74 = ((($67)) + -8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $71&255;
     $77 = $72 ? $73 : $68;
     $78 = $72 ? $75 : $76;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($69,$77,$78)|0);
     $79 = HEAP32[$57>>2]|0;
     $80 = ((($79)) + -24|0);
     $81 = ((($80)) + 11|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = ($82<<24>>24)<(0);
     if ($83) {
      $84 = HEAP32[$80>>2]|0;
      $85 = $84;
     } else {
      $85 = $80;
     }
     _memcpy(($$158|0),($85|0),($60|0))|0;
     $86 = (($$158) + ($60)|0);
     HEAP8[$86>>0] = 0;
     $$2 = $$158;$88 = 0;
    }
   } while(0);
   $87 = ($3|0)==(0|0);
   if (!($87)) {
    HEAP32[$3>>2] = $88;
   }
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EED2Ev($5);
   $$0 = $$2;
  }
 }
 if ((label|0) == 3) {
  $11 = ($3|0)==(0|0);
  if ($11) {
   $$0 = 0;
  } else {
   HEAP32[$3>>2] = -3;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILm4096EEERNS0_5arenaIXT_EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EEC2ERNS0_5arenaILm4096EEE($2,$1);
 HEAP32[$0>>2] = 0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $8;
 $9 = ((($0)) + 16|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($3,$1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEC2EmRKS6_RKS7_($9,$3);
 $10 = ((($0)) + 32|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($4,$1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEEC2EmRKS8_RKS9_($10,$4);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILm4096EEEEEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 12|0);
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 4;
  $18 = $10 >>> 1;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $16 >> 3;
  $21 = ($20>>>0)<($9>>>0);
  $$sroa$speculated$i = $21 ? $9 : $20;
  $spec$select$i = $19 ? $$sroa$speculated$i : $10;
  $22 = HEAP32[$4>>2]|0;
  $23 = (($22) - ($15))|0;
  $24 = $23 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($3,$spec$select$i,$24,$12);
  $25 = ((($3)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($2,$1);
  HEAP32[$26>>2] = 0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($26)) + 8|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($26)) + 12|0);
  $30 = HEAP32[$2>>2]|0;
  HEAP32[$29>>2] = $30;
  $31 = ((($26)) + 16|0);
  HEAP32[$25>>2] = $31;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond56 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0>>>0)<($1>>>0);
 L1: do {
  if ($4) {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)==(95);
   L3: do {
    if ($6) {
     $7 = $1;
     $8 = $0;
     $9 = (($7) - ($8))|0;
     $10 = ($9|0)>(3);
     if (!($10)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
     $11 = ((($0)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     switch ($12<<24>>24) {
     case 90:  {
      $13 = ((($0)) + 2|0);
      $14 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
      $15 = ($14|0)==($13|0);
      $16 = ($14|0)==($1|0);
      $or$cond = $15 | $16;
      if ($or$cond) {
       $$0 = $14;
      } else {
       $17 = HEAP8[$14>>0]|0;
       $18 = ($17<<24>>24)==(46);
       if ($18) {
        $19 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
        $$0 = $19;
       } else {
        $$0 = $14;
       }
      }
      $20 = ($$0|0)==($1|0);
      if ($20) {
       break L3;
      }
      HEAP32[$3>>2] = -2;
      break L1;
      break;
     }
     case 95:  {
      label = 11;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 11) {
      $21 = ((($0)) + 2|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)==(95);
      if ($23) {
       $24 = ((($0)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(90);
       if ($26) {
        $27 = ((($0)) + 4|0);
        $28 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($27,$1,$2)|0);
        $29 = ($28|0)==($27|0);
        $30 = ($28|0)==($1|0);
        $or$cond56 = $29 | $30;
        if ($or$cond56) {
         HEAP32[$3>>2] = -2;
         break L1;
        }
        $31 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($28,$1,$2)|0);
        $32 = ($31|0)==($1|0);
        if ($32) {
         break;
        }
        HEAP32[$3>>2] = -2;
        break L1;
       }
      }
     }
     HEAP32[$3>>2] = -2;
     break L1;
    } else {
     $33 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $34 = ($33|0)==($1|0);
     if (!($34)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
    }
   } while(0);
   $$pr = HEAP32[$3>>2]|0;
   $35 = ($$pr|0)==(0);
   if ($35) {
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($2)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     HEAP32[$3>>2] = -2;
    }
   }
  } else {
   HEAP32[$3>>2] = -2;
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$0$i$i = $4;
  while(1) {
   $5 = ($$0$i$i|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($$0$i$i)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3>>2] = $1;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = (($11|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m($7,$8,$12);
 }
 return;
}
function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $15 = $5;
 } else {
  $6 = $2&255;
  $15 = $6;
 }
 $7 = ((($0)) + 12|0);
 $8 = ((($7)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = ((($0)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 } else {
  $13 = $9&255;
  $16 = $13;
 }
 $14 = (($16) + ($15))|0;
 return ($14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($14) + ($2))|0;
  $28 = (($27) - ($15))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEENS5_IS9_Lm4096EEEED2Ev($1);
 $2 = ((($0)) + 16|0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($2);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEENS5_IS9_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$0$i$i = $4;
  while(1) {
   $5 = ($$0$i$i|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($$0$i$i)) + -16|0);
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3>>2] = $1;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m($7,$8,$12);
 }
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$0$i$i = $4;
  while(1) {
   $5 = ($$0$i$i|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($$0$i$i)) + -16|0);
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3>>2] = $1;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m($7,$8,$12);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm($3,$1,$4);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE17pointer_in_bufferEPc($0,$1)|0);
 if ($3) {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($2)|0);
  $5 = (($1) + ($4)|0);
  $6 = ((($0)) + 4096|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)==($7|0);
  if ($8) {
   HEAP32[$6>>2] = $1;
  }
 } else {
  _free($1);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE17pointer_in_bufferEPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<=($1>>>0);
 $3 = ((($0)) + 4096|0);
 $4 = ($3>>>0)>=($1>>>0);
 $5 = $4 & $2;
 return ($5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 15)|0;
 $2 = $1 & -16;
 return ($2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm($3,$1,$4);
 return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2*24)|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm($3,$1,$4);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($4);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i188 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i187 = 0, $$0$i$i193 = 0, $$0$i$i198 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0168 = 0, $$11 = 0, $$1135 = 0, $$1169 = 0, $$1169$ph = 0, $$2136 = 0, $$3144$off0$ph = 0, $$3171 = 0, $$4158 = 0;
 var $$5139 = 0, $$6140 = 0, $$6160 = 0, $$in = 0, $$in210 = 0, $$pre = 0, $$pre$phi248Z2D = 0, $$pre$phiZ2D = 0, $$pre241 = 0, $$pre242 = 0, $$pre243 = 0, $$pre244 = 0, $$pre245 = 0, $$pre246 = 0, $$pre247 = 0, $$ptr$i = 0, $$ptr$i189 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i194 = 0, $exitcond$i$i199 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 73|0;
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 $12 = ($0|0)==($1|0);
 if ($12) {
  $$6140 = $0;
  label = 90;
 } else {
  $13 = ((($2)) + 56|0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($5,$13);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ((($2)) + 61|0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6,$16);
  $17 = HEAP32[$13>>2]|0;
  $18 = ($17>>>0)>(1);
  if ($18) {
   HEAP8[$16>>0] = 1;
  }
  $19 = HEAP8[$0>>0]|0;
  $20 = $19 << 24 >> 24;
  L6: do {
   switch ($20|0) {
   case 84: case 71:  {
    $21 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$5139 = $21;$$6160 = 1;
    break;
   }
   default: {
    $22 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $23 = ((($2)) + 48|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($2)) + 52|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($22|0)==($0|0);
    L8: do {
     if ($27) {
      $$2136 = $0;
     } else {
      $28 = ($22|0)==($1|0);
      if ($28) {
       $$2136 = $1;
      } else {
       $29 = HEAP8[$22>>0]|0;
       switch ($29<<24>>24) {
       case 46: case 69:  {
        $$2136 = $22;
        break L8;
        break;
       }
       default: {
       }
       }
       __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($7,$16);
       HEAP8[$16>>0] = 0;
       ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
       $$0$i$i198 = 0;
       while(1) {
        $exitcond$i$i199 = ($$0$i$i198|0)==(3);
        if ($exitcond$i$i199) {
         break;
        }
        $30 = (($8) + ($$0$i$i198<<2)|0);
        HEAP32[$30>>2] = 0;
        $31 = (($$0$i$i198) + 1)|0;
        $$0$i$i198 = $31;
       }
       $32 = HEAP32[$2>>2]|0;
       $33 = ((($2)) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($32|0)==($34|0);
       L16: do {
        if ($35) {
         $$1135 = $0;$$4158 = 0;
        } else {
         $36 = ((($34)) + -24|0);
         $37 = ((($36)) + 11|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)<(0);
         if ($39) {
          $40 = ((($34)) + -20|0);
          $41 = HEAP32[$40>>2]|0;
          $44 = $41;
         } else {
          $42 = $38&255;
          $44 = $42;
         }
         $43 = ($44|0)==(0);
         if ($43) {
          $$1135 = $0;$$4158 = 0;
         } else {
          $45 = ((($2)) + 60|0);
          $46 = HEAP8[$45>>0]|0;
          $47 = ($46<<24>>24)==(0);
          if ($47) {
           if ($39) {
            $48 = HEAP32[$36>>2]|0;
            $49 = ((($34)) + -20|0);
            $50 = HEAP32[$49>>2]|0;
            $53 = $48;$54 = $50;
           } else {
            $51 = $38&255;
            $53 = $36;$54 = $51;
           }
           $52 = (($53) + ($54)|0);
           $55 = ((($52)) + -1|0);
           $56 = HEAP8[$55>>0]|0;
           $57 = ($56<<24>>24)==(62);
           if ($57) {
            if ($39) {
             $58 = ((($34)) + -20|0);
             $59 = HEAP32[$58>>2]|0;
             $60 = HEAP32[$36>>2]|0;
             $$in = $59;$64 = $60;
            } else {
             $61 = $38&255;
             $$in = $61;$64 = $36;
            }
            $62 = (($$in) + -2)|0;
            $63 = (($64) + ($62)|0);
            $65 = HEAP8[$63>>0]|0;
            $66 = ($65<<24>>24)==(45);
            if ($66) {
             $$0168 = $22;$$pre$phiZ2D = $36;
            } else {
             if ($39) {
              $67 = ((($34)) + -20|0);
              $68 = HEAP32[$67>>2]|0;
              $69 = HEAP32[$36>>2]|0;
              $$in210 = $68;$73 = $69;
             } else {
              $70 = $38&255;
              $$in210 = $70;$73 = $36;
             }
             $71 = (($$in210) + -2)|0;
             $72 = (($73) + ($71)|0);
             $74 = HEAP8[$72>>0]|0;
             $75 = ($74<<24>>24)==(62);
             if ($75) {
              $$0168 = $22;$$pre$phiZ2D = $36;
             } else {
              $76 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
              $77 = ($76|0)==($22|0);
              if ($77) {
               $$1135 = $0;$$4158 = 0;
               break;
              }
              $78 = HEAP32[$33>>2]|0;
              $79 = HEAP32[$2>>2]|0;
              $80 = (($78) - ($79))|0;
              $81 = (($80|0) / 24)&-1;
              $82 = ($81>>>0)<(2);
              $83 = $78;
              if ($82) {
               $$1135 = $0;$$4158 = 0;
               break;
              }
              $84 = ((($83)) + -24|0);
              ;HEAP32[$9>>2]=HEAP32[$84>>2]|0;HEAP32[$9+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$84+8>>2]|0;
              $$0$i$i193 = 0;
              while(1) {
               $exitcond$i$i194 = ($$0$i$i193|0)==(3);
               if ($exitcond$i$i194) {
                break;
               }
               $85 = (($84) + ($$0$i$i193<<2)|0);
               HEAP32[$85>>2] = 0;
               $86 = (($$0$i$i193) + 1)|0;
               $$0$i$i193 = $86;
              }
              $87 = ((($83)) + -12|0);
              $88 = ((($8)) + 11|0);
              $89 = HEAP8[$88>>0]|0;
              $90 = ($89<<24>>24)<(0);
              if ($90) {
               $91 = HEAP32[$8>>2]|0;
               HEAP8[$3>>0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($91,$3);
               $92 = ((($8)) + 4|0);
               HEAP32[$92>>2] = 0;
              } else {
               HEAP8[$4>>0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($8,$4);
               HEAP8[$88>>0] = 0;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($8);
              ;HEAP32[$8>>2]=HEAP32[$87>>2]|0;HEAP32[$8+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$87+8>>2]|0;
              $$0$i$i$i$i = 0;
              while(1) {
               $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
               if ($exitcond$i$i$i$i) {
                break;
               }
               $93 = (($87) + ($$0$i$i$i$i<<2)|0);
               HEAP32[$93>>2] = 0;
               $94 = (($$0$i$i$i$i) + 1)|0;
               $$0$i$i$i$i = $94;
              }
              $95 = HEAP8[$88>>0]|0;
              $96 = ($95<<24>>24)<(0);
              $97 = ((($8)) + 4|0);
              $98 = HEAP32[$97>>2]|0;
              $99 = $95&255;
              $100 = $96 ? $98 : $99;
              $101 = ($100|0)==(0);
              if ($101) {
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($9,32);
              }
              $102 = HEAP32[$33>>2]|0;
              $$0$i$i$idx$i187 = 0;
              while(1) {
               $103 = ($$0$i$i$idx$i187|0)==(-1);
               if ($103) {
                break;
               }
               $$0$i$i$add$i188 = (($$0$i$i$idx$i187) + -1)|0;
               $$ptr$i189 = (($102) + (($$0$i$i$add$i188*24)|0)|0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i189);
               $$0$i$i$idx$i187 = $$0$i$i$add$i188;
              }
              $104 = ((($102)) + -24|0);
              HEAP32[$33>>2] = $104;
              $105 = ((($102)) + -48|0);
              $106 = ((($9)) + 11|0);
              $107 = HEAP8[$106>>0]|0;
              $108 = ($107<<24>>24)<(0);
              $109 = HEAP32[$9>>2]|0;
              $110 = ((($9)) + 4|0);
              $111 = HEAP32[$110>>2]|0;
              $112 = $107&255;
              $113 = $108 ? $109 : $9;
              $114 = $108 ? $111 : $112;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($105,0,$113,$114)|0);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
              $$pre = HEAP32[$33>>2]|0;
              $$pre246 = ((($$pre)) + -24|0);
              $$0168 = $76;$$pre$phiZ2D = $$pre246;
             }
            }
           } else {
            $$0168 = $22;$$pre$phiZ2D = $36;
           }
          } else {
           $$0168 = $22;$$pre$phiZ2D = $36;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($$pre$phiZ2D,40);
          $115 = ($$0168|0)==($1|0);
          if ($115) {
           label = 50;
          } else {
           $116 = HEAP8[$$0168>>0]|0;
           $117 = ($116<<24>>24)==(118);
           if ($117) {
            $118 = ((($$0168)) + 1|0);
            $$pre244 = HEAP32[$2>>2]|0;
            $$pre245 = HEAP32[$33>>2]|0;
            $$3171 = $118;$179 = $$pre244;$180 = $$pre245;
           } else {
            label = 50;
           }
          }
          do {
           if ((label|0) == 50) {
            $119 = ((($10)) + 11|0);
            $120 = ((($10)) + 4|0);
            $121 = ((($11)) + 11|0);
            $122 = ((($11)) + 4|0);
            $$0141$off0$ph = 1;$$1169$ph = $$0168;
            L67: while(1) {
             $$1169 = $$1169$ph;
             while(1) {
              $123 = HEAP32[$33>>2]|0;
              $124 = HEAP32[$2>>2]|0;
              $125 = (($123) - ($124))|0;
              $126 = (($125|0) / 24)&-1;
              $127 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1169,$1,$2)|0);
              $128 = HEAP32[$33>>2]|0;
              $129 = HEAP32[$2>>2]|0;
              $130 = (($128) - ($129))|0;
              $131 = (($130|0) / 24)&-1;
              $132 = ($127|0)==($$1169|0);
              if ($132) {
               label = 74;
               break L67;
              }
              $133 = ($131>>>0)>($126>>>0);
              if ($133) {
               break;
              } else {
               $$1169 = $127;
              }
             }
             ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
             $$0$i$i = 0;
             while(1) {
              $exitcond$i$i = ($$0$i$i|0)==(3);
              if ($exitcond$i$i) {
               break;
              }
              $134 = (($10) + ($$0$i$i<<2)|0);
              HEAP32[$134>>2] = 0;
              $135 = (($$0$i$i) + 1)|0;
              $$0$i$i = $135;
             }
             $$0132 = $126;
             while(1) {
              $136 = ($$0132>>>0)<($131>>>0);
              if (!($136)) {
               break;
              }
              $137 = HEAP8[$119>>0]|0;
              $138 = ($137<<24>>24)<(0);
              $139 = HEAP32[$120>>2]|0;
              $140 = $137&255;
              $141 = $138 ? $139 : $140;
              $142 = ($141|0)==(0);
              if (!($142)) {
               (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($10,4106)|0);
              }
              $143 = HEAP32[$2>>2]|0;
              $144 = (($143) + (($$0132*24)|0)|0);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($11,$144);
              $145 = HEAP8[$121>>0]|0;
              $146 = ($145<<24>>24)<(0);
              $147 = HEAP32[$11>>2]|0;
              $148 = HEAP32[$122>>2]|0;
              $149 = $145&255;
              $150 = $146 ? $147 : $11;
              $151 = $146 ? $148 : $149;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($10,$150,$151)|0);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
              $152 = (($$0132) + 1)|0;
              $$0132 = $152;
             }
             $$0 = $126;
             while(1) {
              $153 = ($$0>>>0)<($131>>>0);
              if (!($153)) {
               break;
              }
              $160 = HEAP32[$33>>2]|0;
              $$0$i$i$idx$i = 0;
              while(1) {
               $161 = ($$0$i$i$idx$i|0)==(-1);
               if ($161) {
                break;
               }
               $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
               $$ptr$i = (($160) + (($$0$i$i$add$i*24)|0)|0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
               $$0$i$i$idx$i = $$0$i$i$add$i;
              }
              $162 = ((($160)) + -24|0);
              HEAP32[$33>>2] = $162;
              $163 = (($$0) + 1)|0;
              $$0 = $163;
             }
             $154 = HEAP8[$119>>0]|0;
             $155 = ($154<<24>>24)<(0);
             $156 = HEAP32[$120>>2]|0;
             $157 = $154&255;
             $158 = $155 ? $156 : $157;
             $159 = ($158|0)==(0);
             if ($159) {
              $$3144$off0$ph = $$0141$off0$ph;
             } else {
              $164 = HEAP32[$2>>2]|0;
              $165 = HEAP32[$33>>2]|0;
              $166 = ($164|0)==($165|0);
              if ($166) {
               label = 86;
               break;
              }
              if ($$0141$off0$ph) {
               $$pre$phi248Z2D = $157;$169 = $165;$171 = $154;$175 = $156;
              } else {
               $167 = ((($165)) + -24|0);
               (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($167,4106)|0);
               $$pre241 = HEAP32[$33>>2]|0;
               $$pre242 = HEAP8[$119>>0]|0;
               $$pre243 = HEAP32[$120>>2]|0;
               $$pre247 = $$pre242&255;
               $$pre$phi248Z2D = $$pre247;$169 = $$pre241;$171 = $$pre242;$175 = $$pre243;
              }
              $168 = ((($169)) + -24|0);
              $170 = ($171<<24>>24)<(0);
              $172 = HEAP32[$10>>2]|0;
              $173 = $170 ? $172 : $10;
              $174 = $170 ? $175 : $$pre$phi248Z2D;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($168,$173,$174)|0);
              $$3144$off0$ph = 0;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
             $$0141$off0$ph = $$3144$off0$ph;$$1169$ph = $127;
            }
            if ((label|0) == 74) {
             $176 = $128;
             $177 = $129;
             $$3171 = $$1169;$179 = $177;$180 = $176;
             break;
            }
            else if ((label|0) == 86) {
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
             $$1135 = $0;$$4158 = 0;
             break L16;
            }
           }
          } while(0);
          $178 = ($179|0)==($180|0);
          if ($178) {
           $$1135 = $0;$$4158 = 0;
          } else {
           $181 = ((($180)) + -24|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($181,41);
           $182 = $24 & 1;
           $183 = ($182|0)==(0);
           if (!($183)) {
            $184 = HEAP32[$33>>2]|0;
            $185 = ((($184)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($185,3829)|0);
           }
           $186 = $24 & 2;
           $187 = ($186|0)==(0);
           if (!($187)) {
            $188 = HEAP32[$33>>2]|0;
            $189 = ((($188)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($189,3836)|0);
           }
           $190 = $24 & 4;
           $191 = ($190|0)==(0);
           if (!($191)) {
            $192 = HEAP32[$33>>2]|0;
            $193 = ((($192)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($193,3846)|0);
           }
           switch ($26|0) {
           case 1:  {
            $194 = HEAP32[$33>>2]|0;
            $195 = ((($194)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($195,5310)|0);
            break;
           }
           case 2:  {
            $196 = HEAP32[$33>>2]|0;
            $197 = ((($196)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($197,5313)|0);
            break;
           }
           default: {
           }
           }
           $198 = HEAP32[$33>>2]|0;
           $199 = ((($198)) + -24|0);
           $200 = ((($8)) + 11|0);
           $201 = HEAP8[$200>>0]|0;
           $202 = ($201<<24>>24)<(0);
           $203 = HEAP32[$8>>2]|0;
           $204 = ((($8)) + 4|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $201&255;
           $207 = $202 ? $203 : $8;
           $208 = $202 ? $205 : $206;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($199,$207,$208)|0);
           $$1135 = $$3171;$$4158 = 1;
          }
         }
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($7);
       if ($$4158) {
        $$2136 = $$1135;
       } else {
        $$5139 = $$1135;$$6160 = 0;
        break L6;
       }
      }
     }
    } while(0);
    $$5139 = $$2136;$$6160 = 1;
   }
   }
  } while(0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($5);
  if ($$6160) {
   $$6140 = $$5139;
   label = 90;
  } else {
   $$11 = $0;
  }
 }
 if ((label|0) == 90) {
  $$11 = $$6140;
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ($0|0)==($1|0);
 if ($6) {
  $$014 = $0;
 } else {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(46);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($2)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)==($11|0);
   if ($12) {
    $$014 = $0;
   } else {
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5,$0,$1);
    $13 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5,0,3879)|0);
    ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $14 = (($5) + ($$0$i$i$i<<2)|0);
     HEAP32[$14>>2] = 0;
     $15 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $15;
    }
    $16 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3882)|0);
    ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;
    $$0$i$i$i16 = 0;
    while(1) {
     $exitcond$i$i$i17 = ($$0$i$i$i16|0)==(3);
     if ($exitcond$i$i$i17) {
      break;
     }
     $17 = (($4) + ($$0$i$i$i16<<2)|0);
     HEAP32[$17>>2] = 0;
     $18 = (($$0$i$i$i16) + 1)|0;
     $$0$i$i$i16 = $18;
    }
    $19 = HEAP32[$10>>2]|0;
    $20 = ((($19)) + -24|0);
    $21 = ((($3)) + 11|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)<(0);
    $24 = HEAP32[$3>>2]|0;
    $25 = ((($3)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $23 ? $24 : $3;
    $29 = $23 ? $26 : $27;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($20,$28,$29)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$014 = $1;
   }
  } else {
   $$014 = $0;
  }
 }
 STACKTOP = sp;return ($$014|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$031 = 0, $$032 = 0, $$2 = 0, $$2$ph = 0, $$236 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit40 = 0, $isdigittmp = 0, $isdigittmp39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(12);
 L1: do {
  if ($6) {
   $$031 = 0;$$032 = $0;
   while(1) {
    $7 = ($$031>>>0)<(13);
    if (!($7)) {
     break;
    }
    $8 = HEAP8[$$032>>0]|0;
    $9 = (5515 + ($$031)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($8<<24>>24)==($10<<24>>24);
    if (!($11)) {
     $$236 = $0;
     break L1;
    }
    $12 = (($$031) + 1)|0;
    $13 = ((($$032)) + 1|0);
    $$031 = $12;$$032 = $13;
   }
   $14 = ($$032|0)==($1|0);
   L8: do {
    if ($14) {
     $$3 = $1;
    } else {
     $15 = HEAP8[$$032>>0]|0;
     $16 = ($15<<24>>24)==(95);
     if ($16) {
      $17 = ((($$032)) + 1|0);
      $18 = ($17|0)==($1|0);
      if ($18) {
       $$236 = $0;
       break L1;
      }
      $19 = HEAP8[$17>>0]|0;
      $20 = $19 << 24 >> 24;
      $isdigittmp39 = (($20) + -48)|0;
      $isdigit40 = ($isdigittmp39>>>0)<(10);
      if (!($isdigit40)) {
       $$236 = $0;
       break L1;
      }
      $21 = ((($$032)) + 2|0);
      $$2$ph = $21;
     } else {
      $$2$ph = $$032;
     }
     $$2 = $$2$ph;
     while(1) {
      $22 = ($$2|0)==($1|0);
      if ($22) {
       $$3 = $1;
       break L8;
      }
      $23 = HEAP8[$$2>>0]|0;
      $24 = $23 << 24 >> 24;
      $isdigittmp = (($24) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $$3 = $$2;
       break L8;
      }
      $25 = ((($$2)) + 1|0);
      $$2 = $25;
     }
    }
   } while(0);
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($2)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)==($28|0);
   if ($29) {
    $$236 = $0;
   } else {
    $30 = ((($28)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($30,0,5529)|0);
    $$236 = $$3;
   }
  } else {
   $$236 = $0;
  }
 } while(0);
 return ($$236|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i497 = 0, $$0$i$i$add$i549 = 0, $$0$i$i$add$i561 = 0, $$0$i$i$add$i569 = 0, $$0$i$i$i = 0, $$0$i$i$i575 = 0, $$0$i$i$i579 = 0, $$0$i$i$i582 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i496 = 0, $$0$i$i$idx$i548 = 0, $$0$i$i$idx$i560 = 0, $$0$i$i$idx$i568 = 0, $$0$i533 = 0, $$0$i540 = 0, $$0434 = 0, $$0435 = 0;
 var $$0438 = 0, $$0444 = 0, $$0478 = 0, $$0479 = 0, $$1429 = 0, $$1436 = 0, $$2437 = 0, $$5 = 0, $$in = 0, $$ph = 0, $$ptr$i = 0, $$ptr$i550 = 0, $$ptr$i562 = 0, $$ptr$i570 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i483 = 0, $$sroa$0$0$$sroa_idx$i487 = 0, $$sroa$0$0$$sroa_idx$i489 = 0, $$sroa$0$0$$sroa_idx$i493 = 0, $$sroa$0$0$$sroa_idx$i498 = 0;
 var $$sroa$0$0$$sroa_idx$i504 = 0, $$sroa$0$0$$sroa_idx$i508 = 0, $$sroa$0$0$$sroa_idx$i512 = 0, $$sroa$0$0$$sroa_idx$i514 = 0, $$sroa$0$0$$sroa_idx$i518 = 0, $$sroa$0$0$$sroa_idx$i522 = 0, $$sroa$0$0$$sroa_idx$i526 = 0, $$sroa$0$0$$sroa_idx$i530 = 0, $$sroa$0$0$$sroa_idx$i537 = 0, $$sroa$0$0$$sroa_idx$i544 = 0, $$sroa$0$0$$sroa_idx$i586 = 0, $$sroa$0$0$copyload$i484595 = 0, $$sroa$0$0$copyload$i488597 = 0, $$sroa$0$0$copyload$i490598 = 0, $$sroa$0$0$copyload$i494599 = 0, $$sroa$0$0$copyload$i499594 = 0, $$sroa$0$0$copyload$i505611 = 0, $$sroa$0$0$copyload$i509610 = 0, $$sroa$0$0$copyload$i513600 = 0, $$sroa$0$0$copyload$i515609 = 0;
 var $$sroa$0$0$copyload$i519608 = 0, $$sroa$0$0$copyload$i523607 = 0, $$sroa$0$0$copyload$i527606 = 0, $$sroa$0$0$copyload$i531605 = 0, $$sroa$0$0$copyload$i538604 = 0, $$sroa$0$0$copyload$i545602 = 0, $$sroa$0$0$copyload$i555603 = 0, $$sroa$0$0$copyload$i587601 = 0, $$sroa$0$0$copyload$i596 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i576 = 0, $exitcond$i$i$i580 = 0, $exitcond$i$i$i583 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $3 = sp + 588|0;
 $4 = sp + 584|0;
 $5 = sp + 568|0;
 $6 = sp + 560|0;
 $7 = sp + 544|0;
 $8 = sp + 536|0;
 $9 = sp + 520|0;
 $10 = sp + 512|0;
 $11 = sp + 496|0;
 $12 = sp + 488|0;
 $13 = sp + 472|0;
 $14 = sp + 468|0;
 $15 = sp + 464|0;
 $16 = sp + 452|0;
 $17 = sp + 448|0;
 $18 = sp + 436|0;
 $19 = sp + 424|0;
 $20 = sp + 420|0;
 $21 = sp + 408|0;
 $22 = sp + 404|0;
 $23 = sp + 392|0;
 $24 = sp + 376|0;
 $25 = sp + 368|0;
 $26 = sp + 356|0;
 $27 = sp + 344|0;
 $28 = sp + 320|0;
 $29 = sp + 308|0;
 $30 = sp + 296|0;
 $31 = sp + 284|0;
 $32 = sp + 272|0;
 $33 = sp + 248|0;
 $34 = sp + 236|0;
 $35 = sp + 224|0;
 $36 = sp + 212|0;
 $37 = sp + 200|0;
 $38 = sp + 176|0;
 $39 = sp + 164|0;
 $40 = sp + 152|0;
 $41 = sp + 136|0;
 $42 = sp + 128|0;
 $43 = sp + 112|0;
 $44 = sp + 108|0;
 $45 = sp + 96|0;
 $46 = sp + 80|0;
 $47 = sp + 76|0;
 $48 = sp + 72|0;
 $49 = sp + 56|0;
 $50 = sp + 48|0;
 $51 = sp + 32|0;
 $52 = sp + 24|0;
 $53 = sp + 8|0;
 $54 = sp;
 $55 = ($0|0)==($1|0);
 L1: do {
  if ($55) {
   $$5 = $0;
  } else {
   $56 = HEAP8[$0>>0]|0;
   $57 = $56 << 24 >> 24;
   switch ($57|0) {
   case 75: case 86: case 114:  {
    HEAP32[$3>>2] = 0;
    $58 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$3)|0);
    $59 = ($58|0)==($0|0);
    L5: do {
     if ($59) {
      $$1429 = $0;
     } else {
      $60 = HEAP8[$58>>0]|0;
      $61 = ($60<<24>>24)==(70);
      $62 = ((($2)) + 4|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = HEAP32[$2>>2]|0;
      $65 = (($63) - ($64))|0;
      $66 = (($65|0) / 24)&-1;
      $67 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($58,$1,$2)|0);
      $68 = HEAP32[$62>>2]|0;
      $69 = HEAP32[$2>>2]|0;
      $70 = (($68) - ($69))|0;
      $71 = (($70|0) / 24)&-1;
      $72 = ($67|0)==($58|0);
      if ($72) {
       $$1429 = $0;
      } else {
       $73 = ((($2)) + 20|0);
       $74 = HEAP32[$73>>2]|0;
       if ($61) {
        $$0$i$i$idx$i496 = 0;
        while(1) {
         $75 = ($$0$i$i$idx$i496|0)==(-1);
         if ($75) {
          break;
         }
         $$0$i$i$add$i497 = (($$0$i$i$idx$i496) + -1)|0;
         $76 = (($74) + ($$0$i$i$add$i497<<4)|0);
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($76);
         $$0$i$i$idx$i496 = $$0$i$i$add$i497;
        }
        $77 = ((($74)) + -16|0);
        HEAP32[$73>>2] = $77;
        $81 = $77;
       } else {
        $81 = $74;
       }
       $$sroa$0$0$$sroa_idx$i498 = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i499594 = HEAP32[$$sroa$0$0$$sroa_idx$i498>>2]|0;
       HEAP32[$4>>2] = $$sroa$0$0$copyload$i499594;
       $78 = ((($2)) + 24|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($81>>>0)<($79>>>0);
       if ($80) {
        HEAP32[$81>>2] = 0;
        $82 = ((($81)) + 4|0);
        HEAP32[$82>>2] = 0;
        $83 = ((($81)) + 8|0);
        HEAP32[$83>>2] = 0;
        $84 = ((($81)) + 12|0);
        HEAP32[$84>>2] = $$sroa$0$0$copyload$i499594;
        $85 = HEAP32[$73>>2]|0;
        $86 = ((($85)) + 16|0);
        HEAP32[$73>>2] = $86;
       } else {
        $87 = ((($2)) + 16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($87,$4);
       }
       $88 = HEAP32[$3>>2]|0;
       $89 = $88 & 1;
       $90 = ($89|0)==(0);
       $91 = $88 & 2;
       $92 = ($91|0)==(0);
       $93 = $88 & 4;
       $94 = ($93|0)==(0);
       $$0434 = $66;
       while(1) {
        $95 = ($$0434>>>0)<($71>>>0);
        if (!($95)) {
         $$1429 = $67;
         break L5;
        }
        if ($61) {
         $96 = HEAP32[$2>>2]|0;
         $97 = (((($96) + (($$0434*24)|0)|0)) + 12|0);
         $98 = ((($97)) + 11|0);
         $99 = HEAP8[$98>>0]|0;
         $100 = ($99<<24>>24)<(0);
         if ($100) {
          $101 = (((($96) + (($$0434*24)|0)|0)) + 16|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = HEAP32[$97>>2]|0;
          $$in = $102;$107 = $103;
         } else {
          $104 = $99&255;
          $$in = $104;$107 = $97;
         }
         $105 = (($$in) + -2)|0;
         $106 = (($107) + ($105)|0);
         $108 = HEAP8[$106>>0]|0;
         $109 = ($108<<24>>24)==(38);
         if ($109) {
          $110 = (($$in) + -3)|0;
          $$0435 = $110;
         } else {
          if ($100) {
           $111 = HEAP32[$97>>2]|0;
           $112 = (((($96) + (($$0434*24)|0)|0)) + 16|0);
           $113 = HEAP32[$112>>2]|0;
           $116 = $111;$117 = $113;
          } else {
           $114 = $99&255;
           $116 = $97;$117 = $114;
          }
          $115 = (($116) + ($117)|0);
          $118 = ((($115)) + -1|0);
          $119 = HEAP8[$118>>0]|0;
          $120 = ($119<<24>>24)==(38);
          $spec$select = $120 ? $105 : $$in;
          $$0435 = $spec$select;
         }
         if ($90) {
          $$1436 = $$0435;
         } else {
          $121 = (($$0435) + 6)|0;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($97,$$0435,3829)|0);
          $$1436 = $121;
         }
         if ($92) {
          $$2437 = $$1436;
         } else {
          $122 = (($$1436) + 9)|0;
          $123 = HEAP32[$2>>2]|0;
          $124 = (((($123) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($124,$$1436,3836)|0);
          $$2437 = $122;
         }
         if (!($94)) {
          $125 = HEAP32[$2>>2]|0;
          $126 = (((($125) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($126,$$2437,3846)|0);
         }
        } else {
         if (!($90)) {
          $127 = HEAP32[$2>>2]|0;
          $128 = (($127) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($128,3829)|0);
         }
         if (!($92)) {
          $129 = HEAP32[$2>>2]|0;
          $130 = (($129) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($130,3836)|0);
         }
         if (!($94)) {
          $131 = HEAP32[$2>>2]|0;
          $132 = (($131) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($132,3846)|0);
         }
        }
        $133 = HEAP32[$73>>2]|0;
        $134 = HEAP32[$2>>2]|0;
        $135 = (($134) + (($$0434*24)|0)|0);
        $136 = ((($133)) + -12|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ((($133)) + -8|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = ($137|0)==($139|0);
        if ($140) {
         $143 = ((($133)) + -16|0);
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($143,$135);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($137,$135);
         $141 = HEAP32[$136>>2]|0;
         $142 = ((($141)) + 24|0);
         HEAP32[$136>>2] = $142;
        }
        $144 = (($$0434) + 1)|0;
        $$0434 = $144;
       }
      }
     }
    } while(0);
    $$5 = $$1429;
    break L1;
    break;
   }
   default: {
   }
   }
   $145 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $146 = ($145|0)==($0|0);
   if ($146) {
    $147 = HEAP8[$0>>0]|0;
    $148 = $147 << 24 >> 24;
    L59: do {
     switch ($148|0) {
     case 65:  {
      $149 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $150 = ($149|0)==($0|0);
      if ($150) {
       $$5 = $0;
       break L1;
      }
      $151 = HEAP32[$2>>2]|0;
      $152 = ((($2)) + 4|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if ($154) {
       $$5 = $0;
       break L1;
      }
      $155 = ((($153)) + -24|0);
      $$sroa$0$0$$sroa_idx$i504 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i505611 = HEAP32[$$sroa$0$0$$sroa_idx$i504>>2]|0;
      HEAP32[$6>>2] = $$sroa$0$0$copyload$i505611;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5,$155,$6);
      $156 = ((($2)) + 20|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ((($2)) + 24|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($157>>>0)<($159>>>0);
      if ($160) {
       $161 = ((($5)) + 12|0);
       HEAP32[$157>>2] = 0;
       $162 = ((($157)) + 4|0);
       HEAP32[$162>>2] = 0;
       $163 = ((($157)) + 8|0);
       HEAP32[$163>>2] = 0;
       $164 = ((($157)) + 12|0);
       $165 = HEAP32[$161>>2]|0;
       HEAP32[$164>>2] = $165;
       $166 = HEAP32[$5>>2]|0;
       HEAP32[$157>>2] = $166;
       $167 = ((($5)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       HEAP32[$162>>2] = $168;
       $169 = ((($5)) + 8|0);
       $170 = HEAP32[$169>>2]|0;
       HEAP32[$163>>2] = $170;
       HEAP32[$169>>2] = 0;
       HEAP32[$167>>2] = 0;
       HEAP32[$5>>2] = 0;
       $171 = HEAP32[$156>>2]|0;
       $172 = ((($171)) + 16|0);
       HEAP32[$156>>2] = $172;
      } else {
       $173 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($173,$5);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
      $$5 = $149;
      break L1;
      break;
     }
     case 67:  {
      $174 = ((($0)) + 1|0);
      $175 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($174,$1,$2)|0);
      $176 = ($175|0)==($174|0);
      if ($176) {
       $$5 = $0;
       break L1;
      }
      $177 = HEAP32[$2>>2]|0;
      $178 = ((($2)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($177|0)==($179|0);
      if ($180) {
       $$5 = $0;
       break L1;
      }
      $181 = ((($179)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($181,3856)|0);
      $182 = HEAP32[$178>>2]|0;
      $183 = ((($182)) + -24|0);
      $$sroa$0$0$$sroa_idx$i508 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i509610 = HEAP32[$$sroa$0$0$$sroa_idx$i508>>2]|0;
      HEAP32[$8>>2] = $$sroa$0$0$copyload$i509610;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($7,$183,$8);
      $184 = ((($2)) + 20|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ((($2)) + 24|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ($185>>>0)<($187>>>0);
      if ($188) {
       $189 = ((($7)) + 12|0);
       HEAP32[$185>>2] = 0;
       $190 = ((($185)) + 4|0);
       HEAP32[$190>>2] = 0;
       $191 = ((($185)) + 8|0);
       HEAP32[$191>>2] = 0;
       $192 = ((($185)) + 12|0);
       $193 = HEAP32[$189>>2]|0;
       HEAP32[$192>>2] = $193;
       $194 = HEAP32[$7>>2]|0;
       HEAP32[$185>>2] = $194;
       $195 = ((($7)) + 4|0);
       $196 = HEAP32[$195>>2]|0;
       HEAP32[$190>>2] = $196;
       $197 = ((($7)) + 8|0);
       $198 = HEAP32[$197>>2]|0;
       HEAP32[$191>>2] = $198;
       HEAP32[$197>>2] = 0;
       HEAP32[$195>>2] = 0;
       HEAP32[$7>>2] = 0;
       $199 = HEAP32[$184>>2]|0;
       $200 = ((($199)) + 16|0);
       HEAP32[$184>>2] = $200;
      } else {
       $201 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($201,$7);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($7);
      $$5 = $175;
      break L1;
      break;
     }
     case 70:  {
      $202 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $203 = ($202|0)==($0|0);
      if ($203) {
       $$5 = $0;
       break L1;
      }
      $204 = HEAP32[$2>>2]|0;
      $205 = ((($2)) + 4|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = ($204|0)==($206|0);
      if ($207) {
       $$5 = $0;
       break L1;
      }
      $208 = ((($206)) + -24|0);
      $$sroa$0$0$$sroa_idx$i514 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i515609 = HEAP32[$$sroa$0$0$$sroa_idx$i514>>2]|0;
      HEAP32[$10>>2] = $$sroa$0$0$copyload$i515609;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($9,$208,$10);
      $209 = ((($2)) + 20|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ((($2)) + 24|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       $214 = ((($9)) + 12|0);
       HEAP32[$210>>2] = 0;
       $215 = ((($210)) + 4|0);
       HEAP32[$215>>2] = 0;
       $216 = ((($210)) + 8|0);
       HEAP32[$216>>2] = 0;
       $217 = ((($210)) + 12|0);
       $218 = HEAP32[$214>>2]|0;
       HEAP32[$217>>2] = $218;
       $219 = HEAP32[$9>>2]|0;
       HEAP32[$210>>2] = $219;
       $220 = ((($9)) + 4|0);
       $221 = HEAP32[$220>>2]|0;
       HEAP32[$215>>2] = $221;
       $222 = ((($9)) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       HEAP32[$216>>2] = $223;
       HEAP32[$222>>2] = 0;
       HEAP32[$220>>2] = 0;
       HEAP32[$9>>2] = 0;
       $224 = HEAP32[$209>>2]|0;
       $225 = ((($224)) + 16|0);
       HEAP32[$209>>2] = $225;
      } else {
       $226 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($226,$9);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($9);
      $$5 = $202;
      break L1;
      break;
     }
     case 71:  {
      $227 = ((($0)) + 1|0);
      $228 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($227,$1,$2)|0);
      $229 = ($228|0)==($227|0);
      if ($229) {
       $$5 = $0;
       break L1;
      }
      $230 = HEAP32[$2>>2]|0;
      $231 = ((($2)) + 4|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ($230|0)==($232|0);
      if ($233) {
       $$5 = $0;
       break L1;
      }
      $234 = ((($232)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($234,3865)|0);
      $235 = HEAP32[$231>>2]|0;
      $236 = ((($235)) + -24|0);
      $$sroa$0$0$$sroa_idx$i518 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i519608 = HEAP32[$$sroa$0$0$$sroa_idx$i518>>2]|0;
      HEAP32[$12>>2] = $$sroa$0$0$copyload$i519608;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($11,$236,$12);
      $237 = ((($2)) + 20|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ((($2)) + 24|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($238>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($11)) + 12|0);
       HEAP32[$238>>2] = 0;
       $243 = ((($238)) + 4|0);
       HEAP32[$243>>2] = 0;
       $244 = ((($238)) + 8|0);
       HEAP32[$244>>2] = 0;
       $245 = ((($238)) + 12|0);
       $246 = HEAP32[$242>>2]|0;
       HEAP32[$245>>2] = $246;
       $247 = HEAP32[$11>>2]|0;
       HEAP32[$238>>2] = $247;
       $248 = ((($11)) + 4|0);
       $249 = HEAP32[$248>>2]|0;
       HEAP32[$243>>2] = $249;
       $250 = ((($11)) + 8|0);
       $251 = HEAP32[$250>>2]|0;
       HEAP32[$244>>2] = $251;
       HEAP32[$250>>2] = 0;
       HEAP32[$248>>2] = 0;
       HEAP32[$11>>2] = 0;
       $252 = HEAP32[$237>>2]|0;
       $253 = ((($252)) + 16|0);
       HEAP32[$237>>2] = $253;
      } else {
       $254 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($254,$11);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($11);
      $$5 = $228;
      break L1;
      break;
     }
     case 77:  {
      $255 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $256 = ($255|0)==($0|0);
      if ($256) {
       $$5 = $0;
       break L1;
      }
      $257 = HEAP32[$2>>2]|0;
      $258 = ((($2)) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = ($257|0)==($259|0);
      if ($260) {
       $$5 = $0;
       break L1;
      }
      $261 = ((($259)) + -24|0);
      $$sroa$0$0$$sroa_idx$i522 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i523607 = HEAP32[$$sroa$0$0$$sroa_idx$i522>>2]|0;
      HEAP32[$14>>2] = $$sroa$0$0$copyload$i523607;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($13,$261,$14);
      $262 = ((($2)) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ((($2)) + 24|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($263>>>0)<($265>>>0);
      if ($266) {
       $267 = ((($13)) + 12|0);
       HEAP32[$263>>2] = 0;
       $268 = ((($263)) + 4|0);
       HEAP32[$268>>2] = 0;
       $269 = ((($263)) + 8|0);
       HEAP32[$269>>2] = 0;
       $270 = ((($263)) + 12|0);
       $271 = HEAP32[$267>>2]|0;
       HEAP32[$270>>2] = $271;
       $272 = HEAP32[$13>>2]|0;
       HEAP32[$263>>2] = $272;
       $273 = ((($13)) + 4|0);
       $274 = HEAP32[$273>>2]|0;
       HEAP32[$268>>2] = $274;
       $275 = ((($13)) + 8|0);
       $276 = HEAP32[$275>>2]|0;
       HEAP32[$269>>2] = $276;
       HEAP32[$275>>2] = 0;
       HEAP32[$273>>2] = 0;
       HEAP32[$13>>2] = 0;
       $277 = HEAP32[$262>>2]|0;
       $278 = ((($277)) + 16|0);
       HEAP32[$262>>2] = $278;
      } else {
       $279 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($279,$13);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($13);
      $$5 = $255;
      break L1;
      break;
     }
     case 79:  {
      $280 = ((($2)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = HEAP32[$2>>2]|0;
      $283 = (($281) - ($282))|0;
      $284 = (($283|0) / 24)&-1;
      $285 = ((($0)) + 1|0);
      $286 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($285,$1,$2)|0);
      $287 = HEAP32[$280>>2]|0;
      $288 = HEAP32[$2>>2]|0;
      $289 = (($287) - ($288))|0;
      $290 = (($289|0) / 24)&-1;
      $291 = ($286|0)==($285|0);
      if ($291) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i526 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i527606 = HEAP32[$$sroa$0$0$$sroa_idx$i526>>2]|0;
      HEAP32[$15>>2] = $$sroa$0$0$copyload$i527606;
      $292 = ((($2)) + 20|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = ((($2)) + 24|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = ($293>>>0)<($295>>>0);
      if ($296) {
       HEAP32[$293>>2] = 0;
       $297 = ((($293)) + 4|0);
       HEAP32[$297>>2] = 0;
       $298 = ((($293)) + 8|0);
       HEAP32[$298>>2] = 0;
       $299 = ((($293)) + 12|0);
       HEAP32[$299>>2] = $$sroa$0$0$copyload$i527606;
       $300 = HEAP32[$292>>2]|0;
       $301 = ((($300)) + 16|0);
       HEAP32[$292>>2] = $301;
      } else {
       $302 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($302,$15);
      }
      $303 = ((($16)) + 11|0);
      $304 = ((($16)) + 4|0);
      $$0479 = $284;
      while(1) {
       $305 = ($$0479>>>0)<($290>>>0);
       if (!($305)) {
        $$5 = $286;
        break L1;
       }
       $306 = HEAP32[$2>>2]|0;
       $307 = (((($306) + (($$0479*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($16,$307,2);
       $308 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
       $309 = HEAP8[$303>>0]|0;
       $310 = ($309<<24>>24)<(0);
       $311 = HEAP32[$304>>2]|0;
       $312 = $309&255;
       $313 = $310 ? $311 : $312;
       $314 = ($308|0)==($313|0);
       if ($314) {
        $315 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($16,3876,$308)|0);
        $316 = ($315|0)==(0);
        $$0$i = $316;
       } else {
        $$0$i = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $317 = HEAP32[$2>>2]|0;
       $318 = (($317) + (($$0479*24)|0)|0);
       if ($$0$i) {
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($318,3879)|0);
        $319 = HEAP32[$2>>2]|0;
        $320 = (((($319) + (($$0479*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($320,0,3882)|0);
       } else {
        $321 = (((($317) + (($$0479*24)|0)|0)) + 12|0);
        $322 = ((($321)) + 11|0);
        $323 = HEAP8[$322>>0]|0;
        $324 = ($323<<24>>24)<(0);
        if ($324) {
         $325 = HEAP32[$321>>2]|0;
         $327 = $325;
        } else {
         $327 = $321;
        }
        $326 = HEAP8[$327>>0]|0;
        $328 = ($326<<24>>24)==(40);
        if ($328) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($318,3884)|0);
         $329 = HEAP32[$2>>2]|0;
         $330 = (((($329) + (($$0479*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($330,0,3882)|0);
        }
       }
       $331 = HEAP32[$2>>2]|0;
       $332 = (($331) + (($$0479*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($332,3886)|0);
       $333 = HEAP32[$292>>2]|0;
       $334 = HEAP32[$2>>2]|0;
       $335 = (($334) + (($$0479*24)|0)|0);
       $336 = ((($333)) + -12|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ((($333)) + -8|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = ($337|0)==($339|0);
       if ($340) {
        $343 = ((($333)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($343,$335);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($337,$335);
        $341 = HEAP32[$336>>2]|0;
        $342 = ((($341)) + 24|0);
        HEAP32[$336>>2] = $342;
       }
       $344 = (($$0479) + 1)|0;
       $$0479 = $344;
      }
      break;
     }
     case 80:  {
      $345 = ((($2)) + 4|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = HEAP32[$2>>2]|0;
      $348 = (($346) - ($347))|0;
      $349 = (($348|0) / 24)&-1;
      $350 = ((($0)) + 1|0);
      $351 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($350,$1,$2)|0);
      $352 = HEAP32[$345>>2]|0;
      $353 = HEAP32[$2>>2]|0;
      $354 = (($352) - ($353))|0;
      $355 = (($354|0) / 24)&-1;
      $356 = ($351|0)==($350|0);
      if ($356) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i530 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i531605 = HEAP32[$$sroa$0$0$$sroa_idx$i530>>2]|0;
      HEAP32[$17>>2] = $$sroa$0$0$copyload$i531605;
      $357 = ((($2)) + 20|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = ((($2)) + 24|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ($358>>>0)<($360>>>0);
      if ($361) {
       HEAP32[$358>>2] = 0;
       $362 = ((($358)) + 4|0);
       HEAP32[$362>>2] = 0;
       $363 = ((($358)) + 8|0);
       HEAP32[$363>>2] = 0;
       $364 = ((($358)) + 12|0);
       HEAP32[$364>>2] = $$sroa$0$0$copyload$i531605;
       $365 = HEAP32[$357>>2]|0;
       $366 = ((($365)) + 16|0);
       HEAP32[$357>>2] = $366;
      } else {
       $367 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($367,$17);
      }
      $368 = ((($18)) + 11|0);
      $369 = ((($18)) + 4|0);
      $370 = ((($19)) + 11|0);
      $371 = ((($19)) + 4|0);
      $$0478 = $349;
      while(1) {
       $372 = ($$0478>>>0)<($355>>>0);
       if (!($372)) {
        $$5 = $351;
        break L1;
       }
       $373 = HEAP32[$2>>2]|0;
       $374 = (((($373) + (($$0478*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($18,$374,2);
       $375 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
       $376 = HEAP8[$368>>0]|0;
       $377 = ($376<<24>>24)<(0);
       $378 = HEAP32[$369>>2]|0;
       $379 = $376&255;
       $380 = $377 ? $378 : $379;
       $381 = ($375|0)==($380|0);
       if ($381) {
        $382 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($18,3876,$375)|0);
        $383 = ($382|0)==(0);
        $$0$i533 = $383;
       } else {
        $$0$i533 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $384 = HEAP32[$2>>2]|0;
       $385 = (($384) + (($$0478*24)|0)|0);
       if ($$0$i533) {
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($385,3879)|0);
        $386 = HEAP32[$2>>2]|0;
        $387 = (((($386) + (($$0478*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($387,0,3882)|0);
       } else {
        $388 = (((($384) + (($$0478*24)|0)|0)) + 12|0);
        $389 = ((($388)) + 11|0);
        $390 = HEAP8[$389>>0]|0;
        $391 = ($390<<24>>24)<(0);
        if ($391) {
         $392 = HEAP32[$388>>2]|0;
         $394 = $392;
        } else {
         $394 = $388;
        }
        $393 = HEAP8[$394>>0]|0;
        $395 = ($393<<24>>24)==(40);
        if ($395) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($385,3884)|0);
         $396 = HEAP32[$2>>2]|0;
         $397 = (((($396) + (($$0478*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($397,0,3882)|0);
        }
       }
       $398 = HEAP8[$350>>0]|0;
       $399 = ($398<<24>>24)==(85);
       if ($399) {
        $402 = HEAP32[$2>>2]|0;
        $403 = (($402) + (($$0478*24)|0)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($19,$403,12);
        $404 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3889)|0);
        $405 = HEAP8[$370>>0]|0;
        $406 = ($405<<24>>24)<(0);
        $407 = HEAP32[$371>>2]|0;
        $408 = $405&255;
        $409 = $406 ? $407 : $408;
        $410 = ($404|0)==($409|0);
        if ($410) {
         $411 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($19,3889,$404)|0);
         $412 = ($411|0)!=(0);
         $$ph = $412;
        } else {
         $$ph = 1;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        $413 = HEAP32[$2>>2]|0;
        $414 = (($413) + (($$0478*24)|0)|0);
        if ($$ph) {
         $415 = $414;
         label = 113;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKc($414);
        }
       } else {
        $400 = HEAP32[$2>>2]|0;
        $401 = (($400) + (($$0478*24)|0)|0);
        $415 = $401;
        label = 113;
       }
       if ((label|0) == 113) {
        label = 0;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($415,3902)|0);
       }
       $416 = HEAP32[$357>>2]|0;
       $417 = HEAP32[$2>>2]|0;
       $418 = (($417) + (($$0478*24)|0)|0);
       $419 = ((($416)) + -12|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = ((($416)) + -8|0);
       $422 = HEAP32[$421>>2]|0;
       $423 = ($420|0)==($422|0);
       if ($423) {
        $426 = ((($416)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($426,$418);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($420,$418);
        $424 = HEAP32[$419>>2]|0;
        $425 = ((($424)) + 24|0);
        HEAP32[$419>>2] = $425;
       }
       $427 = (($$0478) + 1)|0;
       $$0478 = $427;
      }
      break;
     }
     case 82:  {
      $428 = ((($2)) + 4|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = HEAP32[$2>>2]|0;
      $431 = (($429) - ($430))|0;
      $432 = (($431|0) / 24)&-1;
      $433 = ((($0)) + 1|0);
      $434 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($433,$1,$2)|0);
      $435 = HEAP32[$428>>2]|0;
      $436 = HEAP32[$2>>2]|0;
      $437 = (($435) - ($436))|0;
      $438 = (($437|0) / 24)&-1;
      $439 = ($434|0)==($433|0);
      if ($439) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i537 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i538604 = HEAP32[$$sroa$0$0$$sroa_idx$i537>>2]|0;
      HEAP32[$20>>2] = $$sroa$0$0$copyload$i538604;
      $440 = ((($2)) + 20|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = ((($2)) + 24|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = ($441>>>0)<($443>>>0);
      if ($444) {
       HEAP32[$441>>2] = 0;
       $445 = ((($441)) + 4|0);
       HEAP32[$445>>2] = 0;
       $446 = ((($441)) + 8|0);
       HEAP32[$446>>2] = 0;
       $447 = ((($441)) + 12|0);
       HEAP32[$447>>2] = $$sroa$0$0$copyload$i538604;
       $448 = HEAP32[$440>>2]|0;
       $449 = ((($448)) + 16|0);
       HEAP32[$440>>2] = $449;
      } else {
       $450 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($450,$20);
      }
      $451 = ((($21)) + 11|0);
      $452 = ((($21)) + 4|0);
      $$0444 = $432;
      while(1) {
       $453 = ($$0444>>>0)<($438>>>0);
       if (!($453)) {
        $$5 = $434;
        break L1;
       }
       $454 = HEAP32[$2>>2]|0;
       $455 = (((($454) + (($$0444*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($21,$455,2);
       $456 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
       $457 = HEAP8[$451>>0]|0;
       $458 = ($457<<24>>24)<(0);
       $459 = HEAP32[$452>>2]|0;
       $460 = $457&255;
       $461 = $458 ? $459 : $460;
       $462 = ($456|0)==($461|0);
       if ($462) {
        $463 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($21,3876,$456)|0);
        $464 = ($463|0)==(0);
        $$0$i540 = $464;
       } else {
        $$0$i540 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $465 = HEAP32[$2>>2]|0;
       $466 = (($465) + (($$0444*24)|0)|0);
       if ($$0$i540) {
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($466,3879)|0);
        $467 = HEAP32[$2>>2]|0;
        $468 = (((($467) + (($$0444*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($468,0,3882)|0);
       } else {
        $469 = (((($465) + (($$0444*24)|0)|0)) + 12|0);
        $470 = ((($469)) + 11|0);
        $471 = HEAP8[$470>>0]|0;
        $472 = ($471<<24>>24)<(0);
        if ($472) {
         $473 = HEAP32[$469>>2]|0;
         $475 = $473;
        } else {
         $475 = $469;
        }
        $474 = HEAP8[$475>>0]|0;
        $476 = ($474<<24>>24)==(40);
        if ($476) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($466,3884)|0);
         $477 = HEAP32[$2>>2]|0;
         $478 = (((($477) + (($$0444*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($478,0,3882)|0);
        }
       }
       $479 = HEAP32[$2>>2]|0;
       $480 = (($479) + (($$0444*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($480,3904)|0);
       $481 = HEAP32[$440>>2]|0;
       $482 = HEAP32[$2>>2]|0;
       $483 = (($482) + (($$0444*24)|0)|0);
       $484 = ((($481)) + -12|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = ((($481)) + -8|0);
       $487 = HEAP32[$486>>2]|0;
       $488 = ($485|0)==($487|0);
       if ($488) {
        $491 = ((($481)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($491,$483);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($485,$483);
        $489 = HEAP32[$484>>2]|0;
        $490 = ((($489)) + 24|0);
        HEAP32[$484>>2] = $490;
       }
       $492 = (($$0444) + 1)|0;
       $$0444 = $492;
      }
      break;
     }
     case 84:  {
      $493 = ((($2)) + 4|0);
      $494 = HEAP32[$493>>2]|0;
      $495 = HEAP32[$2>>2]|0;
      $496 = (($494) - ($495))|0;
      $497 = (($496|0) / 24)&-1;
      $498 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $499 = HEAP32[$493>>2]|0;
      $500 = HEAP32[$2>>2]|0;
      $501 = (($499) - ($500))|0;
      $502 = (($501|0) / 24)&-1;
      $503 = ($498|0)==($0|0);
      if ($503) {
       $$5 = $0;
       break L1;
      }
      $504 = ((($2)) + 16|0);
      $$sroa$0$0$$sroa_idx$i544 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i545602 = HEAP32[$$sroa$0$0$$sroa_idx$i544>>2]|0;
      HEAP32[$22>>2] = $$sroa$0$0$copyload$i545602;
      $505 = ((($2)) + 20|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = ((($2)) + 24|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($506>>>0)<($508>>>0);
      if ($509) {
       HEAP32[$506>>2] = 0;
       $510 = ((($506)) + 4|0);
       HEAP32[$510>>2] = 0;
       $511 = ((($506)) + 8|0);
       HEAP32[$511>>2] = 0;
       $512 = ((($506)) + 12|0);
       HEAP32[$512>>2] = $$sroa$0$0$copyload$i545602;
       $513 = HEAP32[$505>>2]|0;
       $514 = ((($513)) + 16|0);
       HEAP32[$505>>2] = $514;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($504,$22);
      }
      $$0438 = $497;
      while(1) {
       $515 = ($$0438>>>0)<($502>>>0);
       if (!($515)) {
        break;
       }
       $521 = HEAP32[$505>>2]|0;
       $522 = HEAP32[$2>>2]|0;
       $523 = (($522) + (($$0438*24)|0)|0);
       $524 = ((($521)) + -12|0);
       $525 = HEAP32[$524>>2]|0;
       $526 = ((($521)) + -8|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = ($525|0)==($527|0);
       if ($528) {
        $531 = ((($521)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($531,$523);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($525,$523);
        $529 = HEAP32[$524>>2]|0;
        $530 = ((($529)) + 24|0);
        HEAP32[$524>>2] = $530;
       }
       $532 = (($$0438) + 1)|0;
       $$0438 = $532;
      }
      $516 = ((($2)) + 63|0);
      $517 = HEAP8[$516>>0]|0;
      $518 = ($517<<24>>24)!=(0);
      $519 = (($497) + 1)|0;
      $520 = ($502|0)==($519|0);
      $or$cond = $520 & $518;
      if (!($or$cond)) {
       $$5 = $498;
       break L1;
      }
      $533 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($498,$1,$2)|0);
      $534 = ($533|0)==($498|0);
      if ($534) {
       $$5 = $498;
       break L1;
      }
      $535 = HEAP32[$493>>2]|0;
      $536 = ((($535)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$536);
      $537 = HEAP32[$493>>2]|0;
      $$0$i$i$idx$i548 = 0;
      while(1) {
       $538 = ($$0$i$i$idx$i548|0)==(-1);
       if ($538) {
        break;
       }
       $$0$i$i$add$i549 = (($$0$i$i$idx$i548) + -1)|0;
       $$ptr$i550 = (($537) + (($$0$i$i$add$i549*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i550);
       $$0$i$i$idx$i548 = $$0$i$i$add$i549;
      }
      $539 = ((($537)) + -24|0);
      HEAP32[$493>>2] = $539;
      $540 = ((($537)) + -48|0);
      $541 = ((($23)) + 11|0);
      $542 = HEAP8[$541>>0]|0;
      $543 = ($542<<24>>24)<(0);
      $544 = HEAP32[$23>>2]|0;
      $545 = ((($23)) + 4|0);
      $546 = HEAP32[$545>>2]|0;
      $547 = $542&255;
      $548 = $543 ? $544 : $23;
      $549 = $543 ? $546 : $547;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($540,$548,$549)|0);
      $550 = HEAP32[$493>>2]|0;
      $551 = ((($550)) + -24|0);
      $$sroa$0$0$copyload$i555603 = HEAP32[$$sroa$0$0$$sroa_idx$i544>>2]|0;
      HEAP32[$25>>2] = $$sroa$0$0$copyload$i555603;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($24,$551,$25);
      $552 = HEAP32[$505>>2]|0;
      $553 = HEAP32[$507>>2]|0;
      $554 = ($552>>>0)<($553>>>0);
      if ($554) {
       $555 = ((($24)) + 12|0);
       HEAP32[$552>>2] = 0;
       $556 = ((($552)) + 4|0);
       HEAP32[$556>>2] = 0;
       $557 = ((($552)) + 8|0);
       HEAP32[$557>>2] = 0;
       $558 = ((($552)) + 12|0);
       $559 = HEAP32[$555>>2]|0;
       HEAP32[$558>>2] = $559;
       $560 = HEAP32[$24>>2]|0;
       HEAP32[$552>>2] = $560;
       $561 = ((($24)) + 4|0);
       $562 = HEAP32[$561>>2]|0;
       HEAP32[$556>>2] = $562;
       $563 = ((($24)) + 8|0);
       $564 = HEAP32[$563>>2]|0;
       HEAP32[$557>>2] = $564;
       HEAP32[$563>>2] = 0;
       HEAP32[$561>>2] = 0;
       HEAP32[$24>>2] = 0;
       $565 = HEAP32[$505>>2]|0;
       $566 = ((($565)) + 16|0);
       HEAP32[$505>>2] = $566;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($504,$24);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($24);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $$5 = $533;
      break L1;
      break;
     }
     case 85:  {
      $567 = ((($0)) + 1|0);
      $568 = ($567|0)==($1|0);
      if ($568) {
       $$5 = $0;
       break L1;
      }
      $569 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($567,$1,$2)|0);
      $570 = ($569|0)==($567|0);
      if ($570) {
       $$5 = $0;
       break L1;
      }
      $571 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($569,$1,$2)|0);
      $572 = ($571|0)==($569|0);
      if ($572) {
       $$5 = $0;
       break L1;
      }
      $573 = ((($2)) + 4|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = HEAP32[$2>>2]|0;
      $576 = (($574) - ($575))|0;
      $577 = (($576|0) / 24)&-1;
      $578 = ($577>>>0)<(2);
      if ($578) {
       $$5 = $0;
       break L1;
      }
      $579 = $574;
      $580 = ((($579)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($26,$580);
      $581 = HEAP32[$573>>2]|0;
      $$0$i$i$idx$i560 = 0;
      while(1) {
       $582 = ($$0$i$i$idx$i560|0)==(-1);
       if ($582) {
        break;
       }
       $$0$i$i$add$i561 = (($$0$i$i$idx$i560) + -1)|0;
       $$ptr$i562 = (($581) + (($$0$i$i$add$i561*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i562);
       $$0$i$i$idx$i560 = $$0$i$i$add$i561;
      }
      $583 = ((($581)) + -24|0);
      HEAP32[$573>>2] = $583;
      $584 = ((($581)) + -48|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($27,$584,9);
      $585 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3906)|0);
      $586 = ((($27)) + 11|0);
      $587 = HEAP8[$586>>0]|0;
      $588 = ($587<<24>>24)<(0);
      $589 = ((($27)) + 4|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $587&255;
      $592 = $588 ? $590 : $591;
      $593 = ($585|0)==($592|0);
      if ($593) {
       $594 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($27,3906,$585)|0);
       $595 = ($594|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
       if ($595) {
        $612 = HEAP32[$573>>2]|0;
        $613 = ((($612)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($32,$613);
        $614 = HEAP32[$573>>2]|0;
        $$0$i$i$idx$i568 = 0;
        while(1) {
         $615 = ($$0$i$i$idx$i568|0)==(-1);
         if ($615) {
          break;
         }
         $$0$i$i$add$i569 = (($$0$i$i$idx$i568) + -1)|0;
         $$ptr$i570 = (($614) + (($$0$i$i$add$i569*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i570);
         $$0$i$i$idx$i568 = $$0$i$i$add$i569;
        }
        $616 = ((($614)) + -24|0);
        HEAP32[$573>>2] = $616;
        $617 = ((($32)) + 11|0);
        $618 = HEAP8[$617>>0]|0;
        $619 = ($618<<24>>24)<(0);
        $620 = HEAP32[$32>>2]|0;
        $621 = ((($32)) + 4|0);
        $622 = HEAP32[$621>>2]|0;
        $623 = $618&255;
        $624 = $619 ? $620 : $32;
        $625 = $619 ? $622 : $623;
        $626 = ((($624)) + 9|0);
        $627 = (($624) + ($625)|0);
        $628 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($626,$627,$2)|0);
        $629 = HEAP8[$617>>0]|0;
        $630 = ($629<<24>>24)<(0);
        $631 = HEAP32[$32>>2]|0;
        $632 = $630 ? $631 : $32;
        $633 = ((($632)) + 9|0);
        $634 = ($628|0)==($633|0);
        if ($634) {
         __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($40,$26,3916);
         $654 = HEAP8[$617>>0]|0;
         $655 = ($654<<24>>24)<(0);
         $656 = HEAP32[$32>>2]|0;
         $657 = HEAP32[$621>>2]|0;
         $658 = $654&255;
         $659 = $655 ? $656 : $32;
         $660 = $655 ? $657 : $658;
         $661 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($40,$659,$660)|0);
         ;HEAP32[$39>>2]=HEAP32[$40>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$40+8>>2]|0;
         $$0$i$i$i582 = 0;
         while(1) {
          $exitcond$i$i$i583 = ($$0$i$i$i582|0)==(3);
          if ($exitcond$i$i$i583) {
           break;
          }
          $662 = (($40) + ($$0$i$i$i582<<2)|0);
          HEAP32[$662>>2] = 0;
          $663 = (($$0$i$i$i582) + 1)|0;
          $$0$i$i$i582 = $663;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($38,$39);
         $664 = HEAP32[$573>>2]|0;
         $665 = ((($2)) + 8|0);
         $666 = HEAP32[$665>>2]|0;
         $667 = ($664>>>0)<($666>>>0);
         if ($667) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($664,$38);
          $668 = HEAP32[$573>>2]|0;
          $669 = ((($668)) + 24|0);
          HEAP32[$573>>2] = $669;
         } else {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$38);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
        } else {
         __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($36,$26,3918);
         $635 = HEAP32[$573>>2]|0;
         $636 = ((($635)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($37,$636);
         $637 = ((($37)) + 11|0);
         $638 = HEAP8[$637>>0]|0;
         $639 = ($638<<24>>24)<(0);
         $640 = HEAP32[$37>>2]|0;
         $641 = ((($37)) + 4|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = $638&255;
         $644 = $639 ? $640 : $37;
         $645 = $639 ? $642 : $643;
         $646 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($36,$644,$645)|0);
         ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;
         $$0$i$i$i575 = 0;
         while(1) {
          $exitcond$i$i$i576 = ($$0$i$i$i575|0)==(3);
          if ($exitcond$i$i$i576) {
           break;
          }
          $647 = (($36) + ($$0$i$i$i575<<2)|0);
          HEAP32[$647>>2] = 0;
          $648 = (($$0$i$i$i575) + 1)|0;
          $$0$i$i$i575 = $648;
         }
         $649 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($35,3920)|0);
         ;HEAP32[$34>>2]=HEAP32[$35>>2]|0;HEAP32[$34+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$35+8>>2]|0;
         $$0$i$i$i579 = 0;
         while(1) {
          $exitcond$i$i$i580 = ($$0$i$i$i579|0)==(3);
          if ($exitcond$i$i$i580) {
           break;
          }
          $650 = (($35) + ($$0$i$i$i579<<2)|0);
          HEAP32[$650>>2] = 0;
          $651 = (($$0$i$i$i579) + 1)|0;
          $$0$i$i$i579 = $651;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($33,$34);
         $652 = HEAP32[$573>>2]|0;
         $653 = ((($652)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($653,$33);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
       } else {
        label = 167;
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
       label = 167;
      }
      if ((label|0) == 167) {
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($30,$26,3916);
       $596 = HEAP32[$573>>2]|0;
       $597 = ((($596)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($31,$597);
       $598 = ((($31)) + 11|0);
       $599 = HEAP8[$598>>0]|0;
       $600 = ($599<<24>>24)<(0);
       $601 = HEAP32[$31>>2]|0;
       $602 = ((($31)) + 4|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = $599&255;
       $605 = $600 ? $601 : $31;
       $606 = $600 ? $603 : $604;
       $607 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($30,$605,$606)|0);
       ;HEAP32[$29>>2]=HEAP32[$30>>2]|0;HEAP32[$29+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$30+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $608 = (($30) + ($$0$i$i$i<<2)|0);
        HEAP32[$608>>2] = 0;
        $609 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $609;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($28,$29);
       $610 = HEAP32[$573>>2]|0;
       $611 = ((($610)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($611,$28);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
      }
      $670 = HEAP32[$573>>2]|0;
      $671 = ((($670)) + -24|0);
      $$sroa$0$0$$sroa_idx$i586 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i587601 = HEAP32[$$sroa$0$0$$sroa_idx$i586>>2]|0;
      HEAP32[$42>>2] = $$sroa$0$0$copyload$i587601;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($41,$671,$42);
      $672 = ((($2)) + 20|0);
      $673 = HEAP32[$672>>2]|0;
      $674 = ((($2)) + 24|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = ($673>>>0)<($675>>>0);
      if ($676) {
       $677 = ((($41)) + 12|0);
       HEAP32[$673>>2] = 0;
       $678 = ((($673)) + 4|0);
       HEAP32[$678>>2] = 0;
       $679 = ((($673)) + 8|0);
       HEAP32[$679>>2] = 0;
       $680 = ((($673)) + 12|0);
       $681 = HEAP32[$677>>2]|0;
       HEAP32[$680>>2] = $681;
       $682 = HEAP32[$41>>2]|0;
       HEAP32[$673>>2] = $682;
       $683 = ((($41)) + 4|0);
       $684 = HEAP32[$683>>2]|0;
       HEAP32[$678>>2] = $684;
       $685 = ((($41)) + 8|0);
       $686 = HEAP32[$685>>2]|0;
       HEAP32[$679>>2] = $686;
       HEAP32[$685>>2] = 0;
       HEAP32[$683>>2] = 0;
       HEAP32[$41>>2] = 0;
       $687 = HEAP32[$672>>2]|0;
       $688 = ((($687)) + 16|0);
       HEAP32[$672>>2] = $688;
      } else {
       $689 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($689,$41);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($41);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      $$5 = $571;
      break L1;
      break;
     }
     case 83:  {
      $690 = ((($0)) + 1|0);
      $691 = ($690|0)==($1|0);
      if (!($691)) {
       $692 = HEAP8[$690>>0]|0;
       $693 = ($692<<24>>24)==(116);
       if ($693) {
        $694 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $695 = ($694|0)==($0|0);
        if ($695) {
         $$5 = $0;
         break L1;
        }
        $696 = HEAP32[$2>>2]|0;
        $697 = ((($2)) + 4|0);
        $698 = HEAP32[$697>>2]|0;
        $699 = ($696|0)==($698|0);
        if ($699) {
         $$5 = $0;
         break L1;
        }
        $700 = ((($698)) + -24|0);
        $$sroa$0$0$$sroa_idx$i512 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i513600 = HEAP32[$$sroa$0$0$$sroa_idx$i512>>2]|0;
        HEAP32[$44>>2] = $$sroa$0$0$copyload$i513600;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($43,$700,$44);
        $701 = ((($2)) + 20|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = ((($2)) + 24|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = ($702>>>0)<($704>>>0);
        if ($705) {
         $706 = ((($43)) + 12|0);
         HEAP32[$702>>2] = 0;
         $707 = ((($702)) + 4|0);
         HEAP32[$707>>2] = 0;
         $708 = ((($702)) + 8|0);
         HEAP32[$708>>2] = 0;
         $709 = ((($702)) + 12|0);
         $710 = HEAP32[$706>>2]|0;
         HEAP32[$709>>2] = $710;
         $711 = HEAP32[$43>>2]|0;
         HEAP32[$702>>2] = $711;
         $712 = ((($43)) + 4|0);
         $713 = HEAP32[$712>>2]|0;
         HEAP32[$707>>2] = $713;
         $714 = ((($43)) + 8|0);
         $715 = HEAP32[$714>>2]|0;
         HEAP32[$708>>2] = $715;
         HEAP32[$714>>2] = 0;
         HEAP32[$712>>2] = 0;
         HEAP32[$43>>2] = 0;
         $716 = HEAP32[$701>>2]|0;
         $717 = ((($716)) + 16|0);
         HEAP32[$701>>2] = $717;
        } else {
         $718 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($718,$43);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($43);
        $$5 = $694;
        break L1;
       }
      }
      $719 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $720 = ($719|0)==($0|0);
      if ($720) {
       $$5 = $0;
       break L1;
      }
      $721 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($719,$1,$2)|0);
      $722 = ($721|0)==($719|0);
      if ($722) {
       $$5 = $719;
       break L1;
      }
      $723 = ((($2)) + 4|0);
      $724 = HEAP32[$723>>2]|0;
      $725 = HEAP32[$2>>2]|0;
      $726 = (($724) - ($725))|0;
      $727 = (($726|0) / 24)&-1;
      $728 = ($727>>>0)<(2);
      if ($728) {
       $$5 = $719;
       break L1;
      }
      $729 = $724;
      $730 = ((($729)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($45,$730);
      $731 = HEAP32[$723>>2]|0;
      $$0$i$i$idx$i = 0;
      while(1) {
       $732 = ($$0$i$i$idx$i|0)==(-1);
       if ($732) {
        break;
       }
       $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
       $$ptr$i = (($731) + (($$0$i$i$add$i*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      $733 = ((($731)) + -24|0);
      HEAP32[$723>>2] = $733;
      $734 = ((($731)) + -48|0);
      $735 = ((($45)) + 11|0);
      $736 = HEAP8[$735>>0]|0;
      $737 = ($736<<24>>24)<(0);
      $738 = HEAP32[$45>>2]|0;
      $739 = ((($45)) + 4|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = $736&255;
      $742 = $737 ? $738 : $45;
      $743 = $737 ? $740 : $741;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($734,$742,$743)|0);
      $744 = HEAP32[$723>>2]|0;
      $745 = ((($744)) + -24|0);
      $$sroa$0$0$$sroa_idx$i493 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i494599 = HEAP32[$$sroa$0$0$$sroa_idx$i493>>2]|0;
      HEAP32[$47>>2] = $$sroa$0$0$copyload$i494599;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($46,$745,$47);
      $746 = ((($2)) + 20|0);
      $747 = HEAP32[$746>>2]|0;
      $748 = ((($2)) + 24|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = ($747>>>0)<($749>>>0);
      if ($750) {
       $751 = ((($46)) + 12|0);
       HEAP32[$747>>2] = 0;
       $752 = ((($747)) + 4|0);
       HEAP32[$752>>2] = 0;
       $753 = ((($747)) + 8|0);
       HEAP32[$753>>2] = 0;
       $754 = ((($747)) + 12|0);
       $755 = HEAP32[$751>>2]|0;
       HEAP32[$754>>2] = $755;
       $756 = HEAP32[$46>>2]|0;
       HEAP32[$747>>2] = $756;
       $757 = ((($46)) + 4|0);
       $758 = HEAP32[$757>>2]|0;
       HEAP32[$752>>2] = $758;
       $759 = ((($46)) + 8|0);
       $760 = HEAP32[$759>>2]|0;
       HEAP32[$753>>2] = $760;
       HEAP32[$759>>2] = 0;
       HEAP32[$757>>2] = 0;
       HEAP32[$46>>2] = 0;
       $761 = HEAP32[$746>>2]|0;
       $762 = ((($761)) + 16|0);
       HEAP32[$746>>2] = $762;
      } else {
       $763 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($763,$46);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($46);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
      $$5 = $721;
      break L1;
      break;
     }
     case 68:  {
      $764 = ((($0)) + 1|0);
      $765 = ($764|0)==($1|0);
      if (!($765)) {
       $766 = HEAP8[$764>>0]|0;
       $767 = $766 << 24 >> 24;
       switch ($767|0) {
       case 112:  {
        $768 = ((($2)) + 4|0);
        $769 = HEAP32[$768>>2]|0;
        $770 = HEAP32[$2>>2]|0;
        $771 = (($769) - ($770))|0;
        $772 = (($771|0) / 24)&-1;
        $773 = ((($0)) + 2|0);
        $774 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($773,$1,$2)|0);
        $775 = HEAP32[$768>>2]|0;
        $776 = HEAP32[$2>>2]|0;
        $777 = (($775) - ($776))|0;
        $778 = (($777|0) / 24)&-1;
        $779 = ($774|0)==($773|0);
        if ($779) {
         break L59;
        }
        $$sroa$0$0$$sroa_idx$i489 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i490598 = HEAP32[$$sroa$0$0$$sroa_idx$i489>>2]|0;
        HEAP32[$48>>2] = $$sroa$0$0$copyload$i490598;
        $780 = ((($2)) + 20|0);
        $781 = HEAP32[$780>>2]|0;
        $782 = ((($2)) + 24|0);
        $783 = HEAP32[$782>>2]|0;
        $784 = ($781>>>0)<($783>>>0);
        if ($784) {
         HEAP32[$781>>2] = 0;
         $785 = ((($781)) + 4|0);
         HEAP32[$785>>2] = 0;
         $786 = ((($781)) + 8|0);
         HEAP32[$786>>2] = 0;
         $787 = ((($781)) + 12|0);
         HEAP32[$787>>2] = $$sroa$0$0$copyload$i490598;
         $788 = HEAP32[$780>>2]|0;
         $789 = ((($788)) + 16|0);
         HEAP32[$780>>2] = $789;
        } else {
         $790 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($790,$48);
        }
        $$0 = $772;
        while(1) {
         $791 = ($$0>>>0)<($778>>>0);
         if (!($791)) {
          $$5 = $774;
          break L1;
         }
         $792 = HEAP32[$780>>2]|0;
         $793 = HEAP32[$2>>2]|0;
         $794 = (($793) + (($$0*24)|0)|0);
         $795 = ((($792)) + -12|0);
         $796 = HEAP32[$795>>2]|0;
         $797 = ((($792)) + -8|0);
         $798 = HEAP32[$797>>2]|0;
         $799 = ($796|0)==($798|0);
         if ($799) {
          $802 = ((($792)) + -16|0);
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($802,$794);
         } else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($796,$794);
          $800 = HEAP32[$795>>2]|0;
          $801 = ((($800)) + 24|0);
          HEAP32[$795>>2] = $801;
         }
         $803 = (($$0) + 1)|0;
         $$0 = $803;
        }
        break;
       }
       case 84: case 116:  {
        $804 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $805 = ($804|0)==($0|0);
        if ($805) {
         break L59;
        }
        $806 = HEAP32[$2>>2]|0;
        $807 = ((($2)) + 4|0);
        $808 = HEAP32[$807>>2]|0;
        $809 = ($806|0)==($808|0);
        if ($809) {
         $$5 = $0;
         break L1;
        }
        $810 = ((($808)) + -24|0);
        $$sroa$0$0$$sroa_idx$i487 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i488597 = HEAP32[$$sroa$0$0$$sroa_idx$i487>>2]|0;
        HEAP32[$50>>2] = $$sroa$0$0$copyload$i488597;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($49,$810,$50);
        $811 = ((($2)) + 20|0);
        $812 = HEAP32[$811>>2]|0;
        $813 = ((($2)) + 24|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = ($812>>>0)<($814>>>0);
        if ($815) {
         $816 = ((($49)) + 12|0);
         HEAP32[$812>>2] = 0;
         $817 = ((($812)) + 4|0);
         HEAP32[$817>>2] = 0;
         $818 = ((($812)) + 8|0);
         HEAP32[$818>>2] = 0;
         $819 = ((($812)) + 12|0);
         $820 = HEAP32[$816>>2]|0;
         HEAP32[$819>>2] = $820;
         $821 = HEAP32[$49>>2]|0;
         HEAP32[$812>>2] = $821;
         $822 = ((($49)) + 4|0);
         $823 = HEAP32[$822>>2]|0;
         HEAP32[$817>>2] = $823;
         $824 = ((($49)) + 8|0);
         $825 = HEAP32[$824>>2]|0;
         HEAP32[$818>>2] = $825;
         HEAP32[$824>>2] = 0;
         HEAP32[$822>>2] = 0;
         HEAP32[$49>>2] = 0;
         $826 = HEAP32[$811>>2]|0;
         $827 = ((($826)) + 16|0);
         HEAP32[$811>>2] = $827;
        } else {
         $828 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($828,$49);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($49);
        $$5 = $804;
        break L1;
        break;
       }
       case 118:  {
        $829 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $830 = ($829|0)==($0|0);
        if ($830) {
         break L59;
        }
        $831 = HEAP32[$2>>2]|0;
        $832 = ((($2)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = ($831|0)==($833|0);
        if ($834) {
         $$5 = $0;
         break L1;
        }
        $835 = ((($833)) + -24|0);
        $$sroa$0$0$$sroa_idx$i483 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i484595 = HEAP32[$$sroa$0$0$$sroa_idx$i483>>2]|0;
        HEAP32[$52>>2] = $$sroa$0$0$copyload$i484595;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($51,$835,$52);
        $836 = ((($2)) + 20|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = ((($2)) + 24|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = ($837>>>0)<($839>>>0);
        if ($840) {
         $841 = ((($51)) + 12|0);
         HEAP32[$837>>2] = 0;
         $842 = ((($837)) + 4|0);
         HEAP32[$842>>2] = 0;
         $843 = ((($837)) + 8|0);
         HEAP32[$843>>2] = 0;
         $844 = ((($837)) + 12|0);
         $845 = HEAP32[$841>>2]|0;
         HEAP32[$844>>2] = $845;
         $846 = HEAP32[$51>>2]|0;
         HEAP32[$837>>2] = $846;
         $847 = ((($51)) + 4|0);
         $848 = HEAP32[$847>>2]|0;
         HEAP32[$842>>2] = $848;
         $849 = ((($51)) + 8|0);
         $850 = HEAP32[$849>>2]|0;
         HEAP32[$843>>2] = $850;
         HEAP32[$849>>2] = 0;
         HEAP32[$847>>2] = 0;
         HEAP32[$51>>2] = 0;
         $851 = HEAP32[$836>>2]|0;
         $852 = ((($851)) + 16|0);
         HEAP32[$836>>2] = $852;
        } else {
         $853 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($853,$51);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($51);
        $$5 = $829;
        break L1;
        break;
       }
       default: {
        break L59;
       }
       }
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $854 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $855 = ($854|0)==($0|0);
    if ($855) {
     $856 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $857 = ($856|0)==($0|0);
     if ($857) {
      $$5 = $0;
     } else {
      $858 = HEAP32[$2>>2]|0;
      $859 = ((($2)) + 4|0);
      $860 = HEAP32[$859>>2]|0;
      $861 = ($858|0)==($860|0);
      if ($861) {
       $$5 = $0;
      } else {
       $862 = ((($860)) + -24|0);
       $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i596 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
       HEAP32[$54>>2] = $$sroa$0$0$copyload$i596;
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($53,$862,$54);
       $863 = ((($2)) + 20|0);
       $864 = HEAP32[$863>>2]|0;
       $865 = ((($2)) + 24|0);
       $866 = HEAP32[$865>>2]|0;
       $867 = ($864>>>0)<($866>>>0);
       if ($867) {
        $868 = ((($53)) + 12|0);
        HEAP32[$864>>2] = 0;
        $869 = ((($864)) + 4|0);
        HEAP32[$869>>2] = 0;
        $870 = ((($864)) + 8|0);
        HEAP32[$870>>2] = 0;
        $871 = ((($864)) + 12|0);
        $872 = HEAP32[$868>>2]|0;
        HEAP32[$871>>2] = $872;
        $873 = HEAP32[$53>>2]|0;
        HEAP32[$864>>2] = $873;
        $874 = ((($53)) + 4|0);
        $875 = HEAP32[$874>>2]|0;
        HEAP32[$869>>2] = $875;
        $876 = ((($53)) + 8|0);
        $877 = HEAP32[$876>>2]|0;
        HEAP32[$870>>2] = $877;
        HEAP32[$876>>2] = 0;
        HEAP32[$874>>2] = 0;
        HEAP32[$53>>2] = 0;
        $878 = HEAP32[$863>>2]|0;
        $879 = ((($878)) + 16|0);
        HEAP32[$863>>2] = $879;
       } else {
        $880 = ((($2)) + 16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($880,$53);
       }
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($53);
       $$5 = $856;
      }
     }
    } else {
     $$5 = $854;
    }
   } else {
    $$5 = $145;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$2 = $0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(114);
  if ($5) {
   HEAP32[$2>>2] = 4;
   $6 = ((($0)) + 1|0);
   $$pr = HEAP8[$6>>0]|0;
   $$0 = $6;$10 = 4;$8 = $$pr;
  } else {
   $$0 = $0;$10 = 0;$8 = $4;
  }
  $7 = ($8<<24>>24)==(86);
  if ($7) {
   $9 = $10 | 2;
   HEAP32[$2>>2] = $9;
   $11 = ((($$0)) + 1|0);
   $$pre = HEAP8[$11>>0]|0;
   $$1 = $11;$13 = $$pre;$15 = $9;
  } else {
   $$1 = $$0;$13 = $8;$15 = $10;
  }
  $12 = ($13<<24>>24)==(75);
  if ($12) {
   $14 = $15 | 1;
   HEAP32[$2>>2] = $14;
   $16 = ((($$1)) + 1|0);
   $$2 = $16;
  } else {
   $$2 = $$1;
  }
 }
 return ($$2|0);
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 4;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 3;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$25>>2] = 0;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($25)) + 8|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($25)) + 12|0);
  $29 = HEAP32[$1>>2]|0;
  HEAP32[$28>>2] = $29;
  $30 = ((($25)) + 16|0);
  HEAP32[$24>>2] = $30;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $4 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($0,$1,$2,$3)|0);
 return ($4|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2,$3);
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 24)&-1;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($25,$1);
  $26 = ((($25)) + 24|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $3 = sp + 672|0;
 $4 = sp + 648|0;
 $5 = sp + 624|0;
 $6 = sp + 600|0;
 $7 = sp + 576|0;
 $8 = sp + 552|0;
 $9 = sp + 528|0;
 $10 = sp + 504|0;
 $11 = sp + 480|0;
 $12 = sp + 456|0;
 $13 = sp + 432|0;
 $14 = sp + 408|0;
 $15 = sp + 384|0;
 $16 = sp + 360|0;
 $17 = sp + 336|0;
 $18 = sp + 312|0;
 $19 = sp + 288|0;
 $20 = sp + 264|0;
 $21 = sp + 240|0;
 $22 = sp + 216|0;
 $23 = sp + 192|0;
 $24 = sp + 168|0;
 $25 = sp + 144|0;
 $26 = sp + 120|0;
 $27 = sp + 96|0;
 $28 = sp + 72|0;
 $29 = sp + 48|0;
 $30 = sp + 24|0;
 $31 = sp;
 $32 = ($0|0)==($1|0);
 L1: do {
  if ($32) {
   $$1 = $0;
  } else {
   $33 = HEAP8[$0>>0]|0;
   $34 = $33 << 24 >> 24;
   do {
    switch ($34|0) {
    case 118:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3,5321);
     $35 = ((($2)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($2)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36>>>0)<($38>>>0);
     if ($39) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36,$3);
      $40 = HEAP32[$35>>2]|0;
      $41 = ((($40)) + 24|0);
      HEAP32[$35>>2] = $41;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $42 = ((($0)) + 1|0);
     $$1 = $42;
     break L1;
     break;
    }
    case 119:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm8EEERAT__Kc($4);
     $43 = ((($2)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($2)) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($44>>>0)<($46>>>0);
     if ($47) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44,$4);
      $48 = HEAP32[$43>>2]|0;
      $49 = ((($48)) + 24|0);
      HEAP32[$43>>2] = $49;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $50 = ((($0)) + 1|0);
     $$1 = $50;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($5,5326);
     $51 = ((($2)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($2)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($52>>>0)<($54>>>0);
     if ($55) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($52,$5);
      $56 = HEAP32[$51>>2]|0;
      $57 = ((($56)) + 24|0);
      HEAP32[$51>>2] = $57;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $58 = ((($0)) + 1|0);
     $$1 = $58;
     break L1;
     break;
    }
    case 99:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($6,5095);
     $59 = ((($2)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($2)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($60>>>0)<($62>>>0);
     if ($63) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($60,$6);
      $64 = HEAP32[$59>>2]|0;
      $65 = ((($64)) + 24|0);
      HEAP32[$59>>2] = $65;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$6);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $66 = ((($0)) + 1|0);
     $$1 = $66;
     break L1;
     break;
    }
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($7,5100);
     $67 = ((($2)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($2)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($68>>>0)<($70>>>0);
     if ($71) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($68,$7);
      $72 = HEAP32[$67>>2]|0;
      $73 = ((($72)) + 24|0);
      HEAP32[$67>>2] = $73;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $74 = ((($0)) + 1|0);
     $$1 = $74;
     break L1;
     break;
    }
    case 104:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($8,5112);
     $75 = ((($2)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($2)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($76>>>0)<($78>>>0);
     if ($79) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($76,$8);
      $80 = HEAP32[$75>>2]|0;
      $81 = ((($80)) + 24|0);
      HEAP32[$75>>2] = $81;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $82 = ((($0)) + 1|0);
     $$1 = $82;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($9,5126);
     $83 = ((($2)) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ((($2)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($84>>>0)<($86>>>0);
     if ($87) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($84,$9);
      $88 = HEAP32[$83>>2]|0;
      $89 = ((($88)) + 24|0);
      HEAP32[$83>>2] = $89;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$9);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $90 = ((($0)) + 1|0);
     $$1 = $90;
     break L1;
     break;
    }
    case 116:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($10,5132);
     $91 = ((($2)) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($2)) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($92>>>0)<($94>>>0);
     if ($95) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92,$10);
      $96 = HEAP32[$91>>2]|0;
      $97 = ((($96)) + 24|0);
      HEAP32[$91>>2] = $97;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$10);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $98 = ((($0)) + 1|0);
     $$1 = $98;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($11,5331);
     $99 = ((($2)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($2)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($100>>>0)<($102>>>0);
     if ($103) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($100,$11);
      $104 = HEAP32[$99>>2]|0;
      $105 = ((($104)) + 24|0);
      HEAP32[$99>>2] = $105;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$11);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $106 = ((($0)) + 1|0);
     $$1 = $106;
     break L1;
     break;
    }
    case 106:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($12,5335);
     $107 = ((($2)) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($2)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($108>>>0)<($110>>>0);
     if ($111) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108,$12);
      $112 = HEAP32[$107>>2]|0;
      $113 = ((($112)) + 24|0);
      HEAP32[$107>>2] = $113;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$12);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $114 = ((($0)) + 1|0);
     $$1 = $114;
     break L1;
     break;
    }
    case 108:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($13,5348);
     $115 = ((($2)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ((($2)) + 8|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($116>>>0)<($118>>>0);
     if ($119) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($116,$13);
      $120 = HEAP32[$115>>2]|0;
      $121 = ((($120)) + 24|0);
      HEAP32[$115>>2] = $121;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$13);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $122 = ((($0)) + 1|0);
     $$1 = $122;
     break L1;
     break;
    }
    case 109:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($14,5353);
     $123 = ((($2)) + 4|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($2)) + 8|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124>>>0)<($126>>>0);
     if ($127) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($124,$14);
      $128 = HEAP32[$123>>2]|0;
      $129 = ((($128)) + 24|0);
      HEAP32[$123>>2] = $129;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$14);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $130 = ((($0)) + 1|0);
     $$1 = $130;
     break L1;
     break;
    }
    case 120:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($15,5367);
     $131 = ((($2)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($2)) + 8|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132>>>0)<($134>>>0);
     if ($135) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($132,$15);
      $136 = HEAP32[$131>>2]|0;
      $137 = ((($136)) + 24|0);
      HEAP32[$131>>2] = $137;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$15);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $138 = ((($0)) + 1|0);
     $$1 = $138;
     break L1;
     break;
    }
    case 121:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm19EEERAT__Kc($16);
     $139 = ((($2)) + 4|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ((($2)) + 8|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140>>>0)<($142>>>0);
     if ($143) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($140,$16);
      $144 = HEAP32[$139>>2]|0;
      $145 = ((($144)) + 24|0);
      HEAP32[$139>>2] = $145;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$16);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $146 = ((($0)) + 1|0);
     $$1 = $146;
     break L1;
     break;
    }
    case 110:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($17,5161);
     $147 = ((($2)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($2)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($148>>>0)<($150>>>0);
     if ($151) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($148,$17);
      $152 = HEAP32[$147>>2]|0;
      $153 = ((($152)) + 24|0);
      HEAP32[$147>>2] = $153;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$17);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $154 = ((($0)) + 1|0);
     $$1 = $154;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($18,5170);
     $155 = ((($2)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($2)) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($156>>>0)<($158>>>0);
     if ($159) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($156,$18);
      $160 = HEAP32[$155>>2]|0;
      $161 = ((($160)) + 24|0);
      HEAP32[$155>>2] = $161;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$18);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $162 = ((($0)) + 1|0);
     $$1 = $162;
     break L1;
     break;
    }
    case 102:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($19,5377);
     $163 = ((($2)) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($2)) + 8|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($164>>>0)<($166>>>0);
     if ($167) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($164,$19);
      $168 = HEAP32[$163>>2]|0;
      $169 = ((($168)) + 24|0);
      HEAP32[$163>>2] = $169;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$19);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $170 = ((($0)) + 1|0);
     $$1 = $170;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm7EEERAT__Kc($20);
     $171 = ((($2)) + 4|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ((($2)) + 8|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($172>>>0)<($174>>>0);
     if ($175) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($172,$20);
      $176 = HEAP32[$171>>2]|0;
      $177 = ((($176)) + 24|0);
      HEAP32[$171>>2] = $177;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$20);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $178 = ((($0)) + 1|0);
     $$1 = $178;
     break L1;
     break;
    }
    case 101:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($21,5383);
     $179 = ((($2)) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ((($2)) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ($180>>>0)<($182>>>0);
     if ($183) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($180,$21);
      $184 = HEAP32[$179>>2]|0;
      $185 = ((($184)) + 24|0);
      HEAP32[$179>>2] = $185;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$21);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $186 = ((($0)) + 1|0);
     $$1 = $186;
     break L1;
     break;
    }
    case 103:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($22,5395);
     $187 = ((($2)) + 4|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ((($2)) + 8|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($188>>>0)<($190>>>0);
     if ($191) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($188,$22);
      $192 = HEAP32[$187>>2]|0;
      $193 = ((($192)) + 24|0);
      HEAP32[$187>>2] = $193;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$22);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $194 = ((($0)) + 1|0);
     $$1 = $194;
     break L1;
     break;
    }
    case 122:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($23,5406);
     $195 = ((($2)) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((($2)) + 8|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($196>>>0)<($198>>>0);
     if ($199) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($196,$23);
      $200 = HEAP32[$195>>2]|0;
      $201 = ((($200)) + 24|0);
      HEAP32[$195>>2] = $201;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$23);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $202 = ((($0)) + 1|0);
     $$1 = $202;
     break L1;
     break;
    }
    case 117:  {
     $203 = ((($0)) + 1|0);
     $204 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($203,$1,$2)|0);
     $205 = ($204|0)==($203|0);
     $spec$select = $205 ? $0 : $204;
     $$1 = $spec$select;
     break L1;
     break;
    }
    case 68:  {
     $206 = ((($0)) + 1|0);
     $207 = ($206|0)==($1|0);
     if ($207) {
      $$1 = $0;
      break L1;
     }
     $208 = HEAP8[$206>>0]|0;
     $209 = $208 << 24 >> 24;
     switch ($209|0) {
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($24,5410);
      $210 = ((($2)) + 4|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ((($2)) + 8|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = ($211>>>0)<($213>>>0);
      if ($214) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211,$24);
       $215 = HEAP32[$210>>2]|0;
       $216 = ((($215)) + 24|0);
       HEAP32[$210>>2] = $216;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$24);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $217 = ((($0)) + 2|0);
      $$1 = $217;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($25,5420);
      $218 = ((($2)) + 4|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($2)) + 8|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($219,$25);
       $223 = HEAP32[$218>>2]|0;
       $224 = ((($223)) + 24|0);
       HEAP32[$218>>2] = $224;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$25);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $225 = ((($0)) + 2|0);
      $$1 = $225;
      break L1;
      break;
     }
     case 102:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($26,5431);
      $226 = ((($2)) + 4|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ((($2)) + 8|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = ($227>>>0)<($229>>>0);
      if ($230) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($227,$26);
       $231 = HEAP32[$226>>2]|0;
       $232 = ((($231)) + 24|0);
       HEAP32[$226>>2] = $232;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$26);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $233 = ((($0)) + 2|0);
      $$1 = $233;
      break L1;
      break;
     }
     case 104:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($27,5441);
      $234 = ((($2)) + 4|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = ((($2)) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = ($235>>>0)<($237>>>0);
      if ($238) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($235,$27);
       $239 = HEAP32[$234>>2]|0;
       $240 = ((($239)) + 24|0);
       HEAP32[$234>>2] = $240;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$27);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $241 = ((($0)) + 2|0);
      $$1 = $241;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($28,5451);
      $242 = ((($2)) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = ((($2)) + 8|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = ($243>>>0)<($245>>>0);
      if ($246) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($243,$28);
       $247 = HEAP32[$242>>2]|0;
       $248 = ((($247)) + 24|0);
       HEAP32[$242>>2] = $248;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$28);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $249 = ((($0)) + 2|0);
      $$1 = $249;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($29,5460);
      $250 = ((($2)) + 4|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ((($2)) + 8|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = ($251>>>0)<($253>>>0);
      if ($254) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($251,$29);
       $255 = HEAP32[$250>>2]|0;
       $256 = ((($255)) + 24|0);
       HEAP32[$250>>2] = $256;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$29);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $257 = ((($0)) + 2|0);
      $$1 = $257;
      break L1;
      break;
     }
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($30,5469);
      $258 = ((($2)) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = ((($2)) + 8|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = ($259>>>0)<($261>>>0);
      if ($262) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($259,$30);
       $263 = HEAP32[$258>>2]|0;
       $264 = ((($263)) + 24|0);
       HEAP32[$258>>2] = $264;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$30);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $265 = ((($0)) + 2|0);
      $$1 = $265;
      break L1;
      break;
     }
     case 110:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($31,5474);
      $266 = ((($2)) + 4|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ((($2)) + 8|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = ($267>>>0)<($269>>>0);
      if ($270) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($267,$31);
       $271 = HEAP32[$266>>2]|0;
       $272 = ((($271)) + 24|0);
       HEAP32[$266>>2] = $272;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$31);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $273 = ((($0)) + 2|0);
      $$1 = $273;
      break L1;
      break;
     }
     default: {
      $$1 = $0;
      break L1;
     }
     }
     break;
    }
    default: {
     $$1 = $0;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i$i112 = 0, $$0$i$i$i119 = 0, $$0$i$i$i123 = 0, $$0$i$i$i127 = 0, $$0$i$i$idx$i = 0, $$7 = 0, $$off = 0, $$ptr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i133 = 0, $exitcond$i$i$i113 = 0, $exitcond$i$i$i120 = 0, $exitcond$i$i$i124 = 0, $exitcond$i$i$i128 = 0, $or$cond109 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 175|0;
 $4 = sp + 174|0;
 $5 = sp + 173|0;
 $6 = sp + 172|0;
 $7 = sp + 160|0;
 $8 = sp + 148|0;
 $9 = sp + 136|0;
 $10 = sp + 124|0;
 $11 = sp + 112|0;
 $12 = sp + 88|0;
 $13 = sp + 64|0;
 $14 = sp + 48|0;
 $15 = sp + 36|0;
 $16 = sp + 24|0;
 $17 = sp + 12|0;
 $18 = sp;
 $19 = ($0|0)==($1|0);
 do {
  if ($19) {
   $$7 = $0;
  } else {
   $20 = HEAP8[$0>>0]|0;
   $21 = ($20<<24>>24)==(65);
   if ($21) {
    $22 = ((($0)) + 1|0);
    $23 = ($22|0)==($1|0);
    if ($23) {
     $$7 = $0;
    } else {
     $24 = HEAP8[$22>>0]|0;
     $25 = ($24<<24>>24)==(95);
     if ($25) {
      $26 = ((($0)) + 2|0);
      $27 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
      $28 = ($27|0)==($26|0);
      if ($28) {
       $$7 = $0;
       break;
      }
      $29 = HEAP32[$2>>2]|0;
      $30 = ((($2)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $$7 = $0;
       break;
      }
      $33 = ((($31)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($7,$33,2);
      $34 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
      $35 = ((($7)) + 11|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)<(0);
      $38 = ((($7)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $36&255;
      $41 = $37 ? $39 : $40;
      $42 = ($34|0)==($41|0);
      if ($42) {
       $43 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($7,3876,$34)|0);
       $44 = ($43|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       if ($44) {
        $45 = HEAP32[$30>>2]|0;
        $46 = ((($45)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($46);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      }
      $47 = HEAP32[$30>>2]|0;
      $48 = ((($47)) + -12|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($48,0,5317)|0);
      $$7 = $27;
      break;
     }
     $$off = (($24) + -49)<<24>>24;
     $49 = ($$off&255)<(9);
     if ($49) {
      $50 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($22,$1)|0);
      $51 = ($50|0)==($1|0);
      if ($51) {
       $$7 = $0;
       break;
      }
      $52 = HEAP8[$50>>0]|0;
      $53 = ($52<<24>>24)==(95);
      if (!($53)) {
       $$7 = $0;
       break;
      }
      $54 = ((($50)) + 1|0);
      $55 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($54,$1,$2)|0);
      $56 = ($55|0)==($54|0);
      if ($56) {
       $$7 = $0;
       break;
      }
      $57 = HEAP32[$2>>2]|0;
      $58 = ((($2)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      if ($60) {
       $$7 = $0;
       break;
      }
      $61 = ((($59)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($8,$61,2);
      $62 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
      $63 = ((($8)) + 11|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = ($64<<24>>24)<(0);
      $66 = ((($8)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = $64&255;
      $69 = $65 ? $67 : $68;
      $70 = ($62|0)==($69|0);
      if ($70) {
       $71 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($8,3876,$62)|0);
       $72 = ($71|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       if ($72) {
        $73 = HEAP32[$58>>2]|0;
        $74 = ((($73)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($74);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      }
      $75 = HEAP32[$58>>2]|0;
      $76 = ((($75)) + -12|0);
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($11,$22,$50);
      $77 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($11,0,3876)|0);
      ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $78 = (($11) + ($$0$i$i$i<<2)|0);
       HEAP32[$78>>2] = 0;
       $79 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $79;
      }
      $80 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($10,3931)|0);
      ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
      $$0$i$i$i112 = 0;
      while(1) {
       $exitcond$i$i$i113 = ($$0$i$i$i112|0)==(3);
       if ($exitcond$i$i$i113) {
        break;
       }
       $81 = (($10) + ($$0$i$i$i112<<2)|0);
       HEAP32[$81>>2] = 0;
       $82 = (($$0$i$i$i112) + 1)|0;
       $$0$i$i$i112 = $82;
      }
      $83 = ((($9)) + 11|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = ($84<<24>>24)<(0);
      $86 = HEAP32[$9>>2]|0;
      $87 = ((($9)) + 4|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $84&255;
      $90 = $85 ? $86 : $9;
      $91 = $85 ? $88 : $89;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($76,0,$90,$91)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $$7 = $55;
      break;
     }
     $92 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
     $93 = ($92|0)==($22|0);
     $94 = ($92|0)==($1|0);
     $or$cond109 = $93 | $94;
     if ($or$cond109) {
      $$7 = $0;
     } else {
      $95 = HEAP8[$92>>0]|0;
      $96 = ($95<<24>>24)==(95);
      if ($96) {
       $97 = ((($92)) + 1|0);
       $98 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($97,$1,$2)|0);
       $99 = ($98|0)==($97|0);
       if ($99) {
        $$7 = $0;
       } else {
        $100 = ((($2)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = HEAP32[$2>>2]|0;
        $103 = (($101) - ($102))|0;
        $104 = (($103|0) / 24)&-1;
        $105 = ($104>>>0)<(2);
        if ($105) {
         $$7 = $0;
        } else {
         $106 = $101;
         $107 = ((($106)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($12,$107);
         $108 = HEAP32[$100>>2]|0;
         $$0$i$i$idx$i = 0;
         while(1) {
          $109 = ($$0$i$i$idx$i|0)==(-1);
          if ($109) {
           break;
          }
          $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
          $$ptr$i = (($108) + (($$0$i$i$add$i*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
          $$0$i$i$idx$i = $$0$i$i$add$i;
         }
         $110 = ((($108)) + -24|0);
         HEAP32[$100>>2] = $110;
         $111 = ((($108)) + -48|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($13,$111);
         $112 = HEAP32[$100>>2]|0;
         $113 = ((($112)) + -24|0);
         $114 = ((($113)) + 11|0);
         $115 = HEAP8[$114>>0]|0;
         $116 = ($115<<24>>24)<(0);
         if ($116) {
          $117 = HEAP32[$113>>2]|0;
          HEAP8[$5>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($117,$5);
          $118 = ((($112)) + -20|0);
          HEAP32[$118>>2] = 0;
         } else {
          HEAP8[$6>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($113,$6);
          HEAP8[$114>>0] = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($113);
         ;HEAP32[$113>>2]=HEAP32[$12>>2]|0;HEAP32[$113+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$113+8>>2]=HEAP32[$12+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $119 = (($12) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$119>>2] = 0;
          $120 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $120;
         }
         $121 = ((($12)) + 12|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($14,$121,2);
         $122 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3876)|0);
         $123 = ((($14)) + 11|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = ($124<<24>>24)<(0);
         $126 = ((($14)) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = $124&255;
         $129 = $125 ? $127 : $128;
         $130 = ($122|0)==($129|0);
         if ($130) {
          $131 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($14,3876,$122)|0);
          $132 = ($131|0)==(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
          if ($132) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($121);
          }
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($18,$13);
         $133 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($18,0,3876)|0);
         ;HEAP32[$17>>2]=HEAP32[$18>>2]|0;HEAP32[$17+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$18+8>>2]|0;
         $$0$i$i$i119 = 0;
         while(1) {
          $exitcond$i$i$i120 = ($$0$i$i$i119|0)==(3);
          if ($exitcond$i$i$i120) {
           break;
          }
          $134 = (($18) + ($$0$i$i$i119<<2)|0);
          HEAP32[$134>>2] = 0;
          $135 = (($$0$i$i$i119) + 1)|0;
          $$0$i$i$i119 = $135;
         }
         $136 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($17,3931)|0);
         ;HEAP32[$16>>2]=HEAP32[$17>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$17+8>>2]|0;
         $$0$i$i$i123 = 0;
         while(1) {
          $exitcond$i$i$i124 = ($$0$i$i$i123|0)==(3);
          if ($exitcond$i$i$i124) {
           break;
          }
          $137 = (($17) + ($$0$i$i$i123<<2)|0);
          HEAP32[$137>>2] = 0;
          $138 = (($$0$i$i$i123) + 1)|0;
          $$0$i$i$i123 = $138;
         }
         $139 = ((($121)) + 11|0);
         $140 = HEAP8[$139>>0]|0;
         $141 = ($140<<24>>24)<(0);
         $142 = HEAP32[$121>>2]|0;
         $143 = ((($12)) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = $140&255;
         $146 = $141 ? $142 : $121;
         $147 = $141 ? $144 : $145;
         $148 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($16,$146,$147)|0);
         ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
         $$0$i$i$i127 = 0;
         while(1) {
          $exitcond$i$i$i128 = ($$0$i$i$i127|0)==(3);
          if ($exitcond$i$i$i128) {
           break;
          }
          $149 = (($16) + ($$0$i$i$i127<<2)|0);
          HEAP32[$149>>2] = 0;
          $150 = (($$0$i$i$i127) + 1)|0;
          $$0$i$i$i127 = $150;
         }
         $151 = HEAP32[$100>>2]|0;
         $152 = ((($151)) + -12|0);
         $153 = ((($152)) + 11|0);
         $154 = HEAP8[$153>>0]|0;
         $155 = ($154<<24>>24)<(0);
         if ($155) {
          $156 = HEAP32[$152>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($156,$3);
          $157 = ((($151)) + -8|0);
          HEAP32[$157>>2] = 0;
         } else {
          HEAP8[$4>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($152,$4);
          HEAP8[$153>>0] = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($152);
         ;HEAP32[$152>>2]=HEAP32[$15>>2]|0;HEAP32[$152+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$152+8>>2]=HEAP32[$15+8>>2]|0;
         $$0$i$i$i$i132 = 0;
         while(1) {
          $exitcond$i$i$i$i133 = ($$0$i$i$i$i132|0)==(3);
          if ($exitcond$i$i$i$i133) {
           break;
          }
          $158 = (($15) + ($$0$i$i$i$i132<<2)|0);
          HEAP32[$158>>2] = 0;
          $159 = (($$0$i$i$i$i132) + 1)|0;
          $$0$i$i$i$i132 = $159;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
         $$7 = $98;
        }
       }
      } else {
       $$7 = $0;
      }
     }
    }
   } else {
    $$7 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $6;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8allocateEm($0);
 $7 = HEAP32[$3>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($7,$1);
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 24|0);
 HEAP32[$3>>2] = $9;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 4;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 3;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 12|0);
  HEAP32[$25>>2] = 0;
  $27 = ((($25)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($25)) + 8|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($25)) + 12|0);
  $30 = HEAP32[$26>>2]|0;
  HEAP32[$29>>2] = $30;
  $31 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $31;
  $32 = ((($1)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$27>>2] = $33;
  $34 = ((($1)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$28>>2] = $35;
  HEAP32[$34>>2] = 0;
  HEAP32[$32>>2] = 0;
  HEAP32[$1>>2] = 0;
  $36 = ((($25)) + 16|0);
  HEAP32[$24>>2] = $36;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i116 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i115 = 0, $$0105$ph = 0, $$0105$ph$clear = 0, $$0105$ph$ph = 0, $$0111 = 0, $$088 = 0, $$1112 = 0, $$1112$be = 0, $$1112$ph = 0, $$1112$ph$ph = 0, $$8 = 0, $$ptr$i = 0, $$ptr$i117 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   $$8 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(70);
   if ($7) {
    $8 = ((($0)) + 1|0);
    $9 = ($8|0)==($1|0);
    if ($9) {
     $$8 = $0;
    } else {
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(89);
     if ($11) {
      $12 = ((($0)) + 2|0);
      $13 = ($12|0)==($1|0);
      if ($13) {
       $$8 = $0;
       break;
      } else {
       $$0111 = $12;
      }
     } else {
      $$0111 = $8;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111,$1,$2)|0);
     $15 = ($14|0)==($$0111|0);
     if ($15) {
      $$8 = $0;
     } else {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $16 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3884)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3,3884,$16);
      $17 = ((($2)) + 4|0);
      $18 = ((($3)) + 11|0);
      $19 = ((($3)) + 4|0);
      $20 = ((($4)) + 11|0);
      $21 = ((($4)) + 4|0);
      $$0105$ph = 0;$$1112$ph = $14;
      L9: while(1) {
       $$1112 = $$1112$ph;
       L11: while(1) {
        $22 = ($$1112|0)==($1|0);
        if ($22) {
         label = 11;
         break L9;
        }
        $26 = HEAP8[$$1112>>0]|0;
        switch ($26<<24>>24) {
        case 69:  {
         label = 16;
         break L9;
         break;
        }
        case 118:  {
         $28 = ((($$1112)) + 1|0);
         $$1112$be = $28;
         break;
        }
        case 82:  {
         $29 = ((($$1112)) + 1|0);
         $30 = ($29|0)==($1|0);
         if ($30) {
          label = 23;
         } else {
          $31 = HEAP8[$29>>0]|0;
          $32 = ($31<<24>>24)==(69);
          if ($32) {
           $$0105$ph$ph = 1;$$1112$ph$ph = $29;
           break L11;
          } else {
           label = 23;
          }
         }
         break;
        }
        case 79:  {
         $33 = ((($$1112)) + 1|0);
         $34 = ($33|0)==($1|0);
         if ($34) {
          label = 23;
         } else {
          $35 = HEAP8[$33>>0]|0;
          $36 = ($35<<24>>24)==(69);
          if ($36) {
           $$0105$ph$ph = 2;$$1112$ph$ph = $33;
           break L11;
          } else {
           label = 23;
          }
         }
         break;
        }
        default: {
         label = 23;
        }
        }
        L20: do {
         if ((label|0) == 23) {
          label = 0;
          $37 = HEAP32[$17>>2]|0;
          $38 = HEAP32[$2>>2]|0;
          $39 = (($37) - ($38))|0;
          $40 = (($39|0) / 24)&-1;
          $41 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1112,$1,$2)|0);
          $42 = HEAP32[$17>>2]|0;
          $43 = HEAP32[$2>>2]|0;
          $44 = (($42) - ($43))|0;
          $45 = (($44|0) / 24)&-1;
          $46 = ($41|0)==($$1112|0);
          $47 = ($41|0)==($1|0);
          $or$cond = $46 | $47;
          if ($or$cond) {
           break L9;
          }
          $$088 = $40;
          while(1) {
           $48 = ($$088>>>0)<($45>>>0);
           if (!($48)) {
            break;
           }
           $49 = HEAP8[$18>>0]|0;
           $50 = ($49<<24>>24)<(0);
           $51 = HEAP32[$19>>2]|0;
           $52 = $49&255;
           $53 = $50 ? $51 : $52;
           $54 = ($53>>>0)>(1);
           if ($54) {
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,4106)|0);
           }
           $55 = HEAP32[$2>>2]|0;
           $56 = (($55) + (($$088*24)|0)|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$56);
           $57 = HEAP8[$20>>0]|0;
           $58 = ($57<<24>>24)<(0);
           $59 = HEAP32[$4>>2]|0;
           $60 = HEAP32[$21>>2]|0;
           $61 = $57&255;
           $62 = $58 ? $59 : $4;
           $63 = $58 ? $60 : $61;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3,$62,$63)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $64 = (($$088) + 1)|0;
           $$088 = $64;
          }
          $$0 = $40;
          while(1) {
           $65 = ($$0>>>0)<($45>>>0);
           if (!($65)) {
            $$1112$be = $41;
            break L20;
           }
           $66 = HEAP32[$17>>2]|0;
           $$0$i$i$idx$i115 = 0;
           while(1) {
            $67 = ($$0$i$i$idx$i115|0)==(-1);
            if ($67) {
             break;
            }
            $$0$i$i$add$i116 = (($$0$i$i$idx$i115) + -1)|0;
            $$ptr$i117 = (($66) + (($$0$i$i$add$i116*24)|0)|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i117);
            $$0$i$i$idx$i115 = $$0$i$i$add$i116;
           }
           $68 = ((($66)) + -24|0);
           HEAP32[$17>>2] = $68;
           $69 = (($$0) + 1)|0;
           $$0 = $69;
          }
         }
        } while(0);
        $$1112 = $$1112$be;
       }
       $$0105$ph = $$0105$ph$ph;$$1112$ph = $$1112$ph$ph;
      }
      if ((label|0) == 11) {
       $23 = HEAP32[$17>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $24 = ($$0$i$i$idx$i|0)==(-1);
        if ($24) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($23) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $25 = ((($23)) + -24|0);
       HEAP32[$17>>2] = $25;
      }
      else if ((label|0) == 16) {
       $27 = ((($$1112)) + 1|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,3882)|0);
       $$0105$ph$clear = $$0105$ph & 3;
       switch ($$0105$ph$clear<<24>>24) {
       case 1:  {
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,5310)|0);
        break;
       }
       case 2:  {
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,5313)|0);
        break;
       }
       default: {
       }
       }
       $70 = HEAP32[$2>>2]|0;
       $71 = HEAP32[$17>>2]|0;
       $72 = ($70|0)==($71|0);
       if (!($72)) {
        $73 = ((($71)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($73,3916)|0);
        $74 = HEAP32[$17>>2]|0;
        $75 = ((($74)) + -12|0);
        $76 = HEAP8[$18>>0]|0;
        $77 = ($76<<24>>24)<(0);
        $78 = HEAP32[$3>>2]|0;
        $79 = HEAP32[$19>>2]|0;
        $80 = $76&255;
        $81 = $77 ? $78 : $3;
        $82 = $77 ? $79 : $80;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($75,0,$81,$82)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$8 = $27;
        break;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$8 = $0;
     }
    }
   } else {
    $$8 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$0$i$i$idx$i = 0, $$345 = 0, $$ptr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i64 = 0;
 var $exitcond$i$i$i$i81 = 0, $exitcond$i$i$i$i86 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i55 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i67 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 167|0;
 $4 = sp + 166|0;
 $5 = sp + 165|0;
 $6 = sp + 164|0;
 $7 = sp + 163|0;
 $8 = sp + 162|0;
 $9 = sp + 161|0;
 $10 = sp + 160|0;
 $11 = sp + 136|0;
 $12 = sp + 112|0;
 $13 = sp + 96|0;
 $14 = sp + 84|0;
 $15 = sp + 72|0;
 $16 = sp + 60|0;
 $17 = sp + 48|0;
 $18 = sp + 36|0;
 $19 = sp + 24|0;
 $20 = sp + 12|0;
 $21 = sp;
 $22 = ($0|0)==($1|0);
 if ($22) {
  $$345 = $0;
 } else {
  $23 = HEAP8[$0>>0]|0;
  $24 = ($23<<24>>24)==(77);
  if ($24) {
   $25 = ((($0)) + 1|0);
   $26 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($25,$1,$2)|0);
   $27 = ($26|0)==($25|0);
   if ($27) {
    $$345 = $0;
   } else {
    $28 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
    $29 = ($28|0)==($26|0);
    if ($29) {
     $$345 = $0;
    } else {
     $30 = ((($2)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$2>>2]|0;
     $33 = (($31) - ($32))|0;
     $34 = (($33|0) / 24)&-1;
     $35 = ($34>>>0)<(2);
     if ($35) {
      $$345 = $0;
     } else {
      $36 = $31;
      $37 = ((($36)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($11,$37);
      $38 = HEAP32[$30>>2]|0;
      $$0$i$i$idx$i = 0;
      while(1) {
       $39 = ($$0$i$i$idx$i|0)==(-1);
       if ($39) {
        break;
       }
       $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
       $$ptr$i = (($38) + (($$0$i$i$add$i*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      $40 = ((($38)) + -24|0);
      HEAP32[$30>>2] = $40;
      $41 = ((($38)) + -48|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($12,$41);
      $42 = ((($11)) + 12|0);
      $43 = ((($42)) + 11|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)<(0);
      $46 = HEAP32[$42>>2]|0;
      $47 = $45 ? $46 : $42;
      $48 = HEAP8[$47>>0]|0;
      $49 = ($48<<24>>24)==(40);
      L11: do {
       if ($49) {
        $50 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11,3884)|0);
        ;HEAP32[$15>>2]=HEAP32[$11>>2]|0;HEAP32[$15+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$11+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $51 = (($11) + ($$0$i$i$i<<2)|0);
         HEAP32[$51>>2] = 0;
         $52 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $52;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($16,$12);
        $53 = ((($16)) + 11|0);
        $54 = HEAP8[$53>>0]|0;
        $55 = ($54<<24>>24)<(0);
        $56 = HEAP32[$16>>2]|0;
        $57 = ((($16)) + 4|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $54&255;
        $60 = $55 ? $56 : $16;
        $61 = $55 ? $58 : $59;
        $62 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($15,$60,$61)|0);
        ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
        $$0$i$i$i51 = 0;
        while(1) {
         $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
         if ($exitcond$i$i$i52) {
          break;
         }
         $63 = (($15) + ($$0$i$i$i51<<2)|0);
         HEAP32[$63>>2] = 0;
         $64 = (($$0$i$i$i51) + 1)|0;
         $$0$i$i$i51 = $64;
        }
        $65 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($14,5306)|0);
        ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
        $$0$i$i$i54 = 0;
        while(1) {
         $exitcond$i$i$i55 = ($$0$i$i$i54|0)==(3);
         if ($exitcond$i$i$i55) {
          break;
         }
         $66 = (($14) + ($$0$i$i$i54<<2)|0);
         HEAP32[$66>>2] = 0;
         $67 = (($$0$i$i$i54) + 1)|0;
         $$0$i$i$i54 = $67;
        }
        $68 = HEAP32[$30>>2]|0;
        $69 = ((($68)) + -24|0);
        $70 = ((($69)) + 11|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = ($71<<24>>24)<(0);
        if ($72) {
         $73 = HEAP32[$69>>2]|0;
         HEAP8[$9>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($73,$9);
         $74 = ((($68)) + -20|0);
         HEAP32[$74>>2] = 0;
        } else {
         HEAP8[$10>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($69,$10);
         HEAP8[$70>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($69);
        ;HEAP32[$69>>2]=HEAP32[$13>>2]|0;HEAP32[$69+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$13+8>>2]|0;
        $$0$i$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
         if ($exitcond$i$i$i$i) {
          break;
         }
         $75 = (($13) + ($$0$i$i$i$i<<2)|0);
         HEAP32[$75>>2] = 0;
         $76 = (($$0$i$i$i$i) + 1)|0;
         $$0$i$i$i$i = $76;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
        $77 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($42,0,3882)|0);
        ;HEAP32[$17>>2]=HEAP32[$42>>2]|0;HEAP32[$17+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$42+8>>2]|0;
        $$0$i$i$i58 = 0;
        while(1) {
         $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
         if ($exitcond$i$i$i59) {
          break;
         }
         $78 = (($42) + ($$0$i$i$i58<<2)|0);
         HEAP32[$78>>2] = 0;
         $79 = (($$0$i$i$i58) + 1)|0;
         $$0$i$i$i58 = $79;
        }
        $80 = HEAP32[$30>>2]|0;
        $81 = ((($80)) + -12|0);
        $82 = ((($81)) + 11|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)<(0);
        if ($84) {
         $85 = HEAP32[$81>>2]|0;
         HEAP8[$7>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($85,$7);
         $86 = ((($80)) + -8|0);
         HEAP32[$86>>2] = 0;
        } else {
         HEAP8[$8>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($81,$8);
         HEAP8[$82>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($81);
        ;HEAP32[$81>>2]=HEAP32[$17>>2]|0;HEAP32[$81+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$17+8>>2]|0;
        $$0$i$i$i$i63 = 0;
        while(1) {
         $exitcond$i$i$i$i64 = ($$0$i$i$i$i63|0)==(3);
         if ($exitcond$i$i$i$i64) {
          break;
         }
         $87 = (($17) + ($$0$i$i$i$i63<<2)|0);
         HEAP32[$87>>2] = 0;
         $88 = (($$0$i$i$i$i63) + 1)|0;
         $$0$i$i$i$i63 = $88;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
       } else {
        $89 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11,3916)|0);
        ;HEAP32[$20>>2]=HEAP32[$11>>2]|0;HEAP32[$20+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$11+8>>2]|0;
        $$0$i$i$i66 = 0;
        while(1) {
         $exitcond$i$i$i67 = ($$0$i$i$i66|0)==(3);
         if ($exitcond$i$i$i67) {
          break;
         }
         $90 = (($11) + ($$0$i$i$i66<<2)|0);
         HEAP32[$90>>2] = 0;
         $91 = (($$0$i$i$i66) + 1)|0;
         $$0$i$i$i66 = $91;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($21,$12);
        $92 = ((($21)) + 11|0);
        $93 = HEAP8[$92>>0]|0;
        $94 = ($93<<24>>24)<(0);
        $95 = HEAP32[$21>>2]|0;
        $96 = ((($21)) + 4|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = $93&255;
        $99 = $94 ? $95 : $21;
        $100 = $94 ? $97 : $98;
        $101 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($20,$99,$100)|0);
        ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
        $$0$i$i$i70 = 0;
        while(1) {
         $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
         if ($exitcond$i$i$i71) {
          break;
         }
         $102 = (($20) + ($$0$i$i$i70<<2)|0);
         HEAP32[$102>>2] = 0;
         $103 = (($$0$i$i$i70) + 1)|0;
         $$0$i$i$i70 = $103;
        }
        $104 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($19,5306)|0);
        ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
        $$0$i$i$i74 = 0;
        while(1) {
         $exitcond$i$i$i75 = ($$0$i$i$i74|0)==(3);
         if ($exitcond$i$i$i75) {
          break;
         }
         $105 = (($19) + ($$0$i$i$i74<<2)|0);
         HEAP32[$105>>2] = 0;
         $106 = (($$0$i$i$i74) + 1)|0;
         $$0$i$i$i74 = $106;
        }
        $107 = HEAP32[$30>>2]|0;
        $108 = ((($107)) + -24|0);
        $109 = ((($108)) + 11|0);
        $110 = HEAP8[$109>>0]|0;
        $111 = ($110<<24>>24)<(0);
        if ($111) {
         $112 = HEAP32[$108>>2]|0;
         HEAP8[$5>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($112,$5);
         $113 = ((($107)) + -20|0);
         HEAP32[$113>>2] = 0;
        } else {
         HEAP8[$6>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($108,$6);
         HEAP8[$109>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($108);
        ;HEAP32[$108>>2]=HEAP32[$18>>2]|0;HEAP32[$108+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$18+8>>2]|0;
        $$0$i$i$i$i80 = 0;
        while(1) {
         $exitcond$i$i$i$i81 = ($$0$i$i$i$i80|0)==(3);
         if ($exitcond$i$i$i$i81) {
          break;
         }
         $114 = (($18) + ($$0$i$i$i$i80<<2)|0);
         HEAP32[$114>>2] = 0;
         $115 = (($$0$i$i$i$i80) + 1)|0;
         $$0$i$i$i$i80 = $115;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
        $116 = HEAP32[$30>>2]|0;
        $117 = ((($116)) + -12|0);
        $118 = ((($117)) + 11|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = ($119<<24>>24)<(0);
        if ($120) {
         $121 = HEAP32[$117>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($121,$3);
         $122 = ((($116)) + -8|0);
         HEAP32[$122>>2] = 0;
        } else {
         HEAP8[$4>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($117,$4);
         HEAP8[$118>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($117);
        ;HEAP32[$117>>2]=HEAP32[$42>>2]|0;HEAP32[$117+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$117+8>>2]=HEAP32[$42+8>>2]|0;
        $$0$i$i$i$i85 = 0;
        while(1) {
         $exitcond$i$i$i$i86 = ($$0$i$i$i$i85|0)==(3);
         if ($exitcond$i$i$i$i86) {
          break L11;
         }
         $123 = (($42) + ($$0$i$i$i$i85<<2)|0);
         HEAP32[$123>>2] = 0;
         $124 = (($$0$i$i$i$i85) + 1)|0;
         $$0$i$i$i$i85 = $124;
        }
       }
      } while(0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $$345 = $28;
     }
    }
   }
  } else {
   $$345 = $0;
  }
 }
 STACKTOP = sp;return ($$345|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $4&255;
 $10 = $5 ? $7 : $9;
 $11 = $5 ? $8 : $1;
 $12 = ($10>>>0)<($2>>>0);
 $$sroa$speculated = $12 ? $10 : $2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$11,$$sroa$speculated);
 return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$speculated8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $12 = $7;
 } else {
  $8 = $4&255;
  $12 = $8;
 }
 $9 = ($2|0)==(-1);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($5) {
  $10 = HEAP32[$0>>2]|0;
  $13 = $10;
 } else {
  $13 = $0;
 }
 $11 = ($12>>>0)>($2>>>0);
 $$sroa$speculated8 = $11 ? $2 : $12;
 $14 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_m($13,$1,$$sroa$speculated8)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = ($12>>>0)<($2>>>0);
  $spec$select = $11&1;
  $spec$select20 = $16 ? -1 : $spec$select;
  return ($spec$select20|0);
 } else {
  return ($14|0);
 }
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5303)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKcm($0,$1);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$067 = 0, $$068 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $isdigit = 0, $isdigit72 = 0, $isdigittmp = 0, $isdigittmp71 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 L1: do {
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(84);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(95);
    if ($14) {
     $15 = ((($2)) + 32|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($2)) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $$1 = $0;
      break;
     }
     $20 = ((($18)) + -16|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($18)) + -12|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($21|0)==($23|0);
     if ($24) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm3EEERAT__Kc($3);
      $38 = ((($2)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($2)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39>>>0)<($41>>>0);
      if ($42) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($39,$3);
       $43 = HEAP32[$38>>2]|0;
       $44 = ((($43)) + 24|0);
       HEAP32[$38>>2] = $44;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $45 = ((($0)) + 2|0);
      $46 = ((($2)) + 62|0);
      HEAP8[$46>>0] = 1;
      $$1 = $45;
      break;
     }
     $25 = HEAP32[$21>>2]|0;
     $26 = ((($21)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($2)) + 4|0);
     $29 = ((($2)) + 8|0);
     $$sroa$083$0 = $25;
     while(1) {
      $30 = ($$sroa$083$0|0)==($27|0);
      if ($30) {
       break;
      }
      $32 = HEAP32[$28>>2]|0;
      $33 = HEAP32[$29>>2]|0;
      $34 = ($32|0)==($33|0);
      if ($34) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$083$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($32,$$sroa$083$0);
       $35 = HEAP32[$28>>2]|0;
       $36 = ((($35)) + 24|0);
       HEAP32[$28>>2] = $36;
      }
      $37 = ((($$sroa$083$0)) + 24|0);
      $$sroa$083$0 = $37;
     }
     $31 = ((($0)) + 2|0);
     $$1 = $31;
     break;
    }
    $47 = $13 << 24 >> 24;
    $isdigittmp = (($47) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $48 = ((($0)) + 2|0);
     $$067 = $isdigittmp;$$068 = $48;
     while(1) {
      $49 = ($$068|0)==($1|0);
      if ($49) {
       $$1 = $0;
       break L1;
      }
      $50 = HEAP8[$$068>>0]|0;
      $51 = $50 << 24 >> 24;
      $isdigittmp71 = (($51) + -48)|0;
      $isdigit72 = ($isdigittmp71>>>0)<(10);
      if (!($isdigit72)) {
       break;
      }
      $52 = ($$067*10)|0;
      $53 = (($isdigittmp71) + ($52))|0;
      $54 = ((($$068)) + 1|0);
      $$067 = $53;$$068 = $54;
     }
     $55 = ($50<<24>>24)==(95);
     if ($55) {
      $56 = ((($2)) + 32|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($2)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      if ($60) {
       $$1 = $0;
      } else {
       $61 = (($$067) + 1)|0;
       $62 = ((($59)) + -16|0);
       $63 = ((($59)) + -12|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = HEAP32[$62>>2]|0;
       $66 = (($64) - ($65))|0;
       $67 = $66 >> 4;
       $68 = ($61>>>0)<($67>>>0);
       $69 = $65;
       if (!($68)) {
        $84 = ((($$068)) + 1|0);
        ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5,$0,$84);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
        $85 = ((($2)) + 4|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ((($2)) + 8|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($86>>>0)<($88>>>0);
        if ($89) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86,$4);
         $90 = HEAP32[$85>>2]|0;
         $91 = ((($90)) + 24|0);
         HEAP32[$85>>2] = $91;
        } else {
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $92 = ((($2)) + 62|0);
        HEAP8[$92>>0] = 1;
        $$1 = $84;
        break;
       }
       $70 = (($69) + ($61<<4)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (((($69) + ($61<<4)|0)) + 4|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ((($2)) + 4|0);
       $75 = ((($2)) + 8|0);
       $$sroa$077$0 = $71;
       while(1) {
        $76 = ($$sroa$077$0|0)==($73|0);
        if ($76) {
         break;
        }
        $78 = HEAP32[$74>>2]|0;
        $79 = HEAP32[$75>>2]|0;
        $80 = ($78|0)==($79|0);
        if ($80) {
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$077$0);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($78,$$sroa$077$0);
         $81 = HEAP32[$74>>2]|0;
         $82 = ((($81)) + 24|0);
         HEAP32[$74>>2] = $82;
        }
        $83 = ((($$sroa$077$0)) + 24|0);
        $$sroa$077$0 = $83;
       }
       $77 = ((($$068)) + 1|0);
       $$1 = $77;
      }
     } else {
      $$1 = $0;
     }
    } else {
     $$1 = $0;
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i93 = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i92 = 0, $$067 = 0, $$069 = 0, $$083 = 0, $$3 = 0, $$pre = 0, $$ptr$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i102 = 0, $$sroa$0$0$copyload$i86103 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 72|0;
 $4 = sp + 60|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 16|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(1);
 do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(73);
   if ($15) {
    $16 = ((($2)) + 61|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(0);
    $$pre = ((($2)) + 36|0);
    if (!($18)) {
     $19 = HEAP32[$$pre>>2]|0;
     $20 = ((($19)) + -16|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($19)) + -12|0);
     $23 = HEAP32[$22>>2]|0;
     $$0$i$i$i = $23;
     while(1) {
      $24 = ($$0$i$i$i|0)==($21|0);
      if ($24) {
       break;
      }
      $25 = ((($$0$i$i$i)) + -16|0);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($25);
      $$0$i$i$i = $25;
     }
     HEAP32[$22>>2] = $21;
    }
    $26 = ((($0)) + 1|0);
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $27 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3918)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($4,3918,$27);
    $28 = ((($2)) + 4|0);
    $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
    $29 = ((($2)) + 40|0);
    $30 = ((($2)) + 32|0);
    $31 = ((($4)) + 11|0);
    $32 = ((($4)) + 4|0);
    $33 = ((($7)) + 11|0);
    $34 = ((($7)) + 4|0);
    $$083 = $26;
    while(1) {
     $35 = HEAP8[$$083>>0]|0;
     $36 = ($35<<24>>24)==(69);
     if ($36) {
      break;
     }
     $37 = HEAP8[$16>>0]|0;
     $38 = ($37<<24>>24)==(0);
     if (!($38)) {
      $$sroa$0$0$copyload$i102 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i102;
      $39 = HEAP32[$$pre>>2]|0;
      $40 = HEAP32[$29>>2]|0;
      $41 = ($39>>>0)<($40>>>0);
      if ($41) {
       __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($3,$5);
       HEAP32[$39>>2] = 0;
       $42 = ((($39)) + 4|0);
       HEAP32[$42>>2] = 0;
       $43 = ((($39)) + 8|0);
       HEAP32[$43>>2] = 0;
       $44 = ((($39)) + 12|0);
       $45 = HEAP32[$3>>2]|0;
       HEAP32[$44>>2] = $45;
       $46 = HEAP32[$$pre>>2]|0;
       $47 = ((($46)) + 16|0);
       HEAP32[$$pre>>2] = $47;
      } else {
       __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($30,$5);
      }
     }
     $48 = HEAP32[$28>>2]|0;
     $49 = HEAP32[$2>>2]|0;
     $50 = (($48) - ($49))|0;
     $51 = (($50|0) / 24)&-1;
     $52 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$083,$1,$2)|0);
     $53 = HEAP32[$28>>2]|0;
     $54 = HEAP32[$2>>2]|0;
     $55 = (($53) - ($54))|0;
     $56 = (($55|0) / 24)&-1;
     $57 = HEAP8[$16>>0]|0;
     $58 = ($57<<24>>24)==(0);
     if (!($58)) {
      $59 = HEAP32[$$pre>>2]|0;
      $$0$i$i$idx$i = 0;
      while(1) {
       $60 = ($$0$i$i$idx$i|0)==(-1);
       if ($60) {
        break;
       }
       $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
       $61 = (($59) + ($$0$i$i$add$i<<4)|0);
       __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($61);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      $62 = ((($59)) + -16|0);
      HEAP32[$$pre>>2] = $62;
     }
     $63 = ($52|0)==($$083|0);
     $64 = ($52|0)==($1|0);
     $or$cond = $63 | $64;
     if ($or$cond) {
      label = 53;
      break;
     }
     $65 = HEAP8[$16>>0]|0;
     $66 = ($65<<24>>24)==(0);
     L29: do {
      if (!($66)) {
       $67 = HEAP32[$$pre>>2]|0;
       $$sroa$0$0$copyload$i86103 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
       HEAP32[$6>>2] = $$sroa$0$0$copyload$i86103;
       $68 = ((($67)) + -12|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ((($67)) + -8|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($69>>>0)<($71>>>0);
       if ($72) {
        HEAP32[$69>>2] = 0;
        $73 = ((($69)) + 4|0);
        HEAP32[$73>>2] = 0;
        $74 = ((($69)) + 8|0);
        HEAP32[$74>>2] = 0;
        $75 = ((($69)) + 12|0);
        HEAP32[$75>>2] = $$sroa$0$0$copyload$i86103;
        $76 = HEAP32[$68>>2]|0;
        $77 = ((($76)) + 16|0);
        HEAP32[$68>>2] = $77;
       } else {
        $78 = ((($67)) + -16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($78,$6);
       }
       $$067 = $51;
       while(1) {
        $79 = ($$067>>>0)<($56>>>0);
        if (!($79)) {
         break L29;
        }
        $80 = HEAP32[$$pre>>2]|0;
        $81 = ((($80)) + -12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = HEAP32[$2>>2]|0;
        $84 = (($83) + (($$067*24)|0)|0);
        $85 = ((($82)) + -12|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ((($82)) + -8|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($86|0)==($88|0);
        if ($89) {
         $92 = ((($82)) + -16|0);
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($92,$84);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($86,$84);
         $90 = HEAP32[$85>>2]|0;
         $91 = ((($90)) + 24|0);
         HEAP32[$85>>2] = $91;
        }
        $93 = (($$067) + 1)|0;
        $$067 = $93;
       }
      }
     } while(0);
     $$0 = $51;
     while(1) {
      $94 = ($$0>>>0)<($56>>>0);
      if (!($94)) {
       break;
      }
      $95 = HEAP8[$31>>0]|0;
      $96 = ($95<<24>>24)<(0);
      $97 = HEAP32[$32>>2]|0;
      $98 = $95&255;
      $99 = $96 ? $97 : $98;
      $100 = ($99>>>0)>(1);
      if ($100) {
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,4106)|0);
      }
      $101 = HEAP32[$2>>2]|0;
      $102 = (($101) + (($$0*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$102);
      $103 = HEAP8[$33>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$7>>2]|0;
      $106 = HEAP32[$34>>2]|0;
      $107 = $103&255;
      $108 = $104 ? $105 : $7;
      $109 = $104 ? $106 : $107;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($4,$108,$109)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $110 = (($$0) + 1)|0;
      $$0 = $110;
     }
     $$069 = $56;
     while(1) {
      $111 = ($$069|0)==($51|0);
      if ($111) {
       break;
      }
      $112 = HEAP32[$28>>2]|0;
      $$0$i$i$idx$i92 = 0;
      while(1) {
       $113 = ($$0$i$i$idx$i92|0)==(-1);
       if ($113) {
        break;
       }
       $$0$i$i$add$i93 = (($$0$i$i$idx$i92) + -1)|0;
       $$ptr$i = (($112) + (($$0$i$i$add$i93*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
       $$0$i$i$idx$i92 = $$0$i$i$add$i93;
      }
      $114 = ((($112)) + -24|0);
      HEAP32[$28>>2] = $114;
      $115 = (($$069) + -1)|0;
      $$069 = $115;
     }
     $$083 = $52;
    }
    if ((label|0) == 53) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$3 = $0;
     break;
    }
    $116 = ((($$083)) + 1|0);
    $117 = HEAP8[$31>>0]|0;
    $118 = ($117<<24>>24)<(0);
    $119 = HEAP32[$4>>2]|0;
    $120 = HEAP32[$32>>2]|0;
    $121 = $117&255;
    $122 = $118 ? $119 : $4;
    $123 = $118 ? $120 : $121;
    $124 = (($122) + ($123)|0);
    $125 = ((($124)) + -1|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = ($126<<24>>24)==(62);
    if ($127) {
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,5297)|0);
    } else {
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3920)|0);
    }
    ;HEAP32[$9>>2]=HEAP32[$4>>2]|0;HEAP32[$9+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$4+8>>2]|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $128 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$128>>2] = 0;
     $129 = (($$0$i$i) + 1)|0;
     $$0$i$i = $129;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
    $130 = HEAP32[$28>>2]|0;
    $131 = ((($2)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($130>>>0)<($132>>>0);
    if ($133) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130,$8);
     $134 = HEAP32[$28>>2]|0;
     $135 = ((($134)) + 24|0);
     HEAP32[$28>>2] = $135;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$3 = $116;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4&255;
 $10 = $5 ? $6 : $2;
 $11 = $5 ? $8 : $9;
 $12 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($1,$10,$11)|0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
  if ($exitcond$i$i$i) {
   break;
  }
  $13 = (($1) + ($$0$i$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i$i) + 1)|0;
  $$0$i$i$i = $14;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i$i = 0, $$038 = 0, $$040 = 0, $$040$in = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $isdigit = 0, $isdigit48 = 0, $isdigittmp = 0, $isdigittmp47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 40|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = ($0|0)==($1|0);
 L1: do {
  if ($8) {
   $$3 = $0;
  } else {
   $9 = HEAP8[$0>>0]|0;
   $10 = $9 << 24 >> 24;
   $isdigittmp = (($10) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $11 = ((($0)) + 1|0);
    $12 = ($11|0)==($1|0);
    if ($12) {
     $$3 = $0;
    } else {
     $$038 = $isdigittmp;$$040$in = $11;
     while(1) {
      $$040 = HEAP8[$$040$in>>0]|0;
      $13 = $$040 << 24 >> 24;
      $isdigittmp47 = (($13) + -48)|0;
      $isdigit48 = ($isdigittmp47>>>0)<(10);
      if (!($isdigit48)) {
       break;
      }
      $14 = ((($$040$in)) + 1|0);
      $15 = ($14|0)==($1|0);
      if ($15) {
       $$3 = $0;
       break L1;
      }
      $16 = ($$038*10)|0;
      $17 = (($isdigittmp47) + ($16))|0;
      $$038 = $17;$$040$in = $14;
     }
     $18 = $1;
     $19 = $$040$in;
     $20 = (($18) - ($19))|0;
     $21 = ($20>>>0)<($$038>>>0);
     if ($21) {
      $$3 = $0;
     } else {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3,$$040$in,$$038);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($4,$3,10);
      $22 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5264)|0);
      $23 = ((($4)) + 11|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)<(0);
      $26 = ((($4)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24&255;
      $29 = $25 ? $27 : $28;
      $30 = ($22|0)==($29|0);
      if ($30) {
       $31 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($4,5264,$22)|0);
       $32 = ($31|0)==(0);
       $$0$i = $32;
      } else {
       $$0$i = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      if ($$0$i) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm22EEERAT__Kc($5);
       $33 = ((($2)) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ((($2)) + 8|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($34>>>0)<($36>>>0);
       if ($37) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34,$5);
        $38 = HEAP32[$33>>2]|0;
        $39 = ((($38)) + 24|0);
        HEAP32[$33>>2] = $39;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      } else {
       ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;HEAP32[$7+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$3+8>>2]|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $40 = (($3) + ($$0$i$i<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i) + 1)|0;
        $$0$i$i = $41;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6,$7);
       $42 = ((($2)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($2)) + 8|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($43>>>0)<($45>>>0);
       if ($46) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$6);
        $47 = HEAP32[$42>>2]|0;
        $48 = ((($47)) + 24|0);
        HEAP32[$42>>2] = $48;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$6);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      }
      $49 = (($$040$in) + ($$038)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$3 = $49;
     }
    }
   } else {
    $$3 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 $12 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $13 = HEAP8[$5>>0]|0;
 $14 = ($13<<24>>24)<(0);
 $15 = HEAP32[$1>>2]|0;
 $16 = $14 ? $15 : $1;
 $17 = (($11) + ($12))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0,$16,$11,$17);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0,$2,$12)|0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $2 = (($1) + ($$0$i$i1<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $3;
 }
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 3|0;
 $3 = sp + 2|0;
 $4 = sp + 1|0;
 $5 = sp;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  HEAP8[$4>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($9,$4);
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = 0;
 } else {
  HEAP8[$5>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0,$5);
  HEAP8[$6>>0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
  if ($exitcond$i$i$i$i) {
   break;
  }
  $11 = (($1) + ($$0$i$i$i$i<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = (($$0$i$i$i$i) + 1)|0;
  $$0$i$i$i$i = $12;
 }
 $13 = ((($0)) + 12|0);
 $14 = ((($1)) + 12|0);
 $15 = ((($13)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 if ($17) {
  $18 = HEAP32[$13>>2]|0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($18,$2);
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
 } else {
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13,$3);
  HEAP8[$15>>0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($13);
 ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
 $$0$i$i$i$i3 = 0;
 while(1) {
  $exitcond$i$i$i$i4 = ($$0$i$i$i$i3|0)==(3);
  if ($exitcond$i$i$i$i4) {
   break;
  }
  $20 = (($14) + ($$0$i$i$i$i3<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i$i$i3) + 1)|0;
  $$0$i$i$i$i3 = $21;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 $4 = ((($0)) + 12|0);
 $5 = ((($1)) + 12|0);
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $$0$i$i3 = 0;
 while(1) {
  $exitcond$i$i4 = ($$0$i$i3|0)==(3);
  if ($exitcond$i$i4) {
   break;
  }
  $6 = (($5) + ($$0$i$i3<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i3) + 1)|0;
  $$0$i$i3 = $7;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 24)&-1;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25,$1);
  $26 = ((($25)) + 24|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i91 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i90 = 0, $$3 = 0, $$ptr$i = 0, $$ptr$i92 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i98 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $spec$select = 0, $spec$select87 = 0, $spec$select88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(1);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(76);
   $13 = ((($0)) + 1|0);
   $spec$select = $12 ? $13 : $0;
   $14 = HEAP8[$spec$select>>0]|0;
   $15 = $14 << 24 >> 24;
   switch ($15|0) {
   case 78:  {
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select,$1,$2)|0);
    $17 = ($16|0)==($spec$select|0);
    $spec$select87 = $17 ? $0 : $16;
    $$3 = $spec$select87;
    break L1;
    break;
   }
   case 90:  {
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select,$1,$2)|0);
    $19 = ($18|0)==($spec$select|0);
    $spec$select88 = $19 ? $0 : $18;
    $$3 = $spec$select88;
    break L1;
    break;
   }
   default: {
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select,$1,$2)|0);
    $21 = ($20|0)==($spec$select|0);
    if ($21) {
     $70 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($spec$select,$1,$2)|0);
     $71 = ($70|0)==($spec$select|0);
     $72 = ($70|0)==($1|0);
     $or$cond = $71 | $72;
     if ($or$cond) {
      $$3 = $0;
      break L1;
     }
     $73 = HEAP8[$70>>0]|0;
     $74 = ($73<<24>>24)==(73);
     if (!($74)) {
      $$3 = $0;
      break L1;
     }
     $75 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($70,$1,$2)|0);
     $76 = ($75|0)==($70|0);
     if ($76) {
      $$3 = $0;
      break L1;
     }
     $77 = ((($2)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = HEAP32[$2>>2]|0;
     $80 = (($78) - ($79))|0;
     $81 = (($80|0) / 24)&-1;
     $82 = ($81>>>0)<(2);
     if ($82) {
      $$3 = $0;
      break L1;
     }
     $83 = $78;
     $84 = ((($83)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$84);
     $85 = HEAP32[$77>>2]|0;
     $$0$i$i$idx$i90 = 0;
     while(1) {
      $86 = ($$0$i$i$idx$i90|0)==(-1);
      if ($86) {
       break;
      }
      $$0$i$i$add$i91 = (($$0$i$i$idx$i90) + -1)|0;
      $$ptr$i92 = (($85) + (($$0$i$i$add$i91*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i92);
      $$0$i$i$idx$i90 = $$0$i$i$add$i91;
     }
     $87 = ((($85)) + -24|0);
     HEAP32[$77>>2] = $87;
     $88 = ((($85)) + -48|0);
     $89 = ((($6)) + 11|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = ($90<<24>>24)<(0);
     $92 = HEAP32[$6>>2]|0;
     $93 = ((($6)) + 4|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $90&255;
     $96 = $91 ? $92 : $6;
     $97 = $91 ? $94 : $95;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($88,$96,$97)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$3 = $75;
     break L1;
    }
    $22 = ($20|0)==($1|0);
    if ($22) {
     $$3 = $1;
     break L1;
    }
    $23 = HEAP8[$20>>0]|0;
    $24 = ($23<<24>>24)==(73);
    if (!($24)) {
     $$3 = $20;
     break L1;
    }
    $25 = HEAP32[$2>>2]|0;
    $26 = ((($2)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $$3 = $0;
     break L1;
    }
    $29 = ((($27)) + -24|0);
    $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i98 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
    HEAP32[$4>>2] = $$sroa$0$0$copyload$i98;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3,$29,$4);
    $30 = ((($2)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($2)) + 24|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31>>>0)<($33>>>0);
    if ($34) {
     $35 = ((($3)) + 12|0);
     HEAP32[$31>>2] = 0;
     $36 = ((($31)) + 4|0);
     HEAP32[$36>>2] = 0;
     $37 = ((($31)) + 8|0);
     HEAP32[$37>>2] = 0;
     $38 = ((($31)) + 12|0);
     $39 = HEAP32[$35>>2]|0;
     HEAP32[$38>>2] = $39;
     $40 = HEAP32[$3>>2]|0;
     HEAP32[$31>>2] = $40;
     $41 = ((($3)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP32[$36>>2] = $42;
     $43 = ((($3)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     HEAP32[$37>>2] = $44;
     HEAP32[$43>>2] = 0;
     HEAP32[$41>>2] = 0;
     HEAP32[$3>>2] = 0;
     $45 = HEAP32[$30>>2]|0;
     $46 = ((($45)) + 16|0);
     HEAP32[$30>>2] = $46;
    } else {
     $47 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($47,$3);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
    $48 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
    $49 = ($48|0)==($20|0);
    if ($49) {
     $$3 = $0;
     break L1;
    }
    $50 = HEAP32[$26>>2]|0;
    $51 = HEAP32[$2>>2]|0;
    $52 = (($50) - ($51))|0;
    $53 = (($52|0) / 24)&-1;
    $54 = ($53>>>0)<(2);
    if ($54) {
     $$3 = $0;
     break L1;
    }
    $55 = $50;
    $56 = ((($55)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$56);
    $57 = HEAP32[$26>>2]|0;
    $$0$i$i$idx$i = 0;
    while(1) {
     $58 = ($$0$i$i$idx$i|0)==(-1);
     if ($58) {
      break;
     }
     $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
     $$ptr$i = (($57) + (($$0$i$i$add$i*24)|0)|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    $59 = ((($57)) + -24|0);
    HEAP32[$26>>2] = $59;
    $60 = ((($57)) + -48|0);
    $61 = ((($5)) + 11|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = ($62<<24>>24)<(0);
    $64 = HEAP32[$5>>2]|0;
    $65 = ((($5)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $62&255;
    $68 = $63 ? $64 : $5;
    $69 = $63 ? $66 : $67;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($60,$68,$69)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$3 = $48;
    break L1;
   }
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$073 = 0, $$1 = 0, $$174 = 0, $$275 = 0, $$pn = 0, $$sroa$0102$0 = 0, $$sroa$096$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit81 = 0, $isdigittmp = 0, $isdigittmp80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 120|0;
 $4 = sp + 96|0;
 $5 = sp + 72|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(1);
 L1: do {
  if ($12) {
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(83);
   if ($14) {
    $15 = ((($0)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    switch ($17|0) {
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($3,5210);
     $18 = ((($2)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($2)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)<($21>>>0);
     if ($22) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($19,$3);
      $23 = HEAP32[$18>>2]|0;
      $24 = ((($23)) + 24|0);
      HEAP32[$18>>2] = $24;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $25 = ((($0)) + 2|0);
     $$1 = $25;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($4,5225);
     $26 = ((($2)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($2)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($27>>>0)<($29>>>0);
     if ($30) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($27,$4);
      $31 = HEAP32[$26>>2]|0;
      $32 = ((($31)) + 24|0);
      HEAP32[$26>>2] = $32;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $33 = ((($0)) + 2|0);
     $$1 = $33;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($5,4704);
     $34 = ((($2)) + 4|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($2)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($35>>>0)<($37>>>0);
     if ($38) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35,$5);
      $39 = HEAP32[$34>>2]|0;
      $40 = ((($39)) + 24|0);
      HEAP32[$34>>2] = $40;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $41 = ((($0)) + 2|0);
     $$1 = $41;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($6,4800);
     $42 = ((($2)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($2)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($43>>>0)<($45>>>0);
     if ($46) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$6);
      $47 = HEAP32[$42>>2]|0;
      $48 = ((($47)) + 24|0);
      HEAP32[$42>>2] = $48;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$6);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $49 = ((($0)) + 2|0);
     $$1 = $49;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($7,4877);
     $50 = ((($2)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($2)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51>>>0)<($53>>>0);
     if ($54) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($51,$7);
      $55 = HEAP32[$50>>2]|0;
      $56 = ((($55)) + 24|0);
      HEAP32[$50>>2] = $56;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $57 = ((($0)) + 2|0);
     $$1 = $57;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($8,4954);
     $58 = ((($2)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ((($2)) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59>>>0)<($61>>>0);
     if ($62) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($59,$8);
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 24|0);
      HEAP32[$58>>2] = $64;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $65 = ((($0)) + 2|0);
     $$1 = $65;
     break L1;
     break;
    }
    case 95:  {
     $66 = ((($2)) + 16|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($2)) + 20|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $$1 = $0;
      break L1;
     }
     $71 = HEAP32[$67>>2]|0;
     $72 = ((($67)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($2)) + 4|0);
     $75 = ((($2)) + 8|0);
     $$sroa$0102$0 = $71;
     while(1) {
      $76 = ($$sroa$0102$0|0)==($73|0);
      if ($76) {
       break;
      }
      $78 = HEAP32[$74>>2]|0;
      $79 = HEAP32[$75>>2]|0;
      $80 = ($78|0)==($79|0);
      if ($80) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$0102$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($78,$$sroa$0102$0);
       $81 = HEAP32[$74>>2]|0;
       $82 = ((($81)) + 24|0);
       HEAP32[$74>>2] = $82;
      }
      $83 = ((($$sroa$0102$0)) + 24|0);
      $$sroa$0102$0 = $83;
     }
     $77 = ((($0)) + 2|0);
     $$1 = $77;
     break L1;
     break;
    }
    default: {
     $isdigittmp = (($17) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $84 = (_isupper($17)|0);
      $85 = ($84|0)==(0);
      if ($85) {
       $$1 = $0;
       break L1;
      }
     }
     $86 = (($17) + -55)|0;
     $$073 = $isdigit ? $isdigittmp : $86;
     $87 = ((($0)) + 2|0);
     $$072 = $87;$$174 = $$073;
     while(1) {
      $88 = ($$072|0)==($1|0);
      if ($88) {
       $$1 = $0;
       break L1;
      }
      $89 = HEAP8[$$072>>0]|0;
      $90 = $89 << 24 >> 24;
      $isdigittmp80 = (($90) + -48)|0;
      $isdigit81 = ($isdigittmp80>>>0)<(10);
      if (!($isdigit81)) {
       $91 = (_isupper($90)|0);
       $92 = ($91|0)==(0);
       if ($92) {
        break;
       }
      }
      $93 = ($$174*36)|0;
      $94 = (($90) + -55)|0;
      $$pn = $isdigit81 ? $isdigittmp80 : $94;
      $$275 = (($$pn) + ($93))|0;
      $95 = ((($$072)) + 1|0);
      $$072 = $95;$$174 = $$275;
     }
     $96 = ($89<<24>>24)==(95);
     if (!($96)) {
      $$1 = $0;
      break L1;
     }
     $97 = (($$174) + 1)|0;
     $98 = ((($2)) + 16|0);
     $99 = ((($2)) + 20|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = HEAP32[$98>>2]|0;
     $102 = (($100) - ($101))|0;
     $103 = $102 >> 4;
     $104 = ($97>>>0)<($103>>>0);
     $105 = $101;
     if (!($104)) {
      $$1 = $0;
      break L1;
     }
     $106 = (($105) + ($97<<4)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (((($105) + ($97<<4)|0)) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($2)) + 4|0);
     $111 = ((($2)) + 8|0);
     $$sroa$096$0 = $107;
     while(1) {
      $112 = ($$sroa$096$0|0)==($109|0);
      if ($112) {
       break;
      }
      $114 = HEAP32[$110>>2]|0;
      $115 = HEAP32[$111>>2]|0;
      $116 = ($114|0)==($115|0);
      if ($116) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$096$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($114,$$sroa$096$0);
       $117 = HEAP32[$110>>2]|0;
       $118 = ((($117)) + 24|0);
       HEAP32[$110>>2] = $118;
      }
      $119 = ((($$sroa$096$0)) + 24|0);
      $$sroa$096$0 = $119;
     }
     $113 = ((($$072)) + 1|0);
     $$1 = $113;
     break L1;
    }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(3);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(68);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    switch ($15|0) {
    case 84: case 116:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    $19 = ($17|0)==($1|0);
    $or$cond = $18 | $19;
    if ($or$cond) {
     $$127 = $0;
    } else {
     $20 = HEAP8[$17>>0]|0;
     $21 = ($20<<24>>24)==(69);
     if ($21) {
      $22 = HEAP32[$2>>2]|0;
      $23 = ((($2)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if ($25) {
       $$127 = $0;
      } else {
       $26 = ((($24)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$26);
       $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,5200)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $28 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$28>>2] = 0;
        $29 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $29;
       }
       $30 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3882)|0);
       ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i30 = 0;
       while(1) {
        $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
        if ($exitcond$i$i$i31) {
         break;
        }
        $31 = (($5) + ($$0$i$i$i30<<2)|0);
        HEAP32[$31>>2] = 0;
        $32 = (($$0$i$i$i30) + 1)|0;
        $$0$i$i$i30 = $32;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
       $33 = HEAP32[$23>>2]|0;
       $34 = ((($33)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($34,$3);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $35 = ((($17)) + 1|0);
       $$127 = $35;
      }
     } else {
      $$127 = $0;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i131 = 0, $$0$i$i$i135 = 0, $$0$i$i$i139 = 0, $$0$i$i$i144 = 0, $$0$i$i$idx$i = 0, $$2103 = 0, $$899$ph = 0, $$9 = 0, $$off = 0, $$ptr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i132 = 0, $exitcond$i$i$i136 = 0, $exitcond$i$i$i140 = 0, $exitcond$i$i$i145 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 149|0;
 $4 = sp + 148|0;
 $5 = sp + 136|0;
 $6 = sp + 124|0;
 $7 = sp + 112|0;
 $8 = sp + 88|0;
 $9 = sp + 72|0;
 $10 = sp + 60|0;
 $11 = sp + 48|0;
 $12 = sp + 36|0;
 $13 = sp + 24|0;
 $14 = sp + 12|0;
 $15 = sp;
 $16 = $1;
 $17 = $0;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(3);
 L1: do {
  if ($19) {
   $20 = HEAP8[$0>>0]|0;
   $21 = ($20<<24>>24)==(68);
   if ($21) {
    $22 = ((($0)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(118);
    if ($24) {
     $25 = ((($0)) + 2|0);
     $26 = HEAP8[$25>>0]|0;
     $$off = (($26) + -49)<<24>>24;
     $27 = ($$off&255)<(9);
     if ($27) {
      $28 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($25,$1)|0);
      $29 = ($28|0)==($1|0);
      if ($29) {
       $$9 = $0;
       break;
      }
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(95);
      if (!($31)) {
       $$9 = $0;
       break;
      }
      $32 = $28;
      $33 = $25;
      $34 = (($32) - ($33))|0;
      $35 = ((($28)) + 1|0);
      $36 = ($35|0)==($1|0);
      if ($36) {
       $$9 = $0;
       break;
      }
      $37 = HEAP8[$35>>0]|0;
      $38 = ($37<<24>>24)==(112);
      if (!($38)) {
       $39 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($35,$1,$2)|0);
       $40 = ($39|0)==($35|0);
       if ($40) {
        $$9 = $0;
        break;
       }
       $41 = HEAP32[$2>>2]|0;
       $42 = ((($2)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($41|0)==($43|0);
       if ($44) {
        $$9 = $0;
        break;
       }
       ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($7,$25,$34);
       $45 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7,0,3922)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $46 = (($7) + ($$0$i$i$i<<2)|0);
        HEAP32[$46>>2] = 0;
        $47 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $47;
       }
       $48 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3931)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i131 = 0;
       while(1) {
        $exitcond$i$i$i132 = ($$0$i$i$i131|0)==(3);
        if ($exitcond$i$i$i132) {
         break;
        }
        $49 = (($6) + ($$0$i$i$i131<<2)|0);
        HEAP32[$49>>2] = 0;
        $50 = (($$0$i$i$i131) + 1)|0;
        $$0$i$i$i131 = $50;
       }
       $51 = HEAP32[$42>>2]|0;
       $52 = ((($51)) + -24|0);
       $53 = ((($5)) + 11|0);
       $54 = HEAP8[$53>>0]|0;
       $55 = ($54<<24>>24)<(0);
       $56 = HEAP32[$5>>2]|0;
       $57 = ((($5)) + 4|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = $54&255;
       $60 = $55 ? $56 : $5;
       $61 = $55 ? $58 : $59;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($52,$60,$61)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $$9 = $39;
       break;
      }
      $62 = ((($28)) + 2|0);
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($11,$25,$34);
      $63 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($11,0,3933)|0);
      ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
      $$0$i$i$i135 = 0;
      while(1) {
       $exitcond$i$i$i136 = ($$0$i$i$i135|0)==(3);
       if ($exitcond$i$i$i136) {
        break;
       }
       $64 = (($11) + ($$0$i$i$i135<<2)|0);
       HEAP32[$64>>2] = 0;
       $65 = (($$0$i$i$i135) + 1)|0;
       $$0$i$i$i135 = $65;
      }
      $66 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($10,3931)|0);
      ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
      $$0$i$i$i139 = 0;
      while(1) {
       $exitcond$i$i$i140 = ($$0$i$i$i139|0)==(3);
       if ($exitcond$i$i$i140) {
        break;
       }
       $67 = (($10) + ($$0$i$i$i139<<2)|0);
       HEAP32[$67>>2] = 0;
       $68 = (($$0$i$i$i139) + 1)|0;
       $$0$i$i$i139 = $68;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
      $69 = ((($2)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ((($2)) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70>>>0)<($72>>>0);
      if ($73) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70,$8);
       $74 = HEAP32[$69>>2]|0;
       $75 = ((($74)) + 24|0);
       HEAP32[$69>>2] = $75;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $$9 = $62;
      break;
     }
     ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $76 = (($12) + ($$0$i$i<<2)|0);
      HEAP32[$76>>2] = 0;
      $77 = (($$0$i$i) + 1)|0;
      $$0$i$i = $77;
     }
     $78 = ($26<<24>>24)==(95);
     if ($78) {
      $$2103 = $25;
      label = 44;
     } else {
      $79 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($25,$1,$2)|0);
      $80 = ($79|0)==($25|0);
      if ($80) {
       $$2103 = $25;
       label = 44;
      } else {
       $81 = HEAP32[$2>>2]|0;
       $82 = ((($2)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if (!($84)) {
        $85 = ((($83)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($13,$85);
        $86 = ((($12)) + 11|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = ($87<<24>>24)<(0);
        if ($88) {
         $89 = HEAP32[$12>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($89,$3);
         $90 = ((($12)) + 4|0);
         HEAP32[$90>>2] = 0;
        } else {
         HEAP8[$4>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($12,$4);
         HEAP8[$86>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($12);
        ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;
        $$0$i$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
         if ($exitcond$i$i$i$i) {
          break;
         }
         $91 = (($13) + ($$0$i$i$i$i<<2)|0);
         HEAP32[$91>>2] = 0;
         $92 = (($$0$i$i$i$i) + 1)|0;
         $$0$i$i$i$i = $92;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $93 = HEAP32[$82>>2]|0;
        $$0$i$i$idx$i = 0;
        while(1) {
         $94 = ($$0$i$i$idx$i|0)==(-1);
         if ($94) {
          break;
         }
         $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
         $$ptr$i = (($93) + (($$0$i$i$add$i*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
         $$0$i$i$idx$i = $$0$i$i$add$i;
        }
        $95 = ((($93)) + -24|0);
        HEAP32[$82>>2] = $95;
        $$2103 = $79;
        label = 44;
       }
      }
     }
     do {
      if ((label|0) == 44) {
       $96 = ($$2103|0)==($1|0);
       if ($96) {
        $$899$ph = $0;
       } else {
        $97 = HEAP8[$$2103>>0]|0;
        $98 = ($97<<24>>24)==(95);
        if ($98) {
         $99 = ((($$2103)) + 1|0);
         $100 = ($99|0)==($1|0);
         if ($100) {
          $$899$ph = $0;
         } else {
          $101 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($99,$1,$2)|0);
          $102 = ($101|0)==($99|0);
          if ($102) {
           $$899$ph = $0;
          } else {
           $103 = HEAP32[$2>>2]|0;
           $104 = ((($2)) + 4|0);
           $105 = HEAP32[$104>>2]|0;
           $106 = ($103|0)==($105|0);
           if ($106) {
            break;
           }
           __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($15,3922,$12);
           $107 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($15,3931)|0);
           ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
           $$0$i$i$i144 = 0;
           while(1) {
            $exitcond$i$i$i145 = ($$0$i$i$i144|0)==(3);
            if ($exitcond$i$i$i145) {
             break;
            }
            $108 = (($15) + ($$0$i$i$i144<<2)|0);
            HEAP32[$108>>2] = 0;
            $109 = (($$0$i$i$i144) + 1)|0;
            $$0$i$i$i144 = $109;
           }
           $110 = HEAP32[$104>>2]|0;
           $111 = ((($110)) + -24|0);
           $112 = ((($14)) + 11|0);
           $113 = HEAP8[$112>>0]|0;
           $114 = ($113<<24>>24)<(0);
           $115 = HEAP32[$14>>2]|0;
           $116 = ((($14)) + 4|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = $113&255;
           $119 = $114 ? $115 : $14;
           $120 = $114 ? $117 : $118;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($111,$119,$120)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
           $$899$ph = $101;
          }
         }
        } else {
         $$899$ph = $0;
        }
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$9 = $$899$ph;
       break L1;
      }
     } while(0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
     $$9 = $0;
    } else {
     $$9 = $0;
    }
   } else {
    $$9 = $0;
   }
  } else {
   $$9 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$9|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$pn = 0, $$017 = 0, $$2 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$2 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(110);
   $5 = ((($0)) + 1|0);
   $spec$select = $4 ? $5 : $0;
   $6 = ($spec$select|0)==($1|0);
   if ($6) {
    $$2 = $0;
   } else {
    $7 = HEAP8[$spec$select>>0]|0;
    $8 = ($7<<24>>24)==(48);
    if ($8) {
     $9 = ((($spec$select)) + 1|0);
     $$2 = $9;
     break;
    }
    $$off = (($7) + -49)<<24>>24;
    $10 = ($$off&255)<(9);
    if ($10) {
     $$0$pn = $spec$select;
     while(1) {
      $$017 = ((($$0$pn)) + 1|0);
      $11 = ($$017|0)==($1|0);
      if ($11) {
       $$2 = $1;
       break L1;
      }
      $12 = HEAP8[$$017>>0]|0;
      $13 = $12 << 24 >> 24;
      $isdigittmp = (($13) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $$0$pn = $$017;
      } else {
       $$2 = $$017;
       break;
      }
     }
    } else {
     $$2 = $0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i630 = 0, $$0$i$i$add$i649 = 0, $$0$i$i$add$i653 = 0, $$0$i$i$add$i677 = 0, $$0$i$i$add$i681 = 0, $$0$i$i$add$i685 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i615 = 0, $$0$i$i$i599 = 0, $$0$i$i$i605 = 0, $$0$i$i$i609 = 0, $$0$i$i$i618 = 0, $$0$i$i$i622 = 0, $$0$i$i$i625 = 0, $$0$i$i$i633 = 0, $$0$i$i$i636 = 0, $$0$i$i$i640 = 0;
 var $$0$i$i$i644 = 0, $$0$i$i$i656 = 0, $$0$i$i$i660 = 0, $$0$i$i$i664 = 0, $$0$i$i$i668 = 0, $$0$i$i$i672 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i629 = 0, $$0$i$i$idx$i648 = 0, $$0$i$i$idx$i652 = 0, $$0$i$i$idx$i676 = 0, $$0$i$i$idx$i680 = 0, $$0$i$i$idx$i684 = 0, $$0$i$i602 = 0, $$0503 = 0, $$0504$off0 = 0, $$14 = 0, $$ptr$i = 0, $$ptr$i631 = 0, $$ptr$i650 = 0;
 var $$ptr$i654 = 0, $$ptr$i678 = 0, $$ptr$i682 = 0, $$ptr$i686 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i616 = 0, $exitcond$i$i$i600 = 0;
 var $exitcond$i$i$i606 = 0, $exitcond$i$i$i610 = 0, $exitcond$i$i$i619 = 0, $exitcond$i$i$i623 = 0, $exitcond$i$i$i626 = 0, $exitcond$i$i$i634 = 0, $exitcond$i$i$i637 = 0, $exitcond$i$i$i641 = 0, $exitcond$i$i$i645 = 0, $exitcond$i$i$i657 = 0, $exitcond$i$i$i661 = 0, $exitcond$i$i$i665 = 0, $exitcond$i$i$i669 = 0, $exitcond$i$i$i673 = 0, $exitcond$i$i603 = 0, $spec$select558 = 0, $spec$select559 = 0, $spec$select560 = 0, $spec$select561 = 0, $spec$select562 = 0;
 var $spec$select563 = 0, $spec$select564 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0, $spec$select568 = 0, $spec$select569 = 0, $spec$select570 = 0, $spec$select571 = 0, $spec$select572 = 0, $spec$select573 = 0, $spec$select574 = 0, $spec$select575 = 0, $spec$select576 = 0, $spec$select577 = 0, $spec$select578 = 0, $spec$select579 = 0, $spec$select580 = 0, $spec$select581 = 0, $spec$select582 = 0;
 var $spec$select583 = 0, $spec$select584 = 0, $spec$select585 = 0, $spec$select586 = 0, $spec$select587 = 0, $spec$select588 = 0, $spec$select589 = 0, $spec$select590 = 0, $spec$select591 = 0, $spec$select592 = 0, $spec$select593 = 0, $spec$select594 = 0, $spec$select595 = 0, $spec$select596 = 0, $spec$select597 = 0, $spec$select598 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(960|0);
 $3 = sp + 951|0;
 $4 = sp + 950|0;
 $5 = sp + 949|0;
 $6 = sp + 948|0;
 $7 = sp + 936|0;
 $8 = sp + 924|0;
 $9 = sp + 912|0;
 $10 = sp + 900|0;
 $11 = sp + 888|0;
 $12 = sp + 876|0;
 $13 = sp + 864|0;
 $14 = sp + 852|0;
 $15 = sp + 840|0;
 $16 = sp + 828|0;
 $17 = sp + 816|0;
 $18 = sp + 804|0;
 $19 = sp + 792|0;
 $20 = sp + 780|0;
 $21 = sp + 768|0;
 $22 = sp + 756|0;
 $23 = sp + 744|0;
 $24 = sp + 732|0;
 $25 = sp + 720|0;
 $26 = sp + 708|0;
 $27 = sp + 696|0;
 $28 = sp + 684|0;
 $29 = sp + 672|0;
 $30 = sp + 660|0;
 $31 = sp + 648|0;
 $32 = sp + 624|0;
 $33 = sp + 608|0;
 $34 = sp + 596|0;
 $35 = sp + 584|0;
 $36 = sp + 572|0;
 $37 = sp + 560|0;
 $38 = sp + 548|0;
 $39 = sp + 536|0;
 $40 = sp + 524|0;
 $41 = sp + 512|0;
 $42 = sp + 500|0;
 $43 = sp + 488|0;
 $44 = sp + 476|0;
 $45 = sp + 464|0;
 $46 = sp + 440|0;
 $47 = sp + 424|0;
 $48 = sp + 412|0;
 $49 = sp + 400|0;
 $50 = sp + 388|0;
 $51 = sp + 376|0;
 $52 = sp + 364|0;
 $53 = sp + 352|0;
 $54 = sp + 340|0;
 $55 = sp + 328|0;
 $56 = sp + 316|0;
 $57 = sp + 304|0;
 $58 = sp + 292|0;
 $59 = sp + 280|0;
 $60 = sp + 256|0;
 $61 = sp + 240|0;
 $62 = sp + 228|0;
 $63 = sp + 216|0;
 $64 = sp + 204|0;
 $65 = sp + 192|0;
 $66 = sp + 180|0;
 $67 = sp + 168|0;
 $68 = sp + 144|0;
 $69 = sp + 132|0;
 $70 = sp + 120|0;
 $71 = sp + 108|0;
 $72 = sp + 96|0;
 $73 = sp + 84|0;
 $74 = sp + 72|0;
 $75 = sp + 60|0;
 $76 = sp + 48|0;
 $77 = sp + 36|0;
 $78 = sp + 24|0;
 $79 = sp;
 $80 = $1;
 $81 = $0;
 $82 = (($80) - ($81))|0;
 $83 = ($82|0)>(1);
 L1: do {
  if ($83) {
   $84 = ($82|0)>(3);
   if ($84) {
    $85 = HEAP8[$0>>0]|0;
    $86 = ($85<<24>>24)==(103);
    if ($86) {
     $87 = ((($0)) + 1|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)==(115);
     $90 = ((($0)) + 2|0);
     $spec$select558 = $89 ? $90 : $0;
     $$0503 = $spec$select558;$$0504$off0 = $89;
    } else {
     $$0503 = $0;$$0504$off0 = 0;
    }
   } else {
    $$0503 = $0;$$0504$off0 = 0;
   }
   $91 = HEAP8[$$0503>>0]|0;
   $92 = $91 << 24 >> 24;
   do {
    switch ($92|0) {
    case 76:  {
     $93 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $93;
     break L1;
     break;
    }
    case 84:  {
     $94 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $94;
     break L1;
     break;
    }
    case 102:  {
     $95 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $95;
     break L1;
     break;
    }
    case 97:  {
     $96 = ((($$0503)) + 1|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97 << 24 >> 24;
     switch ($98|0) {
     case 97:  {
      $99 = ((($0)) + 2|0);
      ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $100 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3886)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($7,3886,$100);
      $101 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($99,$1,$7,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $102 = ($101|0)==($99|0);
      $spec$select559 = $102 ? $0 : $101;
      $$14 = $spec$select559;
      break L1;
      break;
     }
     case 100:  {
      $103 = ((($0)) + 2|0);
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $104 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3904)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($8,3904,$104);
      $105 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($103,$1,$8,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $106 = ($105|0)==($103|0);
      $spec$select560 = $106 ? $0 : $105;
      $$14 = $spec$select560;
      break L1;
      break;
     }
     case 110:  {
      $107 = ((($0)) + 2|0);
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $108 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3904)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($9,3904,$108);
      $109 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($107,$1,$9,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      $110 = ($109|0)==($107|0);
      $spec$select561 = $110 ? $0 : $109;
      $$14 = $spec$select561;
      break L1;
      break;
     }
     case 78:  {
      $111 = ((($0)) + 2|0);
      ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $112 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3947)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($10,3947,$112);
      $113 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($111,$1,$10,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      $114 = ($113|0)==($111|0);
      $spec$select562 = $114 ? $0 : $113;
      $$14 = $spec$select562;
      break L1;
      break;
     }
     case 83:  {
      $115 = ((($0)) + 2|0);
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $116 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3950)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($11,3950,$116);
      $117 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($115,$1,$11,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $118 = ($117|0)==($115|0);
      $spec$select563 = $118 ? $0 : $117;
      $$14 = $spec$select563;
      break L1;
      break;
     }
     case 116:  {
      $119 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $119;
      break L1;
      break;
     }
     case 122:  {
      $120 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $120;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $121 = ((($$0503)) + 1|0);
     $122 = HEAP8[$121>>0]|0;
     $123 = $122 << 24 >> 24;
     switch ($123|0) {
     case 99:  {
      $124 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $124;
      break L1;
      break;
     }
     case 108:  {
      $125 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $125;
      break L1;
      break;
     }
     case 109:  {
      $126 = ((($0)) + 2|0);
      ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $127 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3952)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($12,3952,$127);
      $128 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($126,$1,$12,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
      $129 = ($128|0)==($126|0);
      $spec$select564 = $129 ? $0 : $128;
      $$14 = $spec$select564;
      break L1;
      break;
     }
     case 111:  {
      $130 = ((($0)) + 2|0);
      ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $131 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3954)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($13,3954,$131);
      $132 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($130,$1,$13,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
      $133 = ($132|0)==($130|0);
      $spec$select565 = $133 ? $0 : $132;
      $$14 = $spec$select565;
      break L1;
      break;
     }
     case 118:  {
      $134 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $134;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $135 = ((($$0503)) + 1|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136 << 24 >> 24;
     switch ($137|0) {
     case 97:  {
      $138 = ((($$0503)) + 2|0);
      $139 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($138,$1,$2)|0);
      $140 = ($139|0)==($138|0);
      if ($140) {
       $$14 = $0;
       break L1;
      }
      $141 = HEAP32[$2>>2]|0;
      $142 = ((($2)) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($141|0)==($143|0);
      if ($144) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      L32: do {
       if ($$0504$off0) {
        $145 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3956)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($16,3956,$145);
       } else {
        $$0$i$i = 0;
        while(1) {
         $exitcond$i$i = ($$0$i$i|0)==(3);
         if ($exitcond$i$i) {
          break L32;
         }
         $146 = (($16) + ($$0$i$i<<2)|0);
         HEAP32[$146>>2] = 0;
         $147 = (($$0$i$i) + 1)|0;
         $$0$i$i = $147;
        }
       }
      } while(0);
      $148 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($16,3959)|0);
      ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $149 = (($16) + ($$0$i$i$i<<2)|0);
       HEAP32[$149>>2] = 0;
       $150 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $150;
      }
      $151 = HEAP32[$142>>2]|0;
      $152 = ((($151)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($17,$152);
      $153 = ((($17)) + 11|0);
      $154 = HEAP8[$153>>0]|0;
      $155 = ($154<<24>>24)<(0);
      $156 = HEAP32[$17>>2]|0;
      $157 = ((($17)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $154&255;
      $160 = $155 ? $156 : $17;
      $161 = $155 ? $158 : $159;
      $162 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($15,$160,$161)|0);
      ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
      $$0$i$i$i599 = 0;
      while(1) {
       $exitcond$i$i$i600 = ($$0$i$i$i599|0)==(3);
       if ($exitcond$i$i$i600) {
        break;
       }
       $163 = (($15) + ($$0$i$i$i599<<2)|0);
       HEAP32[$163>>2] = 0;
       $164 = (($$0$i$i$i599) + 1)|0;
       $$0$i$i$i599 = $164;
      }
      $165 = HEAP32[$142>>2]|0;
      $166 = ((($165)) + -24|0);
      $167 = ((($166)) + 11|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = ($168<<24>>24)<(0);
      if ($169) {
       $170 = HEAP32[$166>>2]|0;
       HEAP8[$5>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($170,$5);
       $171 = ((($165)) + -20|0);
       HEAP32[$171>>2] = 0;
      } else {
       HEAP8[$6>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($166,$6);
       HEAP8[$167>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($166);
      ;HEAP32[$166>>2]=HEAP32[$14>>2]|0;HEAP32[$166+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$166+8>>2]=HEAP32[$14+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $172 = (($14) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$172>>2] = 0;
       $173 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $173;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $$14 = $139;
      break L1;
      break;
     }
     case 99:  {
      $174 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $174;
      break L1;
      break;
     }
     case 101:  {
      $175 = ((($0)) + 2|0);
      ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $176 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3902)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($18,3902,$176);
      $177 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($175,$1,$18,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
      $178 = ($177|0)==($175|0);
      $spec$select566 = $178 ? $0 : $177;
      $$14 = $spec$select566;
      break L1;
      break;
     }
     case 108:  {
      $179 = ((($$0503)) + 2|0);
      $180 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($179,$1,$2)|0);
      $181 = ($180|0)==($179|0);
      if ($181) {
       $$14 = $0;
       break L1;
      }
      $182 = HEAP32[$2>>2]|0;
      $183 = ((($2)) + 4|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ($182|0)==($184|0);
      if ($185) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      L60: do {
       if ($$0504$off0) {
        $186 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3956)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($21,3956,$186);
       } else {
        $$0$i$i602 = 0;
        while(1) {
         $exitcond$i$i603 = ($$0$i$i602|0)==(3);
         if ($exitcond$i$i603) {
          break L60;
         }
         $187 = (($21) + ($$0$i$i602<<2)|0);
         HEAP32[$187>>2] = 0;
         $188 = (($$0$i$i602) + 1)|0;
         $$0$i$i602 = $188;
        }
       }
      } while(0);
      $189 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($21,3969)|0);
      ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;
      $$0$i$i$i605 = 0;
      while(1) {
       $exitcond$i$i$i606 = ($$0$i$i$i605|0)==(3);
       if ($exitcond$i$i$i606) {
        break;
       }
       $190 = (($21) + ($$0$i$i$i605<<2)|0);
       HEAP32[$190>>2] = 0;
       $191 = (($$0$i$i$i605) + 1)|0;
       $$0$i$i$i605 = $191;
      }
      $192 = HEAP32[$183>>2]|0;
      $193 = ((($192)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($22,$193);
      $194 = ((($22)) + 11|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = ($195<<24>>24)<(0);
      $197 = HEAP32[$22>>2]|0;
      $198 = ((($22)) + 4|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = $195&255;
      $201 = $196 ? $197 : $22;
      $202 = $196 ? $199 : $200;
      $203 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($20,$201,$202)|0);
      ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
      $$0$i$i$i609 = 0;
      while(1) {
       $exitcond$i$i$i610 = ($$0$i$i$i609|0)==(3);
       if ($exitcond$i$i$i610) {
        break;
       }
       $204 = (($20) + ($$0$i$i$i609<<2)|0);
       HEAP32[$204>>2] = 0;
       $205 = (($$0$i$i$i609) + 1)|0;
       $$0$i$i$i609 = $205;
      }
      $206 = HEAP32[$183>>2]|0;
      $207 = ((($206)) + -24|0);
      $208 = ((($207)) + 11|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = ($209<<24>>24)<(0);
      if ($210) {
       $211 = HEAP32[$207>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($211,$3);
       $212 = ((($206)) + -20|0);
       HEAP32[$212>>2] = 0;
      } else {
       HEAP8[$4>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($207,$4);
       HEAP8[$208>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($207);
      ;HEAP32[$207>>2]=HEAP32[$19>>2]|0;HEAP32[$207+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$19+8>>2]|0;
      $$0$i$i$i$i615 = 0;
      while(1) {
       $exitcond$i$i$i$i616 = ($$0$i$i$i$i615|0)==(3);
       if ($exitcond$i$i$i$i616) {
        break;
       }
       $213 = (($19) + ($$0$i$i$i$i615<<2)|0);
       HEAP32[$213>>2] = 0;
       $214 = (($$0$i$i$i$i615) + 1)|0;
       $$0$i$i$i$i615 = $214;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      $$14 = $180;
      break L1;
      break;
     }
     case 110:  {
      $215 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $215;
      break L1;
      break;
     }
     case 115:  {
      $216 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $216;
      break L1;
      break;
     }
     case 116:  {
      $217 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $217;
      break L1;
      break;
     }
     case 118:  {
      $218 = ((($0)) + 2|0);
      ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $219 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3977)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($23,3977,$219);
      $220 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($218,$1,$23,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $221 = ($220|0)==($218|0);
      $spec$select567 = $221 ? $0 : $220;
      $$14 = $spec$select567;
      break L1;
      break;
     }
     case 86:  {
      $222 = ((($0)) + 2|0);
      ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $223 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3979)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($24,3979,$223);
      $224 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($222,$1,$24,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
      $225 = ($224|0)==($222|0);
      $spec$select568 = $225 ? $0 : $224;
      $$14 = $spec$select568;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $226 = ((($$0503)) + 1|0);
     $227 = HEAP8[$226>>0]|0;
     $228 = $227 << 24 >> 24;
     switch ($228|0) {
     case 111:  {
      $229 = ((($0)) + 2|0);
      ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $230 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3982)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($25,3982,$230);
      $231 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($229,$1,$25,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
      $232 = ($231|0)==($229|0);
      $spec$select569 = $232 ? $0 : $231;
      $$14 = $spec$select569;
      break L1;
      break;
     }
     case 79:  {
      $233 = ((($0)) + 2|0);
      ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $234 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3984)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($26,3984,$234);
      $235 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($233,$1,$26,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      $236 = ($235|0)==($233|0);
      $spec$select570 = $236 ? $0 : $235;
      $$14 = $spec$select570;
      break L1;
      break;
     }
     case 113:  {
      $237 = ((($0)) + 2|0);
      ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $238 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3987)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($27,3987,$238);
      $239 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($237,$1,$27,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
      $240 = ($239|0)==($237|0);
      $spec$select571 = $240 ? $0 : $239;
      $$14 = $spec$select571;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $241 = ((($$0503)) + 1|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242 << 24 >> 24;
     switch ($243|0) {
     case 101:  {
      $244 = ((($0)) + 2|0);
      ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $245 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3990)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($28,3990,$245);
      $246 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($244,$1,$28,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
      $247 = ($246|0)==($244|0);
      $spec$select572 = $247 ? $0 : $246;
      $$14 = $spec$select572;
      break L1;
      break;
     }
     case 116:  {
      $248 = ((($0)) + 2|0);
      ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
      $249 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3920)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($29,3920,$249);
      $250 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($248,$1,$29,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      $251 = ($250|0)==($248|0);
      $spec$select573 = $251 ? $0 : $250;
      $$14 = $spec$select573;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $252 = ((($$0503)) + 1|0);
     $253 = HEAP8[$252>>0]|0;
     $254 = ($253<<24>>24)==(120);
     if (!($254)) {
      $$14 = $0;
      break L1;
     }
     $255 = ((($0)) + 2|0);
     $256 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($255,$1,$2)|0);
     $257 = ($256|0)==($255|0);
     if ($257) {
      $$14 = $0;
      break L1;
     }
     $258 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($256,$1,$2)|0);
     $259 = ($258|0)==($256|0);
     $260 = ((($2)) + 4|0);
     if ($259) {
      $292 = HEAP32[$260>>2]|0;
      $$0$i$i$idx$i629 = 0;
      while(1) {
       $293 = ($$0$i$i$idx$i629|0)==(-1);
       if ($293) {
        break;
       }
       $$0$i$i$add$i630 = (($$0$i$i$idx$i629) + -1)|0;
       $$ptr$i631 = (($292) + (($$0$i$i$add$i630*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i631);
       $$0$i$i$idx$i629 = $$0$i$i$add$i630;
      }
      $294 = ((($292)) + -24|0);
      HEAP32[$260>>2] = $294;
      $$14 = $0;
      break L1;
     }
     $261 = HEAP32[$260>>2]|0;
     $262 = HEAP32[$2>>2]|0;
     $263 = (($261) - ($262))|0;
     $264 = (($263|0) / 24)&-1;
     $265 = ($264>>>0)<(2);
     if ($265) {
      $$14 = $0;
      break L1;
     }
     $266 = $261;
     $267 = ((($266)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($30,$267);
     $268 = HEAP32[$260>>2]|0;
     $$0$i$i$idx$i = 0;
     while(1) {
      $269 = ($$0$i$i$idx$i|0)==(-1);
      if ($269) {
       break;
      }
      $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
      $$ptr$i = (($268) + (($$0$i$i$add$i*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $270 = ((($268)) + -24|0);
     HEAP32[$260>>2] = $270;
     $271 = ((($268)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($31,$271);
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($36,3884,$31);
     $272 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($36,3993)|0);
     ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;
     $$0$i$i$i618 = 0;
     while(1) {
      $exitcond$i$i$i619 = ($$0$i$i$i618|0)==(3);
      if ($exitcond$i$i$i619) {
       break;
      }
      $273 = (($36) + ($$0$i$i$i618<<2)|0);
      HEAP32[$273>>2] = 0;
      $274 = (($$0$i$i$i618) + 1)|0;
      $$0$i$i$i618 = $274;
     }
     $275 = ((($30)) + 11|0);
     $276 = HEAP8[$275>>0]|0;
     $277 = ($276<<24>>24)<(0);
     $278 = HEAP32[$30>>2]|0;
     $279 = ((($30)) + 4|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $276&255;
     $282 = $277 ? $278 : $30;
     $283 = $277 ? $280 : $281;
     $284 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($35,$282,$283)|0);
     ;HEAP32[$34>>2]=HEAP32[$35>>2]|0;HEAP32[$34+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$35+8>>2]|0;
     $$0$i$i$i622 = 0;
     while(1) {
      $exitcond$i$i$i623 = ($$0$i$i$i622|0)==(3);
      if ($exitcond$i$i$i623) {
       break;
      }
      $285 = (($35) + ($$0$i$i$i622<<2)|0);
      HEAP32[$285>>2] = 0;
      $286 = (($$0$i$i$i622) + 1)|0;
      $$0$i$i$i622 = $286;
     }
     $287 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($34,3931)|0);
     ;HEAP32[$33>>2]=HEAP32[$34>>2]|0;HEAP32[$33+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$34+8>>2]|0;
     $$0$i$i$i625 = 0;
     while(1) {
      $exitcond$i$i$i626 = ($$0$i$i$i625|0)==(3);
      if ($exitcond$i$i$i626) {
       break;
      }
      $288 = (($34) + ($$0$i$i$i625<<2)|0);
      HEAP32[$288>>2] = 0;
      $289 = (($$0$i$i$i625) + 1)|0;
      $$0$i$i$i625 = $289;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($32,$33);
     $290 = HEAP32[$260>>2]|0;
     $291 = ((($290)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($291,$32);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
     $$14 = $258;
     break L1;
     break;
    }
    case 108:  {
     $295 = ((($$0503)) + 1|0);
     $296 = HEAP8[$295>>0]|0;
     $297 = $296 << 24 >> 24;
     switch ($297|0) {
     case 101:  {
      $298 = ((($0)) + 2|0);
      ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;
      $299 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3996)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($37,3996,$299);
      $300 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($298,$1,$37,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
      $301 = ($300|0)==($298|0);
      $spec$select574 = $301 ? $0 : $300;
      $$14 = $spec$select574;
      break L1;
      break;
     }
     case 115:  {
      $302 = ((($0)) + 2|0);
      ;HEAP32[$38>>2]=0|0;HEAP32[$38+4>>2]=0|0;HEAP32[$38+8>>2]=0|0;
      $303 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3999)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($38,3999,$303);
      $304 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($302,$1,$38,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
      $305 = ($304|0)==($302|0);
      $spec$select575 = $305 ? $0 : $304;
      $$14 = $spec$select575;
      break L1;
      break;
     }
     case 83:  {
      $306 = ((($0)) + 2|0);
      ;HEAP32[$39>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;
      $307 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4002)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($39,4002,$307);
      $308 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($306,$1,$39,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
      $309 = ($308|0)==($306|0);
      $spec$select576 = $309 ? $0 : $308;
      $$14 = $spec$select576;
      break L1;
      break;
     }
     case 116:  {
      $310 = ((($0)) + 2|0);
      ;HEAP32[$40>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;
      $311 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3918)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($40,3918,$311);
      $312 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($310,$1,$40,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
      $313 = ($312|0)==($310|0);
      $spec$select577 = $313 ? $0 : $312;
      $$14 = $spec$select577;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $314 = ((($$0503)) + 1|0);
     $315 = HEAP8[$314>>0]|0;
     $316 = $315 << 24 >> 24;
     switch ($316|0) {
     case 105:  {
      $317 = ((($0)) + 2|0);
      ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
      $318 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4006)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($41,4006,$318);
      $319 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($317,$1,$41,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
      $320 = ($319|0)==($317|0);
      $spec$select578 = $320 ? $0 : $319;
      $$14 = $spec$select578;
      break L1;
      break;
     }
     case 73:  {
      $321 = ((($0)) + 2|0);
      ;HEAP32[$42>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;
      $322 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4008)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($42,4008,$322);
      $323 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($321,$1,$42,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
      $324 = ($323|0)==($321|0);
      $spec$select579 = $324 ? $0 : $323;
      $$14 = $spec$select579;
      break L1;
      break;
     }
     case 108:  {
      $325 = ((($0)) + 2|0);
      ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;
      $326 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3902)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($43,3902,$326);
      $327 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($325,$1,$43,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
      $328 = ($327|0)==($325|0);
      $spec$select580 = $328 ? $0 : $327;
      $$14 = $spec$select580;
      break L1;
      break;
     }
     case 76:  {
      $329 = ((($0)) + 2|0);
      ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;
      $330 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4011)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($44,4011,$330);
      $331 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($329,$1,$44,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($44);
      $332 = ($331|0)==($329|0);
      $spec$select581 = $332 ? $0 : $331;
      $$14 = $spec$select581;
      break L1;
      break;
     }
     case 109:  {
      $333 = ((($0)) + 2|0);
      $334 = ($333|0)==($1|0);
      if (!($334)) {
       $335 = HEAP8[$333>>0]|0;
       $336 = ($335<<24>>24)==(95);
       if ($336) {
        $337 = ((($0)) + 3|0);
        ;HEAP32[$45>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;
        $338 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4014)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($45,4014,$338);
        $339 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($337,$1,$45,$2)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
        $340 = ($339|0)==($337|0);
        $spec$select582 = $340 ? $0 : $339;
        $$14 = $spec$select582;
        break L1;
       }
      }
      $341 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($333,$1,$2)|0);
      $342 = ($341|0)==($333|0);
      if ($342) {
       $$14 = $0;
       break L1;
      }
      $343 = HEAP32[$2>>2]|0;
      $344 = ((($2)) + 4|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ($343|0)==($345|0);
      if ($346) {
       $$14 = $0;
       break L1;
      }
      $347 = ((($345)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($49,$347);
      $348 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($49,0,3884)|0);
      ;HEAP32[$48>>2]=HEAP32[$49>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$49+8>>2]|0;
      $$0$i$i$i633 = 0;
      while(1) {
       $exitcond$i$i$i634 = ($$0$i$i$i633|0)==(3);
       if ($exitcond$i$i$i634) {
        break;
       }
       $349 = (($49) + ($$0$i$i$i633<<2)|0);
       HEAP32[$349>>2] = 0;
       $350 = (($$0$i$i$i633) + 1)|0;
       $$0$i$i$i633 = $350;
      }
      $351 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($48,4017)|0);
      ;HEAP32[$47>>2]=HEAP32[$48>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;
      $$0$i$i$i636 = 0;
      while(1) {
       $exitcond$i$i$i637 = ($$0$i$i$i636|0)==(3);
       if ($exitcond$i$i$i637) {
        break;
       }
       $352 = (($48) + ($$0$i$i$i636<<2)|0);
       HEAP32[$352>>2] = 0;
       $353 = (($$0$i$i$i636) + 1)|0;
       $$0$i$i$i636 = $353;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($46,$47);
      $354 = HEAP32[$344>>2]|0;
      $355 = ((($354)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($355,$46);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
      $$14 = $341;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $356 = ((($$0503)) + 1|0);
     $357 = HEAP8[$356>>0]|0;
     $358 = $357 << 24 >> 24;
     switch ($358|0) {
     case 119: case 97:  {
      $359 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $359;
      break L1;
      break;
     }
     case 101:  {
      $360 = ((($0)) + 2|0);
      ;HEAP32[$50>>2]=0|0;HEAP32[$50+4>>2]=0|0;HEAP32[$50+8>>2]=0|0;
      $361 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4021)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($50,4021,$361);
      $362 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($360,$1,$50,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
      $363 = ($362|0)==($360|0);
      $spec$select583 = $363 ? $0 : $362;
      $$14 = $spec$select583;
      break L1;
      break;
     }
     case 103:  {
      $364 = ((($0)) + 2|0);
      ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;HEAP32[$51+8>>2]=0|0;
      $365 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4006)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($51,4006,$365);
      $366 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($364,$1,$51,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
      $367 = ($366|0)==($364|0);
      $spec$select584 = $367 ? $0 : $366;
      $$14 = $spec$select584;
      break L1;
      break;
     }
     case 116:  {
      $368 = ((($0)) + 2|0);
      ;HEAP32[$52>>2]=0|0;HEAP32[$52+4>>2]=0|0;HEAP32[$52+8>>2]=0|0;
      $369 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4024)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($52,4024,$369);
      $370 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($368,$1,$52,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
      $371 = ($370|0)==($368|0);
      $spec$select585 = $371 ? $0 : $370;
      $$14 = $spec$select585;
      break L1;
      break;
     }
     case 120:  {
      $372 = ((($0)) + 2|0);
      $373 = (__ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($372,$1,$2)|0);
      $374 = ($373|0)==($372|0);
      $spec$select586 = $374 ? $0 : $373;
      $$14 = $spec$select586;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $375 = ((($$0503)) + 1|0);
     $376 = HEAP8[$375>>0]|0;
     $377 = $376 << 24 >> 24;
     switch ($377|0) {
     case 110:  {
      $378 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $378;
      break L1;
      break;
     }
     case 111:  {
      $379 = ((($0)) + 2|0);
      ;HEAP32[$53>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;
      $380 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4026)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($53,4026,$380);
      $381 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($379,$1,$53,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
      $382 = ($381|0)==($379|0);
      $spec$select587 = $382 ? $0 : $381;
      $$14 = $spec$select587;
      break L1;
      break;
     }
     case 114:  {
      $383 = ((($0)) + 2|0);
      ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;
      $384 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4029)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($54,4029,$384);
      $385 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($383,$1,$54,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
      $386 = ($385|0)==($383|0);
      $spec$select588 = $386 ? $0 : $385;
      $$14 = $spec$select588;
      break L1;
      break;
     }
     case 82:  {
      $387 = ((($0)) + 2|0);
      ;HEAP32[$55>>2]=0|0;HEAP32[$55+4>>2]=0|0;HEAP32[$55+8>>2]=0|0;
      $388 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4031)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($55,4031,$388);
      $389 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($387,$1,$55,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
      $390 = ($389|0)==($387|0);
      $spec$select589 = $390 ? $0 : $389;
      $$14 = $spec$select589;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $391 = ((($$0503)) + 1|0);
     $392 = HEAP8[$391>>0]|0;
     $393 = $392 << 24 >> 24;
     switch ($393|0) {
     case 109:  {
      $394 = ((($0)) + 2|0);
      ;HEAP32[$56>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
      $395 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4034)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($56,4034,$395);
      $396 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($394,$1,$56,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
      $397 = ($396|0)==($394|0);
      $spec$select590 = $397 ? $0 : $396;
      $$14 = $spec$select590;
      break L1;
      break;
     }
     case 108:  {
      $398 = ((($0)) + 2|0);
      ;HEAP32[$57>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
      $399 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4038)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($57,4038,$399);
      $400 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($398,$1,$57,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
      $401 = ($400|0)==($398|0);
      $spec$select591 = $401 ? $0 : $400;
      $$14 = $spec$select591;
      break L1;
      break;
     }
     case 76:  {
      $402 = ((($0)) + 2|0);
      ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
      $403 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4040)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($58,4040,$403);
      $404 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($402,$1,$58,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
      $405 = ($404|0)==($402|0);
      $spec$select592 = $405 ? $0 : $404;
      $$14 = $spec$select592;
      break L1;
      break;
     }
     case 112:  {
      $406 = ((($0)) + 2|0);
      $407 = ($406|0)==($1|0);
      if (!($407)) {
       $408 = HEAP8[$406>>0]|0;
       $409 = ($408<<24>>24)==(95);
       if ($409) {
        $410 = ((($0)) + 3|0);
        ;HEAP32[$59>>2]=0|0;HEAP32[$59+4>>2]=0|0;HEAP32[$59+8>>2]=0|0;
        $411 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4043)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($59,4043,$411);
        $412 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($410,$1,$59,$2)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
        $413 = ($412|0)==($410|0);
        $spec$select593 = $413 ? $0 : $412;
        $$14 = $spec$select593;
        break L1;
       }
      }
      $414 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($406,$1,$2)|0);
      $415 = ($414|0)==($406|0);
      if ($415) {
       $$14 = $0;
       break L1;
      }
      $416 = HEAP32[$2>>2]|0;
      $417 = ((($2)) + 4|0);
      $418 = HEAP32[$417>>2]|0;
      $419 = ($416|0)==($418|0);
      if ($419) {
       $$14 = $0;
       break L1;
      }
      $420 = ((($418)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($63,$420);
      $421 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($63,0,3884)|0);
      ;HEAP32[$62>>2]=HEAP32[$63>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$63+8>>2]|0;
      $$0$i$i$i640 = 0;
      while(1) {
       $exitcond$i$i$i641 = ($$0$i$i$i640|0)==(3);
       if ($exitcond$i$i$i641) {
        break;
       }
       $422 = (($63) + ($$0$i$i$i640<<2)|0);
       HEAP32[$422>>2] = 0;
       $423 = (($$0$i$i$i640) + 1)|0;
       $$0$i$i$i640 = $423;
      }
      $424 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($62,4046)|0);
      ;HEAP32[$61>>2]=HEAP32[$62>>2]|0;HEAP32[$61+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$62+8>>2]|0;
      $$0$i$i$i644 = 0;
      while(1) {
       $exitcond$i$i$i645 = ($$0$i$i$i644|0)==(3);
       if ($exitcond$i$i$i645) {
        break;
       }
       $425 = (($62) + ($$0$i$i$i644<<2)|0);
       HEAP32[$425>>2] = 0;
       $426 = (($$0$i$i$i644) + 1)|0;
       $$0$i$i$i644 = $426;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($60,$61);
      $427 = HEAP32[$417>>2]|0;
      $428 = ((($427)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($428,$60);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($62);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
      $$14 = $414;
      break L1;
      break;
     }
     case 115:  {
      $429 = ((($0)) + 2|0);
      ;HEAP32[$64>>2]=0|0;HEAP32[$64+4>>2]=0|0;HEAP32[$64+8>>2]=0|0;
      $430 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4038)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($64,4038,$430);
      $431 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($429,$1,$64,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
      $432 = ($431|0)==($429|0);
      $spec$select594 = $432 ? $0 : $431;
      $$14 = $spec$select594;
      break L1;
      break;
     }
     case 116:  {
      $433 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $433;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $434 = ((($$0503)) + 1|0);
     $435 = HEAP8[$434>>0]|0;
     $436 = ($435<<24>>24)==(117);
     if (!($436)) {
      $$14 = $0;
      break L1;
     }
     $437 = ((($0)) + 2|0);
     $438 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($437,$1,$2)|0);
     $439 = ($438|0)==($437|0);
     if ($439) {
      $$14 = $0;
      break L1;
     }
     $440 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($438,$1,$2)|0);
     $441 = ($440|0)==($438|0);
     if ($441) {
      $500 = ((($2)) + 4|0);
      $501 = HEAP32[$500>>2]|0;
      $$0$i$i$idx$i684 = 0;
      while(1) {
       $502 = ($$0$i$i$idx$i684|0)==(-1);
       if ($502) {
        break;
       }
       $$0$i$i$add$i685 = (($$0$i$i$idx$i684) + -1)|0;
       $$ptr$i686 = (($501) + (($$0$i$i$add$i685*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i686);
       $$0$i$i$idx$i684 = $$0$i$i$add$i685;
      }
      $503 = ((($501)) + -24|0);
      HEAP32[$500>>2] = $503;
      $$14 = $0;
      break L1;
     }
     $442 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($440,$1,$2)|0);
     $443 = ($442|0)==($440|0);
     $444 = ((($2)) + 4|0);
     if ($443) {
      $495 = HEAP32[$444>>2]|0;
      $$0$i$i$idx$i676 = 0;
      while(1) {
       $496 = ($$0$i$i$idx$i676|0)==(-1);
       if ($496) {
        break;
       }
       $$0$i$i$add$i677 = (($$0$i$i$idx$i676) + -1)|0;
       $$ptr$i678 = (($495) + (($$0$i$i$add$i677*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i678);
       $$0$i$i$idx$i676 = $$0$i$i$add$i677;
      }
      $497 = ((($495)) + -24|0);
      HEAP32[$444>>2] = $497;
      $$0$i$i$idx$i680 = 0;
      while(1) {
       $498 = ($$0$i$i$idx$i680|0)==(-1);
       if ($498) {
        break;
       }
       $$0$i$i$add$i681 = (($$0$i$i$idx$i680) + -1)|0;
       $$ptr$i682 = (($497) + (($$0$i$i$add$i681*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i682);
       $$0$i$i$idx$i680 = $$0$i$i$add$i681;
      }
      $499 = ((($495)) + -48|0);
      HEAP32[$444>>2] = $499;
      $$14 = $0;
      break L1;
     }
     $445 = HEAP32[$444>>2]|0;
     $446 = HEAP32[$2>>2]|0;
     $447 = (($445) - ($446))|0;
     $448 = (($447|0) / 24)&-1;
     $449 = ($448>>>0)<(3);
     if ($449) {
      $$14 = $0;
      break L1;
     }
     $450 = $445;
     $451 = ((($450)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($65,$451);
     $452 = HEAP32[$444>>2]|0;
     $$0$i$i$idx$i648 = 0;
     while(1) {
      $453 = ($$0$i$i$idx$i648|0)==(-1);
      if ($453) {
       break;
      }
      $$0$i$i$add$i649 = (($$0$i$i$idx$i648) + -1)|0;
      $$ptr$i650 = (($452) + (($$0$i$i$add$i649*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i650);
      $$0$i$i$idx$i648 = $$0$i$i$add$i649;
     }
     $454 = ((($452)) + -24|0);
     HEAP32[$444>>2] = $454;
     $455 = ((($452)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($66,$455);
     $456 = HEAP32[$444>>2]|0;
     $$0$i$i$idx$i652 = 0;
     while(1) {
      $457 = ($$0$i$i$idx$i652|0)==(-1);
      if ($457) {
       break;
      }
      $$0$i$i$add$i653 = (($$0$i$i$idx$i652) + -1)|0;
      $$ptr$i654 = (($456) + (($$0$i$i$add$i653*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i654);
      $$0$i$i$idx$i652 = $$0$i$i$add$i653;
     }
     $458 = ((($456)) + -24|0);
     HEAP32[$444>>2] = $458;
     $459 = ((($456)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($67,$459);
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($74,3884,$67);
     $460 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($74,4050)|0);
     ;HEAP32[$73>>2]=HEAP32[$74>>2]|0;HEAP32[$73+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$74+8>>2]|0;
     $$0$i$i$i656 = 0;
     while(1) {
      $exitcond$i$i$i657 = ($$0$i$i$i656|0)==(3);
      if ($exitcond$i$i$i657) {
       break;
      }
      $461 = (($74) + ($$0$i$i$i656<<2)|0);
      HEAP32[$461>>2] = 0;
      $462 = (($$0$i$i$i656) + 1)|0;
      $$0$i$i$i656 = $462;
     }
     $463 = ((($66)) + 11|0);
     $464 = HEAP8[$463>>0]|0;
     $465 = ($464<<24>>24)<(0);
     $466 = HEAP32[$66>>2]|0;
     $467 = ((($66)) + 4|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = $464&255;
     $470 = $465 ? $466 : $66;
     $471 = $465 ? $468 : $469;
     $472 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($73,$470,$471)|0);
     ;HEAP32[$72>>2]=HEAP32[$73>>2]|0;HEAP32[$72+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$73+8>>2]|0;
     $$0$i$i$i660 = 0;
     while(1) {
      $exitcond$i$i$i661 = ($$0$i$i$i660|0)==(3);
      if ($exitcond$i$i$i661) {
       break;
      }
      $473 = (($73) + ($$0$i$i$i660<<2)|0);
      HEAP32[$473>>2] = 0;
      $474 = (($$0$i$i$i660) + 1)|0;
      $$0$i$i$i660 = $474;
     }
     $475 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($72,4056)|0);
     ;HEAP32[$71>>2]=HEAP32[$72>>2]|0;HEAP32[$71+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$72+8>>2]|0;
     $$0$i$i$i664 = 0;
     while(1) {
      $exitcond$i$i$i665 = ($$0$i$i$i664|0)==(3);
      if ($exitcond$i$i$i665) {
       break;
      }
      $476 = (($72) + ($$0$i$i$i664<<2)|0);
      HEAP32[$476>>2] = 0;
      $477 = (($$0$i$i$i664) + 1)|0;
      $$0$i$i$i664 = $477;
     }
     $478 = ((($65)) + 11|0);
     $479 = HEAP8[$478>>0]|0;
     $480 = ($479<<24>>24)<(0);
     $481 = HEAP32[$65>>2]|0;
     $482 = ((($65)) + 4|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = $479&255;
     $485 = $480 ? $481 : $65;
     $486 = $480 ? $483 : $484;
     $487 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($71,$485,$486)|0);
     ;HEAP32[$70>>2]=HEAP32[$71>>2]|0;HEAP32[$70+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$71+8>>2]|0;
     $$0$i$i$i668 = 0;
     while(1) {
      $exitcond$i$i$i669 = ($$0$i$i$i668|0)==(3);
      if ($exitcond$i$i$i669) {
       break;
      }
      $488 = (($71) + ($$0$i$i$i668<<2)|0);
      HEAP32[$488>>2] = 0;
      $489 = (($$0$i$i$i668) + 1)|0;
      $$0$i$i$i668 = $489;
     }
     $490 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($70,3882)|0);
     ;HEAP32[$69>>2]=HEAP32[$70>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$70+8>>2]|0;
     $$0$i$i$i672 = 0;
     while(1) {
      $exitcond$i$i$i673 = ($$0$i$i$i672|0)==(3);
      if ($exitcond$i$i$i673) {
       break;
      }
      $491 = (($70) + ($$0$i$i$i672<<2)|0);
      HEAP32[$491>>2] = 0;
      $492 = (($$0$i$i$i672) + 1)|0;
      $$0$i$i$i672 = $492;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($68,$69);
     $493 = HEAP32[$444>>2]|0;
     $494 = ((($493)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($494,$68);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($72);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($65);
     $$14 = $442;
     break L1;
     break;
    }
    case 114:  {
     $504 = ((($$0503)) + 1|0);
     $505 = HEAP8[$504>>0]|0;
     $506 = $505 << 24 >> 24;
     switch ($506|0) {
     case 99:  {
      $507 = (__ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $507;
      break L1;
      break;
     }
     case 109:  {
      $508 = ((($0)) + 2|0);
      ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;HEAP32[$75+8>>2]=0|0;
      $509 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4062)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($75,4062,$509);
      $510 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($508,$1,$75,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
      $511 = ($510|0)==($508|0);
      $spec$select595 = $511 ? $0 : $510;
      $$14 = $spec$select595;
      break L1;
      break;
     }
     case 77:  {
      $512 = ((($0)) + 2|0);
      ;HEAP32[$76>>2]=0|0;HEAP32[$76+4>>2]=0|0;HEAP32[$76+8>>2]=0|0;
      $513 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4064)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($76,4064,$513);
      $514 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($512,$1,$76,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
      $515 = ($514|0)==($512|0);
      $spec$select596 = $515 ? $0 : $514;
      $$14 = $spec$select596;
      break L1;
      break;
     }
     case 115:  {
      $516 = ((($0)) + 2|0);
      ;HEAP32[$77>>2]=0|0;HEAP32[$77+4>>2]=0|0;HEAP32[$77+8>>2]=0|0;
      $517 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4067)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($77,4067,$517);
      $518 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($516,$1,$77,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
      $519 = ($518|0)==($516|0);
      $spec$select597 = $519 ? $0 : $518;
      $$14 = $spec$select597;
      break L1;
      break;
     }
     case 83:  {
      $520 = ((($0)) + 2|0);
      ;HEAP32[$78>>2]=0|0;HEAP32[$78+4>>2]=0|0;HEAP32[$78+8>>2]=0|0;
      $521 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4070)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($78,4070,$521);
      $522 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($520,$1,$78,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
      $523 = ($522|0)==($520|0);
      $spec$select598 = $523 ? $0 : $522;
      $$14 = $spec$select598;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $524 = ((($$0503)) + 1|0);
     $525 = HEAP8[$524>>0]|0;
     $526 = $525 << 24 >> 24;
     switch ($526|0) {
     case 99:  {
      $527 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $527;
      break L1;
      break;
     }
     case 112:  {
      $528 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $528;
      break L1;
      break;
     }
     case 114:  {
      $529 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $529;
      break L1;
      break;
     }
     case 116:  {
      $530 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $530;
      break L1;
      break;
     }
     case 122:  {
      $531 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $531;
      break L1;
      break;
     }
     case 90:  {
      $532 = $$0503;
      $533 = (($80) - ($532))|0;
      $534 = ($533|0)>(2);
      if (!($534)) {
       $$14 = $0;
       break L1;
      }
      $535 = ((($$0503)) + 2|0);
      $536 = HEAP8[$535>>0]|0;
      $537 = $536 << 24 >> 24;
      switch ($537|0) {
      case 84:  {
       $538 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $538;
       break L1;
       break;
      }
      case 102:  {
       $539 = (__ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $539;
       break L1;
       break;
      }
      default: {
       $$14 = $0;
       break L1;
      }
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $540 = ((($$0503)) + 1|0);
     $541 = HEAP8[$540>>0]|0;
     $542 = $541 << 24 >> 24;
     switch ($542|0) {
     case 105: case 101:  {
      $543 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $543;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($79,4074);
      $544 = ((($2)) + 4|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ((($2)) + 8|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ($545>>>0)<($547>>>0);
      if ($548) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($545,$79);
       $549 = HEAP32[$544>>2]|0;
       $550 = ((($549)) + 24|0);
       HEAP32[$544>>2] = $550;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$79);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79);
      $551 = ((($0)) + 2|0);
      $$14 = $551;
      break L1;
      break;
     }
     case 119:  {
      $552 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $552;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $553 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $553;
     break L1;
     break;
    }
    default: {
     $$14 = $0;
     break L1;
    }
    }
   } while(0);
  } else {
   $$14 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($0) {
 $0 = $0|0;
 var $$017$off022 = 0, $$01918 = 0, $$020153134 = 0, $$02016 = 0, $$pre = 0, $$pre$phi37Z2D = 0, $$pre$phiZ2D = 0, $$pre36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i2 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2147483647;
  $phitmp$i = (($6) + -1)|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;$15 = $phitmp$i;
 } else {
  $9 = $2&255;
  $11 = $9;$15 = 10;
 }
 $10 = ($11>>>0)<(11);
 $12 = (($11) + 16)|0;
 $13 = $12 & -16;
 $phitmp$i2 = (($13) + -1)|0;
 $spec$select$i = $10 ? 10 : $phitmp$i2;
 $14 = ($spec$select$i|0)==($15|0);
 L5: do {
  if (!($14)) {
   do {
    if ($10) {
     $23 = HEAP32[$0>>2]|0;
     if ($3) {
      $$017$off022 = 0;$$01918 = $23;$$02016 = $0;
      label = 12;
     } else {
      $24 = $2&255;
      $25 = (($24) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$23,$25)|0);
      __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($23);
      label = 15;
     }
    } else {
     $16 = ($spec$select$i>>>0)<=($15>>>0);
     $17 = (($spec$select$i) + 1)|0;
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($17)|0);
     $19 = ($18|0)==(0|0);
     $or$cond = $16 & $19;
     if ($or$cond) {
      break L5;
     }
     $20 = HEAP8[$1>>0]|0;
     $21 = ($20<<24>>24)<(0);
     if ($21) {
      $22 = HEAP32[$0>>2]|0;
      $$017$off022 = 1;$$01918 = $22;$$02016 = $18;
      label = 12;
      break;
     } else {
      $26 = $20&255;
      $27 = (($26) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($18,$0,$27)|0);
      $$pre = ((($0)) + 4|0);
      $$020153134 = $18;$$pre$phi37Z2D = $17;$$pre$phiZ2D = $$pre;
      label = 14;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    $28 = ((($0)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$02016,$$01918,$30)|0);
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($$01918);
    if ($$017$off022) {
     $$pre36 = (($spec$select$i) + 1)|0;
     $$020153134 = $$02016;$$pre$phi37Z2D = $$pre36;$$pre$phiZ2D = $28;
     label = 14;
    } else {
     label = 15;
    }
   }
   if ((label|0) == 14) {
    $31 = $$pre$phi37Z2D | -2147483648;
    $32 = ((($0)) + 8|0);
    HEAP32[$32>>2] = $31;
    HEAP32[$$pre$phiZ2D>>2] = $11;
    HEAP32[$0>>2] = $$020153134;
    break;
   }
   else if ((label|0) == 15) {
    $33 = $11&255;
    HEAP8[$1>>0] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $6 = ((($2)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = (($12) + ($5))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0,$1,$5,$13);
 $14 = HEAP8[$6>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = HEAP32[$2>>2]|0;
 $17 = $15 ? $16 : $2;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0,$17,$12)|0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3>>>0)>(4294967279);
 if ($5) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $6 = ($3>>>0)<(11);
 if ($6) {
  $7 = $2&255;
  $8 = ((($0)) + 11|0);
  HEAP8[$8>>0] = $7;
  $$0 = $0;
 } else {
  $9 = (($3) + 16)|0;
  $10 = $9 & -16;
  $11 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($10)|0);
  HEAP32[$0>>2] = $11;
  $12 = $10 | -2147483648;
  $13 = ((($0)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($0)) + 4|0);
  HEAP32[$14>>2] = $2;
  $$0 = $11;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $15 = (($$0) + ($2)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($15,$4);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i246 = 0, $$0$i$i$i250 = 0, $$0208 = 0, $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i247 = 0, $exitcond$i$i$i251 = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, $or$cond242 = 0, $or$cond264 = 0, $spec$select = 0;
 var $spec$select225 = 0, $spec$select226 = 0, $spec$select227 = 0, $spec$select228 = 0, $spec$select229 = 0, $spec$select230 = 0, $spec$select231 = 0, $spec$select232 = 0, $spec$select233 = 0, $spec$select234 = 0, $spec$select235 = 0, $spec$select236 = 0, $spec$select237 = 0, $spec$select238 = 0, $spec$select239 = 0, $spec$select240 = 0, $spec$select241 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $3 = sp + 296|0;
 $4 = sp + 272|0;
 $5 = sp + 248|0;
 $6 = sp + 232|0;
 $7 = sp + 220|0;
 $8 = sp + 208|0;
 $9 = sp + 196|0;
 $10 = sp + 184|0;
 $11 = sp + 172|0;
 $12 = sp + 160|0;
 $13 = sp + 148|0;
 $14 = sp + 136|0;
 $15 = sp + 124|0;
 $16 = sp + 112|0;
 $17 = sp + 100|0;
 $18 = sp + 88|0;
 $19 = sp + 64|0;
 $20 = sp + 48|0;
 $21 = sp + 36|0;
 $22 = sp + 24|0;
 $23 = sp + 12|0;
 $24 = sp;
 $25 = $1;
 $26 = $0;
 $27 = (($25) - ($26))|0;
 $28 = ($27|0)>(3);
 L1: do {
  if ($28) {
   $29 = HEAP8[$0>>0]|0;
   $30 = ($29<<24>>24)==(76);
   if ($30) {
    $31 = ((($0)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    do {
     switch ($33|0) {
     case 84:  {
      $$3 = $0;
      break L1;
      break;
     }
     case 119:  {
      $34 = ((($0)) + 2|0);
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $35 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5076)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3,5076,$35);
      $36 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($34,$1,$3,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $37 = ($36|0)==($34|0);
      $spec$select = $37 ? $0 : $36;
      $$3 = $spec$select;
      break L1;
      break;
     }
     case 98:  {
      $38 = ((($0)) + 3|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = ($39<<24>>24)==(69);
      if (!($40)) {
       $$3 = $0;
       break L1;
      }
      $41 = ((($0)) + 2|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42 << 24 >> 24;
      switch ($43|0) {
      case 48:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($4,5084);
       $44 = ((($2)) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($2)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45>>>0)<($47>>>0);
       if ($48) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45,$4);
        $49 = HEAP32[$44>>2]|0;
        $50 = ((($49)) + 24|0);
        HEAP32[$44>>2] = $50;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $51 = ((($0)) + 4|0);
       $$3 = $51;
       break L1;
       break;
      }
      case 49:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($5,5090);
       $52 = ((($2)) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($2)) + 8|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($53>>>0)<($55>>>0);
       if ($56) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($53,$5);
        $57 = HEAP32[$52>>2]|0;
        $58 = ((($57)) + 24|0);
        HEAP32[$52>>2] = $58;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $59 = ((($0)) + 4|0);
       $$3 = $59;
       break L1;
       break;
      }
      default: {
       $$3 = $0;
       break L1;
      }
      }
      break;
     }
     case 99:  {
      $60 = ((($0)) + 2|0);
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $61 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5095)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6,5095,$61);
      $62 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($60,$1,$6,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $63 = ($62|0)==($60|0);
      $spec$select225 = $63 ? $0 : $62;
      $$3 = $spec$select225;
      break L1;
      break;
     }
     case 97:  {
      $64 = ((($0)) + 2|0);
      ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $65 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5100)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($7,5100,$65);
      $66 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($64,$1,$7,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $67 = ($66|0)==($64|0);
      $spec$select226 = $67 ? $0 : $66;
      $$3 = $spec$select226;
      break L1;
      break;
     }
     case 104:  {
      $68 = ((($0)) + 2|0);
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $69 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5112)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($8,5112,$69);
      $70 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($68,$1,$8,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $71 = ($70|0)==($68|0);
      $spec$select227 = $71 ? $0 : $70;
      $$3 = $spec$select227;
      break L1;
      break;
     }
     case 115:  {
      $72 = ((($0)) + 2|0);
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $73 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5126)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($9,5126,$73);
      $74 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($72,$1,$9,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      $75 = ($74|0)==($72|0);
      $spec$select228 = $75 ? $0 : $74;
      $$3 = $spec$select228;
      break L1;
      break;
     }
     case 116:  {
      $76 = ((($0)) + 2|0);
      ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $77 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5132)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($10,5132,$77);
      $78 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($76,$1,$10,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      $79 = ($78|0)==($76|0);
      $spec$select229 = $79 ? $0 : $78;
      $$3 = $spec$select229;
      break L1;
      break;
     }
     case 105:  {
      $80 = ((($0)) + 2|0);
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $81 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7396)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($11,7396,$81);
      $82 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($80,$1,$11,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $83 = ($82|0)==($80|0);
      $spec$select230 = $83 ? $0 : $82;
      $$3 = $spec$select230;
      break L1;
      break;
     }
     case 106:  {
      $84 = ((($0)) + 2|0);
      ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $85 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5147)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($12,5147,$85);
      $86 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($84,$1,$12,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
      $87 = ($86|0)==($84|0);
      $spec$select231 = $87 ? $0 : $86;
      $$3 = $spec$select231;
      break L1;
      break;
     }
     case 108:  {
      $88 = ((($0)) + 2|0);
      ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $89 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5149)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($13,5149,$89);
      $90 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($88,$1,$13,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
      $91 = ($90|0)==($88|0);
      $spec$select232 = $91 ? $0 : $90;
      $$3 = $spec$select232;
      break L1;
      break;
     }
     case 109:  {
      $92 = ((($0)) + 2|0);
      ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
      $93 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5151)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($14,5151,$93);
      $94 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($92,$1,$14,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
      $95 = ($94|0)==($92|0);
      $spec$select233 = $95 ? $0 : $94;
      $$3 = $spec$select233;
      break L1;
      break;
     }
     case 120:  {
      $96 = ((($0)) + 2|0);
      ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
      $97 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5154)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($15,5154,$97);
      $98 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($96,$1,$15,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
      $99 = ($98|0)==($96|0);
      $spec$select234 = $99 ? $0 : $98;
      $$3 = $spec$select234;
      break L1;
      break;
     }
     case 121:  {
      $100 = ((($0)) + 2|0);
      ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      $101 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5157)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($16,5157,$101);
      $102 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($100,$1,$16,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $103 = ($102|0)==($100|0);
      $spec$select235 = $103 ? $0 : $102;
      $$3 = $spec$select235;
      break L1;
      break;
     }
     case 110:  {
      $104 = ((($0)) + 2|0);
      ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
      $105 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5161)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($17,5161,$105);
      $106 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($104,$1,$17,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
      $107 = ($106|0)==($104|0);
      $spec$select236 = $107 ? $0 : $106;
      $$3 = $spec$select236;
      break L1;
      break;
     }
     case 111:  {
      $108 = ((($0)) + 2|0);
      ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $109 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5170)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($18,5170,$109);
      $110 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($108,$1,$18,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
      $111 = ($110|0)==($108|0);
      $spec$select237 = $111 ? $0 : $110;
      $$3 = $spec$select237;
      break L1;
      break;
     }
     case 102:  {
      $112 = ((($0)) + 2|0);
      $113 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($112,$1,$2)|0);
      $114 = ($113|0)==($112|0);
      $spec$select238 = $114 ? $0 : $113;
      $$3 = $spec$select238;
      break L1;
      break;
     }
     case 100:  {
      $115 = ((($0)) + 2|0);
      $116 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($115,$1,$2)|0);
      $117 = ($116|0)==($115|0);
      $spec$select239 = $117 ? $0 : $116;
      $$3 = $spec$select239;
      break L1;
      break;
     }
     case 101:  {
      $118 = ((($0)) + 2|0);
      $119 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($118,$1,$2)|0);
      $120 = ($119|0)==($118|0);
      $spec$select240 = $120 ? $0 : $119;
      $$3 = $spec$select240;
      break L1;
      break;
     }
     case 95:  {
      $121 = ((($0)) + 2|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = ($122<<24>>24)==(90);
      if (!($123)) {
       $$3 = $0;
       break L1;
      }
      $124 = ((($0)) + 3|0);
      $125 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($124,$1,$2)|0);
      $126 = ($125|0)==($124|0);
      $127 = ($125|0)==($1|0);
      $or$cond = $126 | $127;
      if ($or$cond) {
       $$3 = $0;
       break L1;
      }
      $128 = HEAP8[$125>>0]|0;
      $129 = ($128<<24>>24)==(69);
      $130 = ((($125)) + 1|0);
      $spec$select241 = $129 ? $130 : $0;
      $$3 = $spec$select241;
      break L1;
      break;
     }
     default: {
      $131 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($31,$1,$2)|0);
      $132 = ($131|0)==($31|0);
      $133 = ($131|0)==($1|0);
      $or$cond242 = $132 | $133;
      if ($or$cond242) {
       $$3 = $0;
       break L1;
      }
      $134 = HEAP8[$131>>0]|0;
      $135 = ($134<<24>>24)==(69);
      if ($135) {
       $168 = ((($131)) + 1|0);
       $$3 = $168;
       break L1;
      }
      $$0208 = $131;
      while(1) {
       $136 = ($$0208|0)==($1|0);
       if ($136) {
        $$3 = $0;
        break L1;
       }
       $137 = HEAP8[$$0208>>0]|0;
       $138 = $137 << 24 >> 24;
       $isdigittmp = (($138) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if (!($isdigit)) {
        break;
       }
       $139 = ((($$0208)) + 1|0);
       $$0208 = $139;
      }
      $140 = ($$0208|0)!=($131|0);
      $141 = ($137<<24>>24)==(69);
      $or$cond264 = $140 & $141;
      if (!($or$cond264)) {
       $$3 = $0;
       break L1;
      }
      $142 = HEAP32[$2>>2]|0;
      $143 = ((($2)) + 4|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $$3 = $0;
       break L1;
      }
      $146 = ((($144)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$146);
      $147 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($23,0,3884)|0);
      ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $148 = (($23) + ($$0$i$i$i<<2)|0);
       HEAP32[$148>>2] = 0;
       $149 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $149;
      }
      $150 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($22,3882)|0);
      ;HEAP32[$21>>2]=HEAP32[$22>>2]|0;HEAP32[$21+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$22+8>>2]|0;
      $$0$i$i$i246 = 0;
      while(1) {
       $exitcond$i$i$i247 = ($$0$i$i$i246|0)==(3);
       if ($exitcond$i$i$i247) {
        break;
       }
       $151 = (($22) + ($$0$i$i$i246<<2)|0);
       HEAP32[$151>>2] = 0;
       $152 = (($$0$i$i$i246) + 1)|0;
       $$0$i$i$i246 = $152;
      }
      ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($24,$131,$$0208);
      $153 = ((($24)) + 11|0);
      $154 = HEAP8[$153>>0]|0;
      $155 = ($154<<24>>24)<(0);
      $156 = HEAP32[$24>>2]|0;
      $157 = ((($24)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $154&255;
      $160 = $155 ? $156 : $24;
      $161 = $155 ? $158 : $159;
      $162 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($21,$160,$161)|0);
      ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;
      $$0$i$i$i250 = 0;
      while(1) {
       $exitcond$i$i$i251 = ($$0$i$i$i250|0)==(3);
       if ($exitcond$i$i$i251) {
        break;
       }
       $163 = (($21) + ($$0$i$i$i250<<2)|0);
       HEAP32[$163>>2] = 0;
       $164 = (($$0$i$i$i250) + 1)|0;
       $$0$i$i$i250 = $164;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19,$20);
      $165 = HEAP32[$143>>2]|0;
      $166 = ((($165)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($166,$19);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $167 = ((($$0208)) + 1|0);
      $$3 = $167;
      break L1;
     }
     }
    } while(0);
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i56 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 104|0;
 $4 = sp + 80|0;
 $5 = sp + 64|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = $1;
 $12 = $0;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)>(2);
 L1: do {
  if ($14) {
   $15 = HEAP8[$0>>0]|0;
   $16 = ($15<<24>>24)==(102);
   if ($16) {
    $17 = ((($0)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    switch ($18<<24>>24) {
    case 112:  {
     $19 = ((($0)) + 2|0);
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($19,$1,$3)|0);
     $21 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($20,$1)|0);
     $22 = ($21|0)==($1|0);
     if ($22) {
      $$0 = $0;
     } else {
      $23 = HEAP8[$21>>0]|0;
      $24 = ($23<<24>>24)==(95);
      if ($24) {
       ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6,$20,$21);
       $25 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,5073)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $26 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$26>>2] = 0;
        $27 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $27;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $28 = ((($2)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ((($2)) + 8|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29>>>0)<($31>>>0);
       if ($32) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($29,$4);
        $33 = HEAP32[$28>>2]|0;
        $34 = ((($33)) + 24|0);
        HEAP32[$28>>2] = $34;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $35 = ((($21)) + 1|0);
       $$0 = $35;
      } else {
       $$0 = $0;
      }
     }
     $$3 = $$0;
     break L1;
     break;
    }
    case 76:  {
     break;
    }
    default: {
     $$3 = $0;
     break L1;
    }
    }
    $36 = ((($0)) + 2|0);
    $37 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($36,$1)|0);
    $38 = ($37|0)==($1|0);
    if ($38) {
     $$2 = $0;
    } else {
     $39 = HEAP8[$37>>0]|0;
     $40 = ($39<<24>>24)==(112);
     if ($40) {
      $41 = ((($37)) + 1|0);
      $42 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($41,$1,$7)|0);
      $43 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($42,$1)|0);
      $44 = ($43|0)==($1|0);
      if ($44) {
       $$2 = $0;
      } else {
       $45 = HEAP8[$43>>0]|0;
       $46 = ($45<<24>>24)==(95);
       if ($46) {
        ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($10,$42,$43);
        $47 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($10,0,5073)|0);
        ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
        $$0$i$i$i56 = 0;
        while(1) {
         $exitcond$i$i$i57 = ($$0$i$i$i56|0)==(3);
         if ($exitcond$i$i$i57) {
          break;
         }
         $48 = (($10) + ($$0$i$i$i56<<2)|0);
         HEAP32[$48>>2] = 0;
         $49 = (($$0$i$i$i56) + 1)|0;
         $$0$i$i$i56 = $49;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
        $50 = ((($2)) + 4|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ((($2)) + 8|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($51>>>0)<($53>>>0);
        if ($54) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($51,$8);
         $55 = HEAP32[$50>>2]|0;
         $56 = ((($55)) + 24|0);
         HEAP32[$50>>2] = $56;
        } else {
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
        $57 = ((($43)) + 1|0);
        $$2 = $57;
       } else {
        $$2 = $0;
       }
      }
     } else {
      $$2 = $0;
     }
    }
    $$3 = $$2;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i71 = 0, $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i70 = 0, $$1 = 0, $$ptr$i = 0, $$ptr$i72 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 97|0;
 $5 = sp + 96|0;
 $6 = sp + 84|0;
 $7 = sp + 72|0;
 $8 = sp + 60|0;
 $9 = sp + 48|0;
 $10 = sp + 36|0;
 $11 = sp + 24|0;
 $12 = sp + 12|0;
 $13 = sp;
 $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $15 = ($14|0)==($0|0);
 do {
  if ($15) {
   $$1 = $0;
  } else {
   $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$3)|0);
   $17 = ($16|0)==($14|0);
   $18 = ((($3)) + 4|0);
   if ($17) {
    $97 = HEAP32[$18>>2]|0;
    $$0$i$i$idx$i70 = 0;
    while(1) {
     $98 = ($$0$i$i$idx$i70|0)==(-1);
     if ($98) {
      break;
     }
     $$0$i$i$add$i71 = (($$0$i$i$idx$i70) + -1)|0;
     $$ptr$i72 = (($97) + (($$0$i$i$add$i71*24)|0)|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i72);
     $$0$i$i$idx$i70 = $$0$i$i$add$i71;
    }
    $99 = ((($97)) + -24|0);
    HEAP32[$18>>2] = $99;
    $$1 = $0;
    break;
   }
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$3>>2]|0;
   $21 = (($19) - ($20))|0;
   $22 = (($21|0) / 24)&-1;
   $23 = ($22>>>0)<(2);
   if ($23) {
    $$1 = $0;
   } else {
    $24 = $19;
    $25 = ((($24)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$25);
    $26 = HEAP32[$18>>2]|0;
    $$0$i$i$idx$i = 0;
    while(1) {
     $27 = ($$0$i$i$idx$i|0)==(-1);
     if ($27) {
      break;
     }
     $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
     $$ptr$i = (($26) + (($$0$i$i$add$i*24)|0)|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    $28 = ((($26)) + -24|0);
    HEAP32[$18>>2] = $28;
    $29 = ((($26)) + -48|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$29);
    $30 = HEAP32[$18>>2]|0;
    $31 = ((($30)) + -24|0);
    $32 = ((($31)) + 11|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)<(0);
    if ($34) {
     $35 = HEAP32[$31>>2]|0;
     HEAP8[$4>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
     $36 = ((($30)) + -20|0);
     HEAP32[$36>>2] = 0;
    } else {
     HEAP8[$5>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31,$5);
     HEAP8[$32>>0] = 0;
    }
    $37 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3920)|0);
    $38 = ((($2)) + 11|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)<(0);
    $41 = ((($2)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $39&255;
    $44 = $40 ? $42 : $43;
    $45 = ($37|0)==($44|0);
    if ($45) {
     $46 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($2,3920,$37)|0);
     $47 = ($46|0)==(0);
     if ($47) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31,40);
     }
    }
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($13,3884,$7);
    $48 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($13,4170)|0);
    ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $49 = (($13) + ($$0$i$i$i<<2)|0);
     HEAP32[$49>>2] = 0;
     $50 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $50;
    }
    $51 = HEAP8[$38>>0]|0;
    $52 = ($51<<24>>24)<(0);
    $53 = HEAP32[$2>>2]|0;
    $54 = HEAP32[$41>>2]|0;
    $55 = $51&255;
    $56 = $52 ? $53 : $2;
    $57 = $52 ? $54 : $55;
    $58 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($12,$56,$57)|0);
    ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;
    $$0$i$i$i50 = 0;
    while(1) {
     $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
     if ($exitcond$i$i$i51) {
      break;
     }
     $59 = (($12) + ($$0$i$i$i50<<2)|0);
     HEAP32[$59>>2] = 0;
     $60 = (($$0$i$i$i50) + 1)|0;
     $$0$i$i$i50 = $60;
    }
    $61 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11,3879)|0);
    ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
    $$0$i$i$i53 = 0;
    while(1) {
     $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
     if ($exitcond$i$i$i54) {
      break;
     }
     $62 = (($11) + ($$0$i$i$i53<<2)|0);
     HEAP32[$62>>2] = 0;
     $63 = (($$0$i$i$i53) + 1)|0;
     $$0$i$i$i53 = $63;
    }
    $64 = ((($6)) + 11|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = ($65<<24>>24)<(0);
    $67 = HEAP32[$6>>2]|0;
    $68 = ((($6)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $65&255;
    $71 = $66 ? $67 : $6;
    $72 = $66 ? $69 : $70;
    $73 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($10,$71,$72)|0);
    ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
    $$0$i$i$i57 = 0;
    while(1) {
     $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
     if ($exitcond$i$i$i58) {
      break;
     }
     $74 = (($10) + ($$0$i$i$i57<<2)|0);
     HEAP32[$74>>2] = 0;
     $75 = (($$0$i$i$i57) + 1)|0;
     $$0$i$i$i57 = $75;
    }
    $76 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9,3882)|0);
    ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
    $$0$i$i$i61 = 0;
    while(1) {
     $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
     if ($exitcond$i$i$i62) {
      break;
     }
     $77 = (($9) + ($$0$i$i$i61<<2)|0);
     HEAP32[$77>>2] = 0;
     $78 = (($$0$i$i$i61) + 1)|0;
     $$0$i$i$i61 = $78;
    }
    $79 = ((($8)) + 11|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$8>>2]|0;
    $83 = ((($8)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $80&255;
    $86 = $81 ? $82 : $8;
    $87 = $81 ? $84 : $85;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($31,$86,$87)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
    $88 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3920)|0);
    $89 = HEAP8[$38>>0]|0;
    $90 = ($89<<24>>24)<(0);
    $91 = HEAP32[$41>>2]|0;
    $92 = $89&255;
    $93 = $90 ? $91 : $92;
    $94 = ($88|0)==($93|0);
    if ($94) {
     $95 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($2,3920,$88)|0);
     $96 = ($95|0)==(0);
     if ($96) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31,41);
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $16;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 49|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $11 = ($10|0)==($0|0);
 if ($11) {
  $$018 = $0;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = ((($3)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)==($14|0);
  if ($15) {
   $$018 = $0;
  } else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($8,$2,3884);
   $16 = HEAP32[$13>>2]|0;
   $17 = ((($16)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$17);
   $18 = ((($9)) + 11|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = HEAP32[$9>>2]|0;
   $22 = ((($9)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $19&255;
   $25 = $20 ? $21 : $9;
   $26 = $20 ? $23 : $24;
   $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($8,$25,$26)|0);
   ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $28 = (($8) + ($$0$i$i$i<<2)|0);
    HEAP32[$28>>2] = 0;
    $29 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $29;
   }
   $30 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,3882)|0);
   ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
   $$0$i$i$i20 = 0;
   while(1) {
    $exitcond$i$i$i21 = ($$0$i$i$i20|0)==(3);
    if ($exitcond$i$i$i21) {
     break;
    }
    $31 = (($7) + ($$0$i$i$i20<<2)|0);
    HEAP32[$31>>2] = 0;
    $32 = (($$0$i$i$i20) + 1)|0;
    $$0$i$i$i20 = $32;
   }
   $33 = HEAP32[$13>>2]|0;
   $34 = ((($33)) + -24|0);
   $35 = ((($34)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if ($37) {
    $38 = HEAP32[$34>>2]|0;
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($38,$4);
    $39 = ((($33)) + -20|0);
    HEAP32[$39>>2] = 0;
   } else {
    HEAP8[$5>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($34,$5);
    HEAP8[$35>>0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($34);
   ;HEAP32[$34>>2]=HEAP32[$6>>2]|0;HEAP32[$34+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$6+8>>2]|0;
   $$0$i$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
    if ($exitcond$i$i$i$i) {
     break;
    }
    $40 = (($6) + ($$0$i$i$i$i<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i$i$i) + 1)|0;
    $$0$i$i$i$i = $41;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   $$018 = $10;
  }
 }
 STACKTOP = sp;return ($$018|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(2);
 if ($11) {
  $12 = HEAP8[$0>>0]|0;
  $13 = ($12<<24>>24)==(97);
  if ($13) {
   $14 = ((($0)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(116);
   if ($16) {
    $17 = ((($0)) + 2|0);
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
    $19 = ($18|0)==($17|0);
    if ($19) {
     $$1 = $0;
    } else {
     $20 = HEAP32[$2>>2]|0;
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)==($22|0);
     if ($23) {
      $$1 = $0;
     } else {
      $24 = ((($22)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$24);
      $25 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7,0,5063)|0);
      ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $26 = (($7) + ($$0$i$i$i<<2)|0);
       HEAP32[$26>>2] = 0;
       $27 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $27;
      }
      $28 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i25 = 0;
      while(1) {
       $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
       if ($exitcond$i$i$i26) {
        break;
       }
       $29 = (($6) + ($$0$i$i$i25<<2)|0);
       HEAP32[$29>>2] = 0;
       $30 = (($$0$i$i$i25) + 1)|0;
       $$0$i$i$i25 = $30;
      }
      $31 = HEAP32[$21>>2]|0;
      $32 = ((($31)) + -24|0);
      $33 = ((($32)) + 11|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)<(0);
      if ($35) {
       $36 = HEAP32[$32>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($36,$3);
       $37 = ((($31)) + -20|0);
       HEAP32[$37>>2] = 0;
      } else {
       HEAP8[$4>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($32,$4);
       HEAP8[$33>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($32);
      ;HEAP32[$32>>2]=HEAP32[$5>>2]|0;HEAP32[$32+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $38 = (($5) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$38>>2] = 0;
       $39 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $39;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$1 = $18;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(2);
 if ($11) {
  $12 = HEAP8[$0>>0]|0;
  $13 = ($12<<24>>24)==(97);
  if ($13) {
   $14 = ((($0)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(122);
   if ($16) {
    $17 = ((($0)) + 2|0);
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
    $19 = ($18|0)==($17|0);
    if ($19) {
     $$1 = $0;
    } else {
     $20 = HEAP32[$2>>2]|0;
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)==($22|0);
     if ($23) {
      $$1 = $0;
     } else {
      $24 = ((($22)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$24);
      $25 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7,0,5063)|0);
      ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $26 = (($7) + ($$0$i$i$i<<2)|0);
       HEAP32[$26>>2] = 0;
       $27 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $27;
      }
      $28 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i25 = 0;
      while(1) {
       $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
       if ($exitcond$i$i$i26) {
        break;
       }
       $29 = (($6) + ($$0$i$i$i25<<2)|0);
       HEAP32[$29>>2] = 0;
       $30 = (($$0$i$i$i25) + 1)|0;
       $$0$i$i$i25 = $30;
      }
      $31 = HEAP32[$21>>2]|0;
      $32 = ((($31)) + -24|0);
      $33 = ((($32)) + 11|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)<(0);
      if ($35) {
       $36 = HEAP32[$32>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($36,$3);
       $37 = ((($31)) + -20|0);
       HEAP32[$37>>2] = 0;
      } else {
       HEAP8[$4>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($32,$4);
       HEAP8[$33>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($32);
      ;HEAP32[$32>>2]=HEAP32[$5>>2]|0;HEAP32[$32+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $38 = (($5) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$38>>2] = 0;
       $39 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $39;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$1 = $18;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(99);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $33 = ($$0$i$i$idx$i|0)==(-1);
        if ($33) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($32) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $34 = ((($32)) + -24|0);
       HEAP32[$24>>2] = $34;
       $35 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$35);
       $36 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,5051)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $37 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$37>>2] = 0;
        $38 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $38;
       }
       $39 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,4131)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $40 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $41;
       }
       $42 = ((($3)) + 11|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)<(0);
       $45 = HEAP32[$3>>2]|0;
       $46 = ((($3)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $43&255;
       $49 = $44 ? $45 : $3;
       $50 = $44 ? $47 : $48;
       $51 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$49,$50)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $52 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$52>>2] = 0;
        $53 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $53;
       }
       $54 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $55 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$55>>2] = 0;
        $56 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $56;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $57 = HEAP32[$24>>2]|0;
       $58 = ((($57)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($58,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$063 = 0, $$066 = 0, $$1 = 0, $$164 = 0, $$6 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $or$cond = 0, $or$cond77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 25|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(3);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(99);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(108);
    if ($15) {
     $16 = ((($0)) + 2|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $18 = ($17|0)==($16|0);
     $19 = ($17|0)==($1|0);
     $or$cond77 = $18 | $19;
     if ($or$cond77) {
      $$6 = $0;
     } else {
      $20 = HEAP32[$2>>2]|0;
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $$6 = $0;
      } else {
       $24 = ((($22)) + -12|0);
       $25 = ((($22)) + -24|0);
       $26 = ((($24)) + 11|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)<(0);
       $29 = HEAP32[$24>>2]|0;
       $30 = ((($22)) + -8|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $27&255;
       $33 = $28 ? $29 : $24;
       $34 = $28 ? $31 : $32;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($25,$33,$34)|0);
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $35 = (($5) + ($$0$i$i<<2)|0);
        HEAP32[$35>>2] = 0;
        $36 = (($$0$i$i) + 1)|0;
        $$0$i$i = $36;
       }
       $37 = HEAP32[$21>>2]|0;
       $38 = ((($37)) + -12|0);
       $39 = ((($38)) + 11|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = ($40<<24>>24)<(0);
       if ($41) {
        $42 = HEAP32[$38>>2]|0;
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($42,$3);
        $43 = ((($37)) + -8|0);
        HEAP32[$43>>2] = 0;
       } else {
        HEAP8[$4>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($38,$4);
        HEAP8[$39>>0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($38);
       ;HEAP32[$38>>2]=HEAP32[$5>>2]|0;HEAP32[$38+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $44 = (($5) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$44>>2] = 0;
        $45 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $45;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $46 = HEAP32[$21>>2]|0;
       $47 = ((($46)) + -24|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($47,3884)|0);
       $48 = ((($6)) + 11|0);
       $49 = ((($6)) + 4|0);
       $$0 = 0;$$063 = $17;
       while(1) {
        $50 = HEAP8[$$063>>0]|0;
        $51 = ($50<<24>>24)==(69);
        if ($51) {
         break;
        }
        $52 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063,$1,$2)|0);
        $53 = ($52|0)==($$063|0);
        $54 = ($52|0)==($1|0);
        $or$cond = $53 | $54;
        if ($or$cond) {
         $$6 = $0;
         break L1;
        }
        $55 = HEAP32[$2>>2]|0;
        $56 = HEAP32[$21>>2]|0;
        $57 = ($55|0)==($56|0);
        if ($57) {
         $$6 = $0;
         break L1;
        }
        $58 = ((($56)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$58);
        $59 = HEAP32[$21>>2]|0;
        $$0$i$i$idx$i = 0;
        while(1) {
         $60 = ($$0$i$i$idx$i|0)==(-1);
         if ($60) {
          break;
         }
         $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
         $$ptr$i = (($59) + (($$0$i$i$add$i*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
         $$0$i$i$idx$i = $$0$i$i$add$i;
        }
        $61 = ((($59)) + -24|0);
        HEAP32[$21>>2] = $61;
        $62 = HEAP8[$48>>0]|0;
        $63 = ($62<<24>>24)<(0);
        $64 = HEAP32[$49>>2]|0;
        $65 = $62&255;
        $66 = $63 ? $64 : $65;
        $67 = ($66|0)==(0);
        if ($67) {
         $$066 = 1;$$1 = $$0;$$164 = $52;
        } else {
         $68 = HEAP32[$2>>2]|0;
         $69 = ($68|0)==($61|0);
         if ($69) {
          $$066 = 0;$$1 = $0;$$164 = $$063;
         } else {
          $70 = ((($59)) + -48|0);
          $71 = HEAP32[$6>>2]|0;
          $72 = $63 ? $71 : $6;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($70,$72,$66)|0);
          $$066 = 1;$$1 = $$0;$$164 = $52;
         }
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        if ($$066) {
         $$0 = $$1;$$063 = $$164;
        } else {
         $$6 = $$1;
         break L1;
        }
       }
       $73 = HEAP32[$2>>2]|0;
       $74 = HEAP32[$21>>2]|0;
       $75 = ($73|0)==($74|0);
       if ($75) {
        $$6 = $0;
       } else {
        $76 = ((($$063)) + 1|0);
        $77 = ((($74)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($77,3882)|0);
        $$6 = $76;
       }
      }
     }
    } else {
     $$6 = $0;
    }
   } else {
    $$6 = $0;
   }
  } else {
   $$6 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$0$i$i$idx$i = 0, $$10 = 0, $$1100 = 0, $$4103 = 0, $$5104 = 0, $$pr = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i108 = 0, $exitcond$i$i$i111 = 0, $exitcond$i$i$i114 = 0, $or$cond = 0, $or$cond106 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(99);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(118);
    if ($18) {
     $19 = ((($2)) + 63|0);
     $20 = HEAP8[$19>>0]|0;
     HEAP8[$19>>0] = 0;
     $21 = ((($0)) + 2|0);
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21,$1,$2)|0);
     HEAP8[$19>>0] = $20;
     $23 = ($22|0)==($21|0);
     $24 = ($22|0)==($1|0);
     $or$cond = $23 | $24;
     if ($or$cond) {
      $$10 = $0;
     } else {
      $25 = HEAP8[$22>>0]|0;
      $26 = ($25<<24>>24)==(95);
      if ($26) {
       $29 = ((($22)) + 1|0);
       $30 = ($29|0)==($1|0);
       if ($30) {
        $$10 = $0;
        break;
       }
       $31 = HEAP8[$29>>0]|0;
       $32 = ($31<<24>>24)==(69);
       L9: do {
        if ($32) {
         $33 = ((($2)) + 4|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($2)) + 8|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34>>>0)<($36>>>0);
         if ($37) {
          ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;HEAP32[$34+16>>2]=0|0;HEAP32[$34+20>>2]=0|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
          $38 = HEAP32[$33>>2]|0;
          $39 = ((($38)) + 24|0);
          HEAP32[$33>>2] = $39;
          $$4103 = $29;
          break;
         } else {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
          $$4103 = $29;
          break;
         }
        } else {
         $$1100 = $29;$41 = $31;
         while(1) {
          $40 = ($41<<24>>24)==(69);
          if ($40) {
           $$4103 = $$1100;
           break L9;
          }
          $42 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100,$1,$2)|0);
          $43 = ($42|0)==($$1100|0);
          $44 = ($42|0)==($1|0);
          $or$cond106 = $43 | $44;
          if ($or$cond106) {
           $$10 = $0;
           break L1;
          }
          $$pr = HEAP8[$42>>0]|0;
          $$1100 = $42;$41 = $$pr;
         }
        }
       } while(0);
       $45 = ((($$4103)) + 1|0);
       $$5104 = $45;
      } else {
       $27 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
       $28 = ($27|0)==($22|0);
       if ($28) {
        $$10 = $0;
        break;
       } else {
        $$5104 = $27;
       }
      }
      $46 = ((($2)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = HEAP32[$2>>2]|0;
      $49 = (($47) - ($48))|0;
      $50 = (($49|0) / 24)&-1;
      $51 = ($50>>>0)<(2);
      if ($51) {
       $$10 = $0;
      } else {
       $52 = $47;
       $53 = ((($52)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$53);
       $54 = HEAP32[$46>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $55 = ($$0$i$i$idx$i|0)==(-1);
        if ($55) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($54) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $56 = ((($54)) + -24|0);
       HEAP32[$46>>2] = $56;
       $57 = ((($54)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$57);
       $58 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,3884)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $59 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$59>>2] = 0;
        $60 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $60;
       }
       $61 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,5048)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i107 = 0;
       while(1) {
        $exitcond$i$i$i108 = ($$0$i$i$i107|0)==(3);
        if ($exitcond$i$i$i108) {
         break;
        }
        $62 = (($8) + ($$0$i$i$i107<<2)|0);
        HEAP32[$62>>2] = 0;
        $63 = (($$0$i$i$i107) + 1)|0;
        $$0$i$i$i107 = $63;
       }
       $64 = ((($3)) + 11|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = ($65<<24>>24)<(0);
       $67 = HEAP32[$3>>2]|0;
       $68 = ((($3)) + 4|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = $65&255;
       $71 = $66 ? $67 : $3;
       $72 = $66 ? $69 : $70;
       $73 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$71,$72)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i110 = 0;
       while(1) {
        $exitcond$i$i$i111 = ($$0$i$i$i110|0)==(3);
        if ($exitcond$i$i$i111) {
         break;
        }
        $74 = (($7) + ($$0$i$i$i110<<2)|0);
        HEAP32[$74>>2] = 0;
        $75 = (($$0$i$i$i110) + 1)|0;
        $$0$i$i$i110 = $75;
       }
       $76 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i113 = 0;
       while(1) {
        $exitcond$i$i$i114 = ($$0$i$i$i113|0)==(3);
        if ($exitcond$i$i$i114) {
         break;
        }
        $77 = (($6) + ($$0$i$i$i113<<2)|0);
        HEAP32[$77>>2] = 0;
        $78 = (($$0$i$i$i113) + 1)|0;
        $$0$i$i$i113 = $78;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $79 = HEAP32[$46>>2]|0;
       $80 = ((($79)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($80,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$10 = $$5104;
      }
     }
    } else {
     $$10 = $0;
    }
   } else {
    $$10 = $0;
   }
  } else {
   $$10 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$10|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(100);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $33 = ($$0$i$i$idx$i|0)==(-1);
        if ($33) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($32) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $34 = ((($32)) + -24|0);
       HEAP32[$24>>2] = $34;
       $35 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$35);
       $36 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,5034)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $37 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$37>>2] = 0;
        $38 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $38;
       }
       $39 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,4131)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $40 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $41;
       }
       $42 = ((($3)) + 11|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)<(0);
       $45 = HEAP32[$3>>2]|0;
       $46 = ((($3)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $43&255;
       $49 = $44 ? $45 : $3;
       $50 = $44 ? $47 : $48;
       $51 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$49,$50)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $52 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$52>>2] = 0;
        $53 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $53;
       }
       $54 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $55 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$55>>2] = 0;
        $56 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $56;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $57 = HEAP32[$24>>2]|0;
       $58 = ((($57)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($58,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i203 = 0, $$0$i$i$add$i209 = 0, $$0$i$i$add$i213 = 0, $$0$i$i$add$i223 = 0, $$0$i$i$add$i229 = 0, $$0$i$i$add$i233 = 0, $$0$i$i$add$i243 = 0, $$0$i$i$add$i253 = 0, $$0$i$i$add$i257 = 0, $$0$i$i$i = 0, $$0$i$i$i216 = 0, $$0$i$i$i236 = 0, $$0$i$i$i246 = 0, $$0$i$i$i260 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i202 = 0, $$0$i$i$idx$i208 = 0;
 var $$0$i$i$idx$i212 = 0, $$0$i$i$idx$i222 = 0, $$0$i$i$idx$i228 = 0, $$0$i$i$idx$i232 = 0, $$0$i$i$idx$i242 = 0, $$0$i$i$idx$i252 = 0, $$0$i$i$idx$i256 = 0, $$0182$off0 = 0, $$0183 = 0, $$1184 = 0, $$2185 = 0, $$3186 = 0, $$4187 = 0, $$6181 = 0, $$pre = 0, $$pre$phi298Z2D = 0, $$pre$phi300Z2D = 0, $$pre299 = 0, $$ptr$i = 0, $$ptr$i200 = 0;
 var $$ptr$i204 = 0, $$ptr$i210 = 0, $$ptr$i214 = 0, $$ptr$i224 = 0, $$ptr$i230 = 0, $$ptr$i234 = 0, $$ptr$i244 = 0, $$ptr$i254 = 0, $$ptr$i258 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i217 = 0, $exitcond$i$i$i237 = 0, $exitcond$i$i$i247 = 0, $exitcond$i$i$i261 = 0, $or$cond = 0, $or$cond195 = 0, $or$cond196 = 0, $or$cond197 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 132|0;
 $4 = sp + 120|0;
 $5 = sp + 108|0;
 $6 = sp + 96|0;
 $7 = sp + 84|0;
 $8 = sp + 72|0;
 $9 = sp + 60|0;
 $10 = sp + 48|0;
 $11 = sp + 36|0;
 $12 = sp + 24|0;
 $13 = sp + 12|0;
 $14 = sp;
 $15 = $1;
 $16 = $0;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(2);
 L1: do {
  if ($18) {
   $19 = HEAP8[$0>>0]|0;
   $20 = ($19<<24>>24)==(103);
   if ($20) {
    $21 = ((($0)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(115);
    $24 = ((($0)) + 2|0);
    $spec$select = $23 ? $24 : $0;
    $$0182$off0 = $23;$$0183 = $spec$select;
   } else {
    $$0182$off0 = 0;$$0183 = $0;
   }
   $25 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183,$1,$2)|0);
   $26 = ($25|0)==($$0183|0);
   if (!($26)) {
    if (!($$0182$off0)) {
     $$6181 = $25;
     break;
    }
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($2)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $$6181 = $0;
     break;
    }
    $31 = ((($29)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($31,0,3956)|0);
    $$6181 = $25;
    break;
   }
   $32 = $$0183;
   $33 = (($15) - ($32))|0;
   $34 = ($33|0)>(2);
   if ($34) {
    $35 = HEAP8[$$0183>>0]|0;
    $36 = ($35<<24>>24)==(115);
    if ($36) {
     $37 = ((($$0183)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = ($38<<24>>24)==(114);
     if ($39) {
      $40 = ((($$0183)) + 2|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(78);
      if ($42) {
       $43 = ((($$0183)) + 3|0);
       $44 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($43,$1,$2)|0);
       $45 = ($44|0)==($43|0);
       $46 = ($44|0)==($1|0);
       $or$cond = $45 | $46;
       if ($or$cond) {
        $$6181 = $0;
        break;
       }
       $47 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($44,$1,$2)|0);
       $48 = ($47|0)==($44|0);
       $$pre = ((($2)) + 4|0);
       do {
        if ($48) {
         $$1184 = $44;$$pre$phi298Z2D = $2;
        } else {
         $49 = HEAP32[$$pre>>2]|0;
         $50 = HEAP32[$2>>2]|0;
         $51 = (($49) - ($50))|0;
         $52 = (($51|0) / 24)&-1;
         $53 = ($52>>>0)<(2);
         if ($53) {
          $$6181 = $0;
          break L1;
         }
         $54 = $49;
         $55 = ((($54)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$55);
         $56 = HEAP32[$$pre>>2]|0;
         $$0$i$i$idx$i = 0;
         while(1) {
          $57 = ($$0$i$i$idx$i|0)==(-1);
          if ($57) {
           break;
          }
          $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
          $$ptr$i = (($56) + (($$0$i$i$add$i*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
          $$0$i$i$idx$i = $$0$i$i$add$i;
         }
         $58 = ((($56)) + -24|0);
         HEAP32[$$pre>>2] = $58;
         $59 = ((($56)) + -48|0);
         $60 = ((($3)) + 11|0);
         $61 = HEAP8[$60>>0]|0;
         $62 = ($61<<24>>24)<(0);
         $63 = HEAP32[$3>>2]|0;
         $64 = ((($3)) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = $61&255;
         $67 = $62 ? $63 : $3;
         $68 = $62 ? $65 : $66;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($59,$67,$68)|0);
         $69 = ($47|0)==($1|0);
         if (!($69)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$1184 = $47;$$pre$phi298Z2D = $2;
          break;
         }
         $70 = HEAP32[$$pre>>2]|0;
         $$0$i$i$idx$i198 = 0;
         while(1) {
          $71 = ($$0$i$i$idx$i198|0)==(-1);
          if ($71) {
           break;
          }
          $$0$i$i$add$i199 = (($$0$i$i$idx$i198) + -1)|0;
          $$ptr$i200 = (($70) + (($$0$i$i$add$i199*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i200);
          $$0$i$i$idx$i198 = $$0$i$i$add$i199;
         }
         $72 = ((($70)) + -24|0);
         HEAP32[$$pre>>2] = $72;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$6181 = $0;
         break L1;
        }
       } while(0);
       $73 = ((($5)) + 11|0);
       $74 = ((($5)) + 4|0);
       $$2185 = $$1184;
       while(1) {
        $75 = HEAP8[$$2185>>0]|0;
        $76 = ($75<<24>>24)==(69);
        if ($76) {
         break;
        }
        $77 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$2185,$1,$2)|0);
        $78 = ($77|0)==($$2185|0);
        $79 = ($77|0)==($1|0);
        $or$cond195 = $78 | $79;
        if ($or$cond195) {
         $$6181 = $0;
         break L1;
        }
        $80 = HEAP32[$$pre>>2]|0;
        $81 = HEAP32[$$pre$phi298Z2D>>2]|0;
        $82 = (($80) - ($81))|0;
        $83 = (($82|0) / 24)&-1;
        $84 = ($83>>>0)<(2);
        if ($84) {
         $$6181 = $0;
         break L1;
        }
        $85 = $80;
        $86 = ((($85)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$86);
        $87 = HEAP32[$$pre>>2]|0;
        $$0$i$i$idx$i202 = 0;
        while(1) {
         $88 = ($$0$i$i$idx$i202|0)==(-1);
         if ($88) {
          break;
         }
         $$0$i$i$add$i203 = (($$0$i$i$idx$i202) + -1)|0;
         $$ptr$i204 = (($87) + (($$0$i$i$add$i203*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i204);
         $$0$i$i$idx$i202 = $$0$i$i$add$i203;
        }
        $89 = ((($87)) + -24|0);
        HEAP32[$$pre>>2] = $89;
        $90 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($4,0,3956)|0);
        ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $91 = (($4) + ($$0$i$i$i<<2)|0);
         HEAP32[$91>>2] = 0;
         $92 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $92;
        }
        $93 = HEAP32[$$pre>>2]|0;
        $94 = ((($93)) + -24|0);
        $95 = HEAP8[$73>>0]|0;
        $96 = ($95<<24>>24)<(0);
        $97 = HEAP32[$5>>2]|0;
        $98 = HEAP32[$74>>2]|0;
        $99 = $95&255;
        $100 = $96 ? $97 : $5;
        $101 = $96 ? $98 : $99;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($94,$100,$101)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$2185 = $77;
       }
       $102 = ((($$2185)) + 1|0);
       $103 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($102,$1,$2)|0);
       $104 = ($103|0)==($102|0);
       if ($104) {
        $105 = HEAP32[$2>>2]|0;
        $106 = HEAP32[$$pre>>2]|0;
        $107 = ($105|0)==($106|0);
        if ($107) {
         $$6181 = $0;
         break;
        }
        $$0$i$i$idx$i208 = 0;
        while(1) {
         $108 = ($$0$i$i$idx$i208|0)==(-1);
         if ($108) {
          break;
         }
         $$0$i$i$add$i209 = (($$0$i$i$idx$i208) + -1)|0;
         $$ptr$i210 = (($106) + (($$0$i$i$add$i209*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i210);
         $$0$i$i$idx$i208 = $$0$i$i$add$i209;
        }
        $109 = ((($106)) + -24|0);
        HEAP32[$$pre>>2] = $109;
        $$6181 = $0;
        break;
       }
       $110 = HEAP32[$$pre>>2]|0;
       $111 = HEAP32[$$pre$phi298Z2D>>2]|0;
       $112 = (($110) - ($111))|0;
       $113 = (($112|0) / 24)&-1;
       $114 = ($113>>>0)<(2);
       if ($114) {
        $$6181 = $0;
        break;
       }
       $115 = $110;
       $116 = ((($115)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$116);
       $117 = HEAP32[$$pre>>2]|0;
       $$0$i$i$idx$i212 = 0;
       while(1) {
        $118 = ($$0$i$i$idx$i212|0)==(-1);
        if ($118) {
         break;
        }
        $$0$i$i$add$i213 = (($$0$i$i$idx$i212) + -1)|0;
        $$ptr$i214 = (($117) + (($$0$i$i$add$i213*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i214);
        $$0$i$i$idx$i212 = $$0$i$i$add$i213;
       }
       $119 = ((($117)) + -24|0);
       HEAP32[$$pre>>2] = $119;
       $120 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,3956)|0);
       ;HEAP32[$7>>2]=HEAP32[$6>>2]|0;HEAP32[$7+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i216 = 0;
       while(1) {
        $exitcond$i$i$i217 = ($$0$i$i$i216|0)==(3);
        if ($exitcond$i$i$i217) {
         break;
        }
        $121 = (($6) + ($$0$i$i$i216<<2)|0);
        HEAP32[$121>>2] = 0;
        $122 = (($$0$i$i$i216) + 1)|0;
        $$0$i$i$i216 = $122;
       }
       $123 = HEAP32[$$pre>>2]|0;
       $124 = ((($123)) + -24|0);
       $125 = ((($7)) + 11|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = ($126<<24>>24)<(0);
       $128 = HEAP32[$7>>2]|0;
       $129 = ((($7)) + 4|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $126&255;
       $132 = $127 ? $128 : $7;
       $133 = $127 ? $130 : $131;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($124,$132,$133)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$6181 = $103;
       break;
      }
      $134 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($40,$1,$2)|0);
      $135 = ($134|0)==($40|0);
      if (!($135)) {
       $136 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($134,$1,$2)|0);
       $137 = ($136|0)==($134|0);
       if ($137) {
        $$3186 = $134;
       } else {
        $138 = ((($2)) + 4|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = HEAP32[$2>>2]|0;
        $141 = (($139) - ($140))|0;
        $142 = (($141|0) / 24)&-1;
        $143 = ($142>>>0)<(2);
        if ($143) {
         $$6181 = $0;
         break;
        }
        $144 = $139;
        $145 = ((($144)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$145);
        $146 = HEAP32[$138>>2]|0;
        $$0$i$i$idx$i222 = 0;
        while(1) {
         $147 = ($$0$i$i$idx$i222|0)==(-1);
         if ($147) {
          break;
         }
         $$0$i$i$add$i223 = (($$0$i$i$idx$i222) + -1)|0;
         $$ptr$i224 = (($146) + (($$0$i$i$add$i223*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i224);
         $$0$i$i$idx$i222 = $$0$i$i$add$i223;
        }
        $148 = ((($146)) + -24|0);
        HEAP32[$138>>2] = $148;
        $149 = ((($146)) + -48|0);
        $150 = ((($8)) + 11|0);
        $151 = HEAP8[$150>>0]|0;
        $152 = ($151<<24>>24)<(0);
        $153 = HEAP32[$8>>2]|0;
        $154 = ((($8)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = $151&255;
        $157 = $152 ? $153 : $8;
        $158 = $152 ? $155 : $156;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($149,$157,$158)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        $$3186 = $136;
       }
       $159 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$3186,$1,$2)|0);
       $160 = ($159|0)==($$3186|0);
       if ($160) {
        $161 = HEAP32[$2>>2]|0;
        $162 = ((($2)) + 4|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = ($161|0)==($163|0);
        if ($164) {
         $$6181 = $0;
         break;
        }
        $$0$i$i$idx$i228 = 0;
        while(1) {
         $165 = ($$0$i$i$idx$i228|0)==(-1);
         if ($165) {
          break;
         }
         $$0$i$i$add$i229 = (($$0$i$i$idx$i228) + -1)|0;
         $$ptr$i230 = (($163) + (($$0$i$i$add$i229*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i230);
         $$0$i$i$idx$i228 = $$0$i$i$add$i229;
        }
        $166 = ((($163)) + -24|0);
        HEAP32[$162>>2] = $166;
        $$6181 = $0;
        break;
       }
       $167 = ((($2)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = HEAP32[$2>>2]|0;
       $170 = (($168) - ($169))|0;
       $171 = (($170|0) / 24)&-1;
       $172 = ($171>>>0)<(2);
       if ($172) {
        $$6181 = $0;
        break;
       }
       $173 = $168;
       $174 = ((($173)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$174);
       $175 = HEAP32[$167>>2]|0;
       $$0$i$i$idx$i232 = 0;
       while(1) {
        $176 = ($$0$i$i$idx$i232|0)==(-1);
        if ($176) {
         break;
        }
        $$0$i$i$add$i233 = (($$0$i$i$idx$i232) + -1)|0;
        $$ptr$i234 = (($175) + (($$0$i$i$add$i233*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i234);
        $$0$i$i$idx$i232 = $$0$i$i$add$i233;
       }
       $177 = ((($175)) + -24|0);
       HEAP32[$167>>2] = $177;
       $178 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,3956)|0);
       ;HEAP32[$10>>2]=HEAP32[$9>>2]|0;HEAP32[$10+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i236 = 0;
       while(1) {
        $exitcond$i$i$i237 = ($$0$i$i$i236|0)==(3);
        if ($exitcond$i$i$i237) {
         break;
        }
        $179 = (($9) + ($$0$i$i$i236<<2)|0);
        HEAP32[$179>>2] = 0;
        $180 = (($$0$i$i$i236) + 1)|0;
        $$0$i$i$i236 = $180;
       }
       $181 = HEAP32[$167>>2]|0;
       $182 = ((($181)) + -24|0);
       $183 = ((($10)) + 11|0);
       $184 = HEAP8[$183>>0]|0;
       $185 = ($184<<24>>24)<(0);
       $186 = HEAP32[$10>>2]|0;
       $187 = ((($10)) + 4|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = $184&255;
       $190 = $185 ? $186 : $10;
       $191 = $185 ? $188 : $189;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($182,$190,$191)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$6181 = $159;
       break;
      }
      $192 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($40,$1,$2)|0);
      $193 = ($192|0)==($40|0);
      $194 = ($192|0)==($1|0);
      $or$cond196 = $193 | $194;
      if ($or$cond196) {
       $$6181 = $0;
      } else {
       if ($$0182$off0) {
        $195 = HEAP32[$2>>2]|0;
        $196 = ((($2)) + 4|0);
        $197 = HEAP32[$196>>2]|0;
        $198 = ($195|0)==($197|0);
        if ($198) {
         $$6181 = $0;
         break;
        }
        $199 = ((($197)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($199,0,3956)|0);
        $$pre$phi300Z2D = $196;
       } else {
        $$pre299 = ((($2)) + 4|0);
        $$pre$phi300Z2D = $$pre299;
       }
       $200 = ((($12)) + 11|0);
       $201 = ((($12)) + 4|0);
       $$4187 = $192;
       while(1) {
        $202 = HEAP8[$$4187>>0]|0;
        $203 = ($202<<24>>24)==(69);
        if ($203) {
         break;
        }
        $204 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$4187,$1,$2)|0);
        $205 = ($204|0)==($$4187|0);
        $206 = ($204|0)==($1|0);
        $or$cond197 = $205 | $206;
        if ($or$cond197) {
         $$6181 = $0;
         break L1;
        }
        $207 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $208 = HEAP32[$2>>2]|0;
        $209 = (($207) - ($208))|0;
        $210 = (($209|0) / 24)&-1;
        $211 = ($210>>>0)<(2);
        if ($211) {
         $$6181 = $0;
         break L1;
        }
        $212 = $207;
        $213 = ((($212)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($11,$213);
        $214 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $$0$i$i$idx$i242 = 0;
        while(1) {
         $215 = ($$0$i$i$idx$i242|0)==(-1);
         if ($215) {
          break;
         }
         $$0$i$i$add$i243 = (($$0$i$i$idx$i242) + -1)|0;
         $$ptr$i244 = (($214) + (($$0$i$i$add$i243*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i244);
         $$0$i$i$idx$i242 = $$0$i$i$add$i243;
        }
        $216 = ((($214)) + -24|0);
        HEAP32[$$pre$phi300Z2D>>2] = $216;
        $217 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($11,0,3956)|0);
        ;HEAP32[$12>>2]=HEAP32[$11>>2]|0;HEAP32[$12+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$11+8>>2]|0;
        $$0$i$i$i246 = 0;
        while(1) {
         $exitcond$i$i$i247 = ($$0$i$i$i246|0)==(3);
         if ($exitcond$i$i$i247) {
          break;
         }
         $218 = (($11) + ($$0$i$i$i246<<2)|0);
         HEAP32[$218>>2] = 0;
         $219 = (($$0$i$i$i246) + 1)|0;
         $$0$i$i$i246 = $219;
        }
        $220 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $221 = ((($220)) + -24|0);
        $222 = HEAP8[$200>>0]|0;
        $223 = ($222<<24>>24)<(0);
        $224 = HEAP32[$12>>2]|0;
        $225 = HEAP32[$201>>2]|0;
        $226 = $222&255;
        $227 = $223 ? $224 : $12;
        $228 = $223 ? $225 : $226;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($221,$227,$228)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        $$4187 = $204;
       }
       $229 = ((($$4187)) + 1|0);
       $230 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($229,$1,$2)|0);
       $231 = ($230|0)==($229|0);
       if ($231) {
        $232 = HEAP32[$2>>2]|0;
        $233 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $234 = ($232|0)==($233|0);
        if ($234) {
         $$6181 = $0;
         break;
        }
        $$0$i$i$idx$i252 = 0;
        while(1) {
         $235 = ($$0$i$i$idx$i252|0)==(-1);
         if ($235) {
          break;
         }
         $$0$i$i$add$i253 = (($$0$i$i$idx$i252) + -1)|0;
         $$ptr$i254 = (($233) + (($$0$i$i$add$i253*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i254);
         $$0$i$i$idx$i252 = $$0$i$i$add$i253;
        }
        $236 = ((($233)) + -24|0);
        HEAP32[$$pre$phi300Z2D>>2] = $236;
        $$6181 = $0;
        break;
       }
       $237 = HEAP32[$$pre$phi300Z2D>>2]|0;
       $238 = HEAP32[$2>>2]|0;
       $239 = (($237) - ($238))|0;
       $240 = (($239|0) / 24)&-1;
       $241 = ($240>>>0)<(2);
       if ($241) {
        $$6181 = $0;
       } else {
        $242 = $237;
        $243 = ((($242)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($13,$243);
        $244 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $$0$i$i$idx$i256 = 0;
        while(1) {
         $245 = ($$0$i$i$idx$i256|0)==(-1);
         if ($245) {
          break;
         }
         $$0$i$i$add$i257 = (($$0$i$i$idx$i256) + -1)|0;
         $$ptr$i258 = (($244) + (($$0$i$i$add$i257*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i258);
         $$0$i$i$idx$i256 = $$0$i$i$add$i257;
        }
        $246 = ((($244)) + -24|0);
        HEAP32[$$pre$phi300Z2D>>2] = $246;
        $247 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($13,0,3956)|0);
        ;HEAP32[$14>>2]=HEAP32[$13>>2]|0;HEAP32[$14+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$13+8>>2]|0;
        $$0$i$i$i260 = 0;
        while(1) {
         $exitcond$i$i$i261 = ($$0$i$i$i260|0)==(3);
         if ($exitcond$i$i$i261) {
          break;
         }
         $248 = (($13) + ($$0$i$i$i260<<2)|0);
         HEAP32[$248>>2] = 0;
         $249 = (($$0$i$i$i260) + 1)|0;
         $$0$i$i$i260 = $249;
        }
        $250 = HEAP32[$$pre$phi300Z2D>>2]|0;
        $251 = ((($250)) + -24|0);
        $252 = ((($14)) + 11|0);
        $253 = HEAP8[$252>>0]|0;
        $254 = ($253<<24>>24)<(0);
        $255 = HEAP32[$14>>2]|0;
        $256 = ((($14)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $253&255;
        $259 = $254 ? $255 : $14;
        $260 = $254 ? $257 : $258;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($251,$259,$260)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $$6181 = $230;
       }
      }
     } else {
      $$6181 = $0;
     }
    } else {
     $$6181 = $0;
    }
   } else {
    $$6181 = $0;
   }
  } else {
   $$6181 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6181|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 if ($8) {
  $9 = HEAP8[$0>>0]|0;
  $10 = ($9<<24>>24)==(100);
  if ($10) {
   $11 = ((($0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(115);
   if ($13) {
    $14 = ((($0)) + 2|0);
    $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
    $16 = ($15|0)==($14|0);
    if ($16) {
     $$3 = $0;
    } else {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
     $18 = ($17|0)==($15|0);
     if ($18) {
      $$3 = $0;
     } else {
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = ($23>>>0)<(2);
      if ($24) {
       $$3 = $0;
      } else {
       $25 = $20;
       $26 = ((($25)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
       $27 = HEAP32[$19>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $28 = ($$0$i$i$idx$i|0)==(-1);
        if ($28) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($27) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $29 = ((($27)) + -24|0);
       HEAP32[$19>>2] = $29;
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4,4175,$3);
       $30 = HEAP32[$19>>2]|0;
       $31 = ((($30)) + -24|0);
       $32 = ((($4)) + 11|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)<(0);
       $35 = HEAP32[$4>>2]|0;
       $36 = ((($4)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $33&255;
       $39 = $34 ? $35 : $4;
       $40 = $34 ? $37 : $38;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($31,$39,$40)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $17;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 if ($8) {
  $9 = HEAP8[$0>>0]|0;
  $10 = ($9<<24>>24)==(100);
  if ($10) {
   $11 = ((($0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(116);
   if ($13) {
    $14 = ((($0)) + 2|0);
    $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
    $16 = ($15|0)==($14|0);
    if ($16) {
     $$3 = $0;
    } else {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
     $18 = ($17|0)==($15|0);
     if ($18) {
      $$3 = $0;
     } else {
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = ($23>>>0)<(2);
      if ($24) {
       $$3 = $0;
      } else {
       $25 = $20;
       $26 = ((($25)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
       $27 = HEAP32[$19>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $28 = ($$0$i$i$idx$i|0)==(-1);
        if ($28) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($27) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $29 = ((($27)) + -24|0);
       HEAP32[$19>>2] = $29;
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4,4173,$3);
       $30 = HEAP32[$19>>2]|0;
       $31 = ((($30)) + -24|0);
       $32 = ((($4)) + 11|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)<(0);
       $35 = HEAP32[$4>>2]|0;
       $36 = ((($4)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $33&255;
       $39 = $34 ? $35 : $4;
       $40 = $34 ? $37 : $38;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($31,$39,$40)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $17;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i174 = 0, $$0$i$i$add$i186 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i182 = 0, $$0$i$i$i196 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i173 = 0, $$0$i$i$idx$i185 = 0, $$0$i$i177 = 0, $$0$i$i189 = 0, $$0$i$i202 = 0, $$0$off0207 = 0, $$0138$off0 = 0, $$0150 = 0, $$0159$off0 = 0, $$0160 = 0, $$1151 = 0;
 var $$1161 = 0, $$16 = 0, $$3143 = 0, $$3163 = 0, $$4144 = 0, $$4164206 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $$pre$phi225Z2D = 0, $$pre$phiZ2D = 0, $$ptr$i = 0, $$ptr$i175 = 0, $$ptr$i187 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i183 = 0, $exitcond$i$i$i197 = 0;
 var $exitcond$i$i178 = 0, $exitcond$i$i190 = 0, $exitcond$i$i203 = 0, $or$cond = 0, $or$cond167 = 0, $or$cond168 = 0, $or$cond230 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 163|0;
 $4 = sp + 162|0;
 $5 = sp + 161|0;
 $6 = sp + 160|0;
 $7 = sp + 148|0;
 $8 = sp + 136|0;
 $9 = sp + 124|0;
 $10 = sp + 112|0;
 $11 = sp + 100|0;
 $12 = sp + 88|0;
 $13 = sp + 76|0;
 $14 = sp + 64|0;
 $15 = sp + 52|0;
 $16 = sp + 40|0;
 $17 = sp + 16|0;
 $18 = sp;
 $19 = $1;
 $20 = $0;
 $21 = (($19) - ($20))|0;
 $22 = ($21|0)>(3);
 L1: do {
  if ($22) {
   $23 = HEAP8[$0>>0]|0;
   $24 = ($23<<24>>24)==(103);
   if ($24) {
    $25 = ((($0)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(115);
    $28 = ((($0)) + 2|0);
    $spec$select = $27 ? $28 : $0;
    $$pr = HEAP8[$spec$select>>0]|0;
    $$0159$off0 = $27;$$0160 = $spec$select;$30 = $$pr;
   } else {
    $$0159$off0 = 0;$$0160 = $0;$30 = $23;
   }
   $29 = ($30<<24>>24)==(110);
   if ($29) {
    $31 = ((($$0160)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    switch ($32<<24>>24) {
    case 97: case 119:  {
     break;
    }
    default: {
     $$16 = $0;
     break L1;
    }
    }
    $33 = ($32<<24>>24)==(97);
    $34 = ((($$0160)) + 2|0);
    $35 = ($34|0)==($1|0);
    L8: do {
     if (!($35)) {
      $$0138$off0 = 0;$$1161 = $34;
      while(1) {
       $36 = HEAP8[$$1161>>0]|0;
       $37 = ($36<<24>>24)==(95);
       if ($37) {
        break;
       }
       $38 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1161,$1,$2)|0);
       $39 = ($38|0)==($$1161|0);
       $40 = ($38|0)==($1|0);
       $or$cond = $39 | $40;
       if ($or$cond) {
        break L8;
       } else {
        $$0138$off0 = 1;$$1161 = $38;
       }
      }
      $41 = ((($$1161)) + 1|0);
      $42 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($41,$1,$2)|0);
      $43 = ($42|0)==($41|0);
      $44 = ($42|0)==($1|0);
      $or$cond167 = $43 | $44;
      if (!($or$cond167)) {
       $45 = $42;
       $46 = (($19) - ($45))|0;
       $47 = ($46|0)>(2);
       $48 = HEAP8[$42>>0]|0;
       $49 = ($48<<24>>24)==(112);
       $or$cond230 = $47 & $49;
       L15: do {
        if ($or$cond230) {
         $50 = ((($42)) + 1|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = ($51<<24>>24)==(105);
         if (!($52)) {
          break L8;
         }
         $53 = ((($42)) + 2|0);
         $$3163 = $53;
         while(1) {
          $54 = HEAP8[$$3163>>0]|0;
          $55 = ($54<<24>>24)==(69);
          if ($55) {
           $$0$off0207 = 1;$$4164206 = $$3163;
           break L15;
          }
          $56 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3163,$1,$2)|0);
          $57 = ($56|0)==($$3163|0);
          $58 = ($56|0)==($1|0);
          $or$cond168 = $57 | $58;
          if ($or$cond168) {
           break L8;
          } else {
           $$3163 = $56;
          }
         }
        } else {
         $59 = ($48<<24>>24)==(69);
         if ($59) {
          $$0$off0207 = 0;$$4164206 = $42;
         } else {
          break L8;
         }
        }
       } while(0);
       ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $60 = (($7) + ($$0$i$i<<2)|0);
        HEAP32[$60>>2] = 0;
        $61 = (($$0$i$i) + 1)|0;
        $$0$i$i = $61;
       }
       if ($$0$off0207) {
        $62 = HEAP32[$2>>2]|0;
        $63 = ((($2)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($62|0)==($64|0);
        if ($65) {
         $$1151 = $0;$$4144 = 1;
        } else {
         $66 = ((($64)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$66);
         $67 = ((($7)) + 11|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)<(0);
         if ($69) {
          $70 = HEAP32[$7>>2]|0;
          HEAP8[$5>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($70,$5);
          $71 = ((($7)) + 4|0);
          HEAP32[$71>>2] = 0;
         } else {
          HEAP8[$6>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($7,$6);
          HEAP8[$67>>0] = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($7);
         ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $72 = (($8) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$72>>2] = 0;
          $73 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $73;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         $74 = HEAP32[$63>>2]|0;
         $$0$i$i$idx$i = 0;
         while(1) {
          $75 = ($$0$i$i$idx$i|0)==(-1);
          if ($75) {
           break;
          }
          $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
          $$ptr$i = (($74) + (($$0$i$i$add$i*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
          $$0$i$i$idx$i = $$0$i$i$add$i;
         }
         $76 = ((($74)) + -24|0);
         HEAP32[$63>>2] = $76;
         $$pre$phi225Z2D = $63;$$pre$phiZ2D = $2;$79 = $76;
         label = 33;
        }
       } else {
        $$phi$trans$insert = ((($2)) + 4|0);
        $$pre = HEAP32[$$phi$trans$insert>>2]|0;
        $$pre$phi225Z2D = $$phi$trans$insert;$$pre$phiZ2D = $2;$79 = $$pre;
        label = 33;
       }
       if ((label|0) == 33) {
        $77 = HEAP32[$$pre$phiZ2D>>2]|0;
        $78 = ($77|0)==($79|0);
        if ($78) {
         $$1151 = $0;$$4144 = 1;
        } else {
         $80 = ((($79)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$80);
         $81 = HEAP32[$$pre$phi225Z2D>>2]|0;
         $$0$i$i$idx$i173 = 0;
         while(1) {
          $82 = ($$0$i$i$idx$i173|0)==(-1);
          if ($82) {
           break;
          }
          $$0$i$i$add$i174 = (($$0$i$i$idx$i173) + -1)|0;
          $$ptr$i175 = (($81) + (($$0$i$i$add$i174*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i175);
          $$0$i$i$idx$i173 = $$0$i$i$add$i174;
         }
         $83 = ((($81)) + -24|0);
         HEAP32[$$pre$phi225Z2D>>2] = $83;
         ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
         $$0$i$i177 = 0;
         while(1) {
          $exitcond$i$i178 = ($$0$i$i177|0)==(3);
          if ($exitcond$i$i178) {
           break;
          }
          $84 = (($10) + ($$0$i$i177<<2)|0);
          HEAP32[$84>>2] = 0;
          $85 = (($$0$i$i177) + 1)|0;
          $$0$i$i177 = $85;
         }
         if ($$0138$off0) {
          $86 = HEAP32[$$pre$phiZ2D>>2]|0;
          $87 = ($86|0)==($83|0);
          if ($87) {
           $$0150 = $0;$$3143 = 1;
          } else {
           $88 = ((($81)) + -48|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($11,$88);
           $89 = ((($10)) + 11|0);
           $90 = HEAP8[$89>>0]|0;
           $91 = ($90<<24>>24)<(0);
           if ($91) {
            $92 = HEAP32[$10>>2]|0;
            HEAP8[$3>>0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($92,$3);
            $93 = ((($10)) + 4|0);
            HEAP32[$93>>2] = 0;
           } else {
            HEAP8[$4>>0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($10,$4);
            HEAP8[$89>>0] = 0;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($10);
           ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
           $$0$i$i$i$i182 = 0;
           while(1) {
            $exitcond$i$i$i$i183 = ($$0$i$i$i$i182|0)==(3);
            if ($exitcond$i$i$i$i183) {
             break;
            }
            $94 = (($11) + ($$0$i$i$i$i182<<2)|0);
            HEAP32[$94>>2] = 0;
            $95 = (($$0$i$i$i$i182) + 1)|0;
            $$0$i$i$i$i182 = $95;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
           $96 = HEAP32[$$pre$phi225Z2D>>2]|0;
           $$0$i$i$idx$i185 = 0;
           while(1) {
            $97 = ($$0$i$i$idx$i185|0)==(-1);
            if ($97) {
             break;
            }
            $$0$i$i$add$i186 = (($$0$i$i$idx$i185) + -1)|0;
            $$ptr$i187 = (($96) + (($$0$i$i$add$i186*24)|0)|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i187);
            $$0$i$i$idx$i185 = $$0$i$i$add$i186;
           }
           $98 = ((($96)) + -24|0);
           HEAP32[$$pre$phi225Z2D>>2] = $98;
           label = 52;
          }
         } else {
          label = 52;
         }
         if ((label|0) == 52) {
          ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
          $$0$i$i189 = 0;
          while(1) {
           $exitcond$i$i190 = ($$0$i$i189|0)==(3);
           if ($exitcond$i$i190) {
            break;
           }
           $99 = (($12) + ($$0$i$i189<<2)|0);
           HEAP32[$99>>2] = 0;
           $100 = (($$0$i$i189) + 1)|0;
           $$0$i$i189 = $100;
          }
          if ($$0159$off0) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($12,3956);
          }
          if ($33) {
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($12,4166)|0);
          } else {
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($12,3916)|0);
          }
          if ($$0138$off0) {
           __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($14,3884,$10);
           $101 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($14,4170)|0);
           ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
           $$0$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
            if ($exitcond$i$i$i) {
             break;
            }
            $102 = (($14) + ($$0$i$i$i<<2)|0);
            HEAP32[$102>>2] = 0;
            $103 = (($$0$i$i$i) + 1)|0;
            $$0$i$i$i = $103;
           }
           $104 = ((($13)) + 11|0);
           $105 = HEAP8[$104>>0]|0;
           $106 = ($105<<24>>24)<(0);
           $107 = HEAP32[$13>>2]|0;
           $108 = ((($13)) + 4|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = $105&255;
           $111 = $106 ? $107 : $13;
           $112 = $106 ? $109 : $110;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($12,$111,$112)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
          }
          $113 = ((($9)) + 11|0);
          $114 = HEAP8[$113>>0]|0;
          $115 = ($114<<24>>24)<(0);
          $116 = HEAP32[$9>>2]|0;
          $117 = ((($9)) + 4|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = $114&255;
          $120 = $115 ? $116 : $9;
          $121 = $115 ? $118 : $119;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($12,$120,$121)|0);
          if ($$0$off0207) {
           __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($16,3879,$7);
           $122 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($16,3882)|0);
           ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
           $$0$i$i$i196 = 0;
           while(1) {
            $exitcond$i$i$i197 = ($$0$i$i$i196|0)==(3);
            if ($exitcond$i$i$i197) {
             break;
            }
            $123 = (($16) + ($$0$i$i$i196<<2)|0);
            HEAP32[$123>>2] = 0;
            $124 = (($$0$i$i$i196) + 1)|0;
            $$0$i$i$i196 = $124;
           }
           $125 = ((($15)) + 11|0);
           $126 = HEAP8[$125>>0]|0;
           $127 = ($126<<24>>24)<(0);
           $128 = HEAP32[$15>>2]|0;
           $129 = ((($15)) + 4|0);
           $130 = HEAP32[$129>>2]|0;
           $131 = $126&255;
           $132 = $127 ? $128 : $15;
           $133 = $127 ? $130 : $131;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($12,$132,$133)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
          }
          ;HEAP32[$18>>2]=HEAP32[$12>>2]|0;HEAP32[$18+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$12+8>>2]|0;
          $$0$i$i202 = 0;
          while(1) {
           $exitcond$i$i203 = ($$0$i$i202|0)==(3);
           if ($exitcond$i$i203) {
            break;
           }
           $134 = (($12) + ($$0$i$i202<<2)|0);
           HEAP32[$134>>2] = 0;
           $135 = (($$0$i$i202) + 1)|0;
           $$0$i$i202 = $135;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($17,$18);
          $136 = HEAP32[$$pre$phi225Z2D>>2]|0;
          $137 = ((($2)) + 8|0);
          $138 = HEAP32[$137>>2]|0;
          $139 = ($136>>>0)<($138>>>0);
          if ($139) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136,$17);
           $140 = HEAP32[$$pre$phi225Z2D>>2]|0;
           $141 = ((($140)) + 24|0);
           HEAP32[$$pre$phi225Z2D>>2] = $141;
          } else {
           __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$17);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
          $142 = ((($$4164206)) + 1|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
          $$0150 = $142;$$3143 = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$1151 = $$0150;$$4144 = $$3143;
        }
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $cond = ($$4144|0)==(0);
       if ($cond) {
        $$16 = $$1151;
        break L1;
       }
      }
     }
    } while(0);
    $$16 = $0;
   } else {
    $$16 = $0;
   }
  } else {
   $$16 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$16|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 $9 = ($8|0)==($0|0);
 if ($9) {
  $$016 = $0;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($2)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $$016 = $0;
  } else {
   $14 = ((($12)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$14);
   $15 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7,0,4155)|0);
   ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $16 = (($7) + ($$0$i$i$i<<2)|0);
    HEAP32[$16>>2] = 0;
    $17 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $17;
   }
   $18 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
   ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
   $$0$i$i$i18 = 0;
   while(1) {
    $exitcond$i$i$i19 = ($$0$i$i$i18|0)==(3);
    if ($exitcond$i$i$i19) {
     break;
    }
    $19 = (($6) + ($$0$i$i$i18<<2)|0);
    HEAP32[$19>>2] = 0;
    $20 = (($$0$i$i$i18) + 1)|0;
    $$0$i$i$i18 = $20;
   }
   $21 = HEAP32[$11>>2]|0;
   $22 = ((($21)) + -24|0);
   $23 = ((($22)) + 11|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)<(0);
   if ($25) {
    $26 = HEAP32[$22>>2]|0;
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
    $27 = ((($21)) + -20|0);
    HEAP32[$27>>2] = 0;
   } else {
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($22,$4);
    HEAP8[$23>>0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($22);
   ;HEAP32[$22>>2]=HEAP32[$5>>2]|0;HEAP32[$22+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$5+8>>2]|0;
   $$0$i$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
    if ($exitcond$i$i$i$i) {
     break;
    }
    $28 = (($5) + ($$0$i$i$i$i<<2)|0);
    HEAP32[$28>>2] = 0;
    $29 = (($$0$i$i$i$i) + 1)|0;
    $$0$i$i$i$i = $29;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   $$016 = $8;
  }
 }
 STACKTOP = sp;return ($$016|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(2);
 if ($7) {
  $8 = HEAP8[$0>>0]|0;
  $9 = ($8<<24>>24)==(112);
  if ($9) {
   $10 = ((($0)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(116);
   if ($12) {
    $13 = ((($0)) + 2|0);
    $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
    $15 = ($14|0)==($13|0);
    if ($15) {
     $$3 = $0;
    } else {
     $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $17 = ($16|0)==($14|0);
     if ($17) {
      $$3 = $0;
     } else {
      $18 = ((($2)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$2>>2]|0;
      $21 = (($19) - ($20))|0;
      $22 = (($21|0) / 24)&-1;
      $23 = ($22>>>0)<(2);
      if ($23) {
       $$3 = $0;
      } else {
       $24 = $19;
       $25 = ((($24)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$25);
       $26 = HEAP32[$18>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $27 = ($$0$i$i$idx$i|0)==(-1);
        if ($27) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($26) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $28 = ((($26)) + -24|0);
       HEAP32[$18>>2] = $28;
       $29 = ((($26)) + -48|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($29,4152)|0);
       $30 = HEAP32[$18>>2]|0;
       $31 = ((($30)) + -24|0);
       $32 = ((($3)) + 11|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)<(0);
       $35 = HEAP32[$3>>2]|0;
       $36 = ((($3)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $33&255;
       $39 = $34 ? $35 : $3;
       $40 = $34 ? $37 : $38;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($31,$39,$40)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $16;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(114);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $33 = ($$0$i$i$idx$i|0)==(-1);
        if ($33) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($32) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $34 = ((($32)) + -24|0);
       HEAP32[$24>>2] = $34;
       $35 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$35);
       $36 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,4134)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $37 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$37>>2] = 0;
        $38 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $38;
       }
       $39 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,4131)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $40 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $41;
       }
       $42 = ((($3)) + 11|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)<(0);
       $45 = HEAP32[$3>>2]|0;
       $46 = ((($3)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $43&255;
       $49 = $44 ? $45 : $3;
       $50 = $44 ? $47 : $48;
       $51 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$49,$50)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $52 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$52>>2] = 0;
        $53 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $53;
       }
       $54 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $55 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$55>>2] = 0;
        $56 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $56;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $57 = HEAP32[$24>>2]|0;
       $58 = ((($57)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($58,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(115);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $33 = ($$0$i$i$idx$i|0)==(-1);
        if ($33) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($32) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $34 = ((($32)) + -24|0);
       HEAP32[$24>>2] = $34;
       $35 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$35);
       $36 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9,0,4118)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $37 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$37>>2] = 0;
        $38 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $38;
       }
       $39 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,4131)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $40 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $41;
       }
       $42 = ((($3)) + 11|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)<(0);
       $45 = HEAP32[$3>>2]|0;
       $46 = ((($3)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $43&255;
       $49 = $44 ? $45 : $3;
       $50 = $44 ? $47 : $48;
       $51 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$49,$50)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $52 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$52>>2] = 0;
        $53 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $53;
       }
       $54 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $55 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$55>>2] = 0;
        $56 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $56;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $57 = HEAP32[$24>>2]|0;
       $58 = ((($57)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($58,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(2);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(115);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(112);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12,$1,$2)|0);
    $14 = ($13|0)==($12|0);
    $spec$select = $14 ? $0 : $13;
    $$1 = $spec$select;
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(116);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$124 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$124 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,4109)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3882)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i27 = 0;
      while(1) {
       $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
       if ($exitcond$i$i$i28) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i27<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i27) + 1)|0;
       $$0$i$i$i27 = $29;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($31,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$124 = $17;
     }
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } else {
  $$124 = $0;
 }
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(122);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$124 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$124 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,4109)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3882)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i27 = 0;
      while(1) {
       $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
       if ($exitcond$i$i$i28) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i27<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i27) + 1)|0;
       $$0$i$i$i27 = $29;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($31,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$124 = $17;
     }
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } else {
  $$124 = $0;
 }
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$148 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0;
 var $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 52|0;
 $6 = sp + 40|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(2);
 if ($12) {
  $13 = HEAP8[$0>>0]|0;
  $14 = ($13<<24>>24)==(115);
  if ($14) {
   $15 = ((($0)) + 1|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==(90);
   if ($17) {
    $18 = ((($0)) + 2|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(84);
    if ($20) {
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[$2>>2]|0;
     $24 = (($22) - ($23))|0;
     $25 = (($24|0) / 24)&-1;
     $26 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($18,$1,$2)|0);
     $27 = HEAP32[$21>>2]|0;
     $28 = HEAP32[$2>>2]|0;
     $29 = (($27) - ($28))|0;
     $30 = (($29|0) / 24)&-1;
     $31 = ($26|0)==($18|0);
     if ($31) {
      $$148 = $0;
     } else {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $32 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4095)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3,4095,$32);
      $33 = ($25|0)==($30|0);
      L7: do {
       if (!($33)) {
        $34 = HEAP32[$2>>2]|0;
        $35 = (($34) + (($25*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$35);
        $36 = ((($4)) + 11|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = ($37<<24>>24)<(0);
        $39 = HEAP32[$4>>2]|0;
        $40 = ((($4)) + 4|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = $37&255;
        $43 = $38 ? $39 : $4;
        $44 = $38 ? $41 : $42;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3,$43,$44)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $45 = ((($5)) + 11|0);
        $46 = ((($5)) + 4|0);
        $$045$in = $25;
        while(1) {
         $$045 = (($$045$in) + 1)|0;
         $47 = ($$045|0)==($30|0);
         if ($47) {
          break L7;
         }
         $48 = HEAP32[$2>>2]|0;
         $49 = (($48) + (($$045*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$49);
         $50 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,4106)|0);
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $51 = (($6) + ($$0$i$i$i<<2)|0);
          HEAP32[$51>>2] = 0;
          $52 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $52;
         }
         $53 = HEAP8[$45>>0]|0;
         $54 = ($53<<24>>24)<(0);
         $55 = HEAP32[$5>>2]|0;
         $56 = HEAP32[$46>>2]|0;
         $57 = $53&255;
         $58 = $54 ? $55 : $5;
         $59 = $54 ? $56 : $57;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3,$58,$59)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$045$in = $$045;
        }
       }
      } while(0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,3882)|0);
      $$046 = $30;
      while(1) {
       $60 = ($$046|0)==($25|0);
       if ($60) {
        break;
       }
       $61 = HEAP32[$21>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $62 = ($$0$i$i$idx$i|0)==(-1);
        if ($62) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($61) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $63 = ((($61)) + -24|0);
       HEAP32[$21>>2] = $63;
       $64 = (($$046) + -1)|0;
       $$046 = $64;
      }
      ;HEAP32[$8>>2]=HEAP32[$3>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$3+8>>2]|0;
      $$0$i$i = 0;
      while(1) {
       $exitcond$i$i = ($$0$i$i|0)==(3);
       if ($exitcond$i$i) {
        break;
       }
       $65 = (($3) + ($$0$i$i<<2)|0);
       HEAP32[$65>>2] = 0;
       $66 = (($$0$i$i) + 1)|0;
       $$0$i$i = $66;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
      $67 = HEAP32[$21>>2]|0;
      $68 = ((($2)) + 8|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67>>>0)<($69>>>0);
      if ($70) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($67,$7);
       $71 = HEAP32[$21>>2]|0;
       $72 = ((($71)) + 24|0);
       HEAP32[$21>>2] = $72;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$148 = $26;
     }
    } else {
     $$148 = $0;
    }
   } else {
    $$148 = $0;
   }
  } else {
   $$148 = $0;
  }
 } else {
  $$148 = $0;
 }
 STACKTOP = sp;return ($$148|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(90);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(102);
    if ($18) {
     $19 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $20 = ($19|0)==($16|0);
     if ($20) {
      $$125 = $0;
     } else {
      $21 = HEAP32[$2>>2]|0;
      $22 = ((($2)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $$125 = $0;
      } else {
       $25 = ((($23)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$25);
       $26 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,4095)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $27 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$27>>2] = 0;
        $28 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $28;
       }
       $29 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3882)|0);
       ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i28 = 0;
       while(1) {
        $exitcond$i$i$i29 = ($$0$i$i$i28|0)==(3);
        if ($exitcond$i$i$i29) {
         break;
        }
        $30 = (($5) + ($$0$i$i$i28<<2)|0);
        HEAP32[$30>>2] = 0;
        $31 = (($$0$i$i$i28) + 1)|0;
        $$0$i$i$i28 = $31;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
       $32 = HEAP32[$22>>2]|0;
       $33 = ((($32)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($33,$3);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$125 = $19;
      }
     }
    } else {
     $$125 = $0;
    }
   } else {
    $$125 = $0;
   }
  } else {
   $$125 = $0;
  }
 } else {
  $$125 = $0;
 }
 STACKTOP = sp;return ($$125|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(116);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 105: case 101:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $15 = ($14<<24>>24)==(101);
    $16 = ((($0)) + 2|0);
    if ($15) {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $17;
    } else {
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $18;
    }
    $19 = ($$025|0)==($16|0);
    if ($19) {
     $$127 = $0;
    } else {
     $20 = HEAP32[$2>>2]|0;
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)==($22|0);
     if ($23) {
      $$127 = $0;
     } else {
      $24 = ((($22)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$24);
      $25 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6,0,4087)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $26 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$26>>2] = 0;
       $27 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $27;
      }
      $28 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3882)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i30 = 0;
      while(1) {
       $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
       if ($exitcond$i$i$i31) {
        break;
       }
       $29 = (($5) + ($$0$i$i$i30<<2)|0);
       HEAP32[$29>>2] = 0;
       $30 = (($$0$i$i$i30) + 1)|0;
       $$0$i$i$i30 = $30;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $31 = HEAP32[$21>>2]|0;
      $32 = ((($31)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($32,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$127 = $$025;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,5);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(2);
 if ($9) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(116);
  if ($11) {
   $12 = ((($0)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(119);
   if ($14) {
    $15 = ((($0)) + 2|0);
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
    $17 = ($16|0)==($15|0);
    if ($17) {
     $$1 = $0;
    } else {
     $18 = HEAP32[$2>>2]|0;
     $19 = ((($2)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $$1 = $0;
     } else {
      $22 = ((($20)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$22);
      $23 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5,0,4080)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $24 = (($5) + ($$0$i$i$i<<2)|0);
       HEAP32[$24>>2] = 0;
       $25 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $25;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $26 = HEAP32[$19>>2]|0;
      $27 = ((($26)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($27,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1 = $16;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0,$1,$2);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i69 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i68 = 0, $$2 = 0, $$ptr$i = 0, $$ptr$i70 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(1);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   switch ($9<<24>>24) {
   case 100: case 111:  {
    $10 = ((($0)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(110);
    if ($12) {
     $13 = ($9<<24>>24)==(111);
     $14 = ((($0)) + 2|0);
     if (!($13)) {
      $40 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
      $41 = ($40|0)==($14|0);
      $spec$select = $41 ? $0 : $40;
      $$2 = $spec$select;
      break L1;
     }
     $15 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $16 = ($15|0)==($14|0);
     if ($16) {
      $$2 = $0;
      break L1;
     }
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
     $18 = ($17|0)==($15|0);
     if ($18) {
      $$2 = $15;
      break L1;
     }
     $19 = ((($2)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = HEAP32[$2>>2]|0;
     $22 = (($20) - ($21))|0;
     $23 = (($22|0) / 24)&-1;
     $24 = ($23>>>0)<(2);
     if ($24) {
      $$2 = $17;
      break L1;
     }
     $25 = $20;
     $26 = ((($25)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
     $27 = HEAP32[$19>>2]|0;
     $$0$i$i$idx$i = 0;
     while(1) {
      $28 = ($$0$i$i$idx$i|0)==(-1);
      if ($28) {
       break;
      }
      $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
      $$ptr$i = (($27) + (($$0$i$i$add$i*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $29 = ((($27)) + -24|0);
     HEAP32[$19>>2] = $29;
     $30 = ((($27)) + -48|0);
     $31 = ((($3)) + 11|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)<(0);
     $34 = HEAP32[$3>>2]|0;
     $35 = ((($3)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $32&255;
     $38 = $33 ? $34 : $3;
     $39 = $33 ? $36 : $37;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($30,$38,$39)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $17;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $42 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $43 = ($42|0)==($0|0);
   if ($43) {
    $44 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $45 = ($44|0)==($0|0);
    if ($45) {
     $$2 = $0;
    } else {
     $46 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($44,$1,$2)|0);
     $47 = ($46|0)==($44|0);
     if ($47) {
      $$2 = $44;
     } else {
      $48 = ((($2)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$2>>2]|0;
      $51 = (($49) - ($50))|0;
      $52 = (($51|0) / 24)&-1;
      $53 = ($52>>>0)<(2);
      if ($53) {
       $$2 = $46;
      } else {
       $54 = $49;
       $55 = ((($54)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$55);
       $56 = HEAP32[$48>>2]|0;
       $$0$i$i$idx$i68 = 0;
       while(1) {
        $57 = ($$0$i$i$idx$i68|0)==(-1);
        if ($57) {
         break;
        }
        $$0$i$i$add$i69 = (($$0$i$i$idx$i68) + -1)|0;
        $$ptr$i70 = (($56) + (($$0$i$i$add$i69*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i70);
        $$0$i$i$idx$i68 = $$0$i$i$add$i69;
       }
       $58 = ((($56)) + -24|0);
       HEAP32[$48>>2] = $58;
       $59 = ((($56)) + -48|0);
       $60 = ((($4)) + 11|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($61<<24>>24)<(0);
       $63 = HEAP32[$4>>2]|0;
       $64 = ((($4)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $61&255;
       $67 = $62 ? $63 : $4;
       $68 = $62 ? $65 : $66;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($59,$67,$68)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$2 = $46;
      }
     }
    }
   } else {
    $$2 = $42;
   }
  } else {
   $$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$067 = 0, $$1 = 0, $$ptr$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i72 = 0, $$sroa$0$0$$sroa_idx$i76 = 0, $$sroa$0$0$copyload$i7381 = 0, $$sroa$0$0$copyload$i7780 = 0, $$sroa$0$0$copyload$i82 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 56|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ($0|0)==($1|0);
 L1: do {
  if ($9) {
   $$1 = $0;
  } else {
   $10 = HEAP8[$0>>0]|0;
   $11 = $10 << 24 >> 24;
   switch ($11|0) {
   case 84:  {
    $12 = ((($2)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$2>>2]|0;
    $15 = (($13) - ($14))|0;
    $16 = (($15|0) / 24)&-1;
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $18 = HEAP32[$12>>2]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = (($18) - ($19))|0;
    $21 = (($20|0) / 24)&-1;
    $22 = ($17|0)!=($0|0);
    $23 = (($16) + 1)|0;
    $24 = ($21|0)==($23|0);
    $or$cond = $22 & $24;
    $25 = $18;
    if ($or$cond) {
     $26 = ((($25)) + -24|0);
     $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
     $$sroa$0$0$copyload$i82 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
     HEAP32[$4>>2] = $$sroa$0$0$copyload$i82;
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3,$26,$4);
     $27 = ((($2)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($2)) + 24|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($3)) + 12|0);
      HEAP32[$28>>2] = 0;
      $33 = ((($28)) + 4|0);
      HEAP32[$33>>2] = 0;
      $34 = ((($28)) + 8|0);
      HEAP32[$34>>2] = 0;
      $35 = ((($28)) + 12|0);
      $36 = HEAP32[$32>>2]|0;
      HEAP32[$35>>2] = $36;
      $37 = HEAP32[$3>>2]|0;
      HEAP32[$28>>2] = $37;
      $38 = ((($3)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      HEAP32[$33>>2] = $39;
      $40 = ((($3)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[$34>>2] = $41;
      HEAP32[$40>>2] = 0;
      HEAP32[$38>>2] = 0;
      HEAP32[$3>>2] = 0;
      $42 = HEAP32[$27>>2]|0;
      $43 = ((($42)) + 16|0);
      HEAP32[$27>>2] = $43;
     } else {
      $44 = ((($2)) + 16|0);
      __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($44,$3);
     }
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$1 = $17;
     break L1;
    }
    $$067 = $21;$47 = $25;
    while(1) {
     $45 = ($$067|0)==($16|0);
     if ($45) {
      $$1 = $0;
      break L1;
     }
     $$0$i$i$idx$i = 0;
     while(1) {
      $46 = ($$0$i$i$idx$i|0)==(-1);
      if ($46) {
       break;
      }
      $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
      $$ptr$i = (($47) + (($$0$i$i$add$i*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $48 = ((($47)) + -24|0);
     HEAP32[$12>>2] = $48;
     $49 = (($$067) + -1)|0;
     $$067 = $49;$47 = $48;
    }
    break;
   }
   case 68:  {
    $50 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $51 = ($50|0)==($0|0);
    if ($51) {
     $$1 = $0;
     break L1;
    }
    $52 = HEAP32[$2>>2]|0;
    $53 = ((($2)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $$1 = $0;
     break L1;
    }
    $56 = ((($54)) + -24|0);
    $$sroa$0$0$$sroa_idx$i72 = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i7381 = HEAP32[$$sroa$0$0$$sroa_idx$i72>>2]|0;
    HEAP32[$6>>2] = $$sroa$0$0$copyload$i7381;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5,$56,$6);
    $57 = ((($2)) + 20|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($2)) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($5)) + 12|0);
     HEAP32[$58>>2] = 0;
     $63 = ((($58)) + 4|0);
     HEAP32[$63>>2] = 0;
     $64 = ((($58)) + 8|0);
     HEAP32[$64>>2] = 0;
     $65 = ((($58)) + 12|0);
     $66 = HEAP32[$62>>2]|0;
     HEAP32[$65>>2] = $66;
     $67 = HEAP32[$5>>2]|0;
     HEAP32[$58>>2] = $67;
     $68 = ((($5)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     HEAP32[$63>>2] = $69;
     $70 = ((($5)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     HEAP32[$64>>2] = $71;
     HEAP32[$70>>2] = 0;
     HEAP32[$68>>2] = 0;
     HEAP32[$5>>2] = 0;
     $72 = HEAP32[$57>>2]|0;
     $73 = ((($72)) + 16|0);
     HEAP32[$57>>2] = $73;
    } else {
     $74 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($74,$5);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
    $$1 = $50;
    break L1;
    break;
   }
   case 83:  {
    $75 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $76 = ($75|0)==($0|0);
    if (!($76)) {
     $$1 = $75;
     break L1;
    }
    $77 = $1;
    $78 = $0;
    $79 = (($77) - ($78))|0;
    $80 = ($79|0)>(2);
    if (!($80)) {
     $$1 = $0;
     break L1;
    }
    $81 = ((($0)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ($82<<24>>24)==(116);
    if (!($83)) {
     $$1 = $0;
     break L1;
    }
    $84 = ((($0)) + 2|0);
    $85 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($84,$1,$2)|0);
    $86 = ($85|0)==($84|0);
    if ($86) {
     $$1 = $0;
     break L1;
    }
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($2)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($87|0)==($89|0);
    if ($90) {
     $$1 = $0;
     break L1;
    }
    $91 = ((($89)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($91,0,4178)|0);
    $92 = HEAP32[$88>>2]|0;
    $93 = ((($92)) + -24|0);
    $$sroa$0$0$$sroa_idx$i76 = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i7780 = HEAP32[$$sroa$0$0$$sroa_idx$i76>>2]|0;
    HEAP32[$8>>2] = $$sroa$0$0$copyload$i7780;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($7,$93,$8);
    $94 = ((($2)) + 20|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($2)) + 24|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95>>>0)<($97>>>0);
    if ($98) {
     $99 = ((($7)) + 12|0);
     HEAP32[$95>>2] = 0;
     $100 = ((($95)) + 4|0);
     HEAP32[$100>>2] = 0;
     $101 = ((($95)) + 8|0);
     HEAP32[$101>>2] = 0;
     $102 = ((($95)) + 12|0);
     $103 = HEAP32[$99>>2]|0;
     HEAP32[$102>>2] = $103;
     $104 = HEAP32[$7>>2]|0;
     HEAP32[$95>>2] = $104;
     $105 = ((($7)) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     HEAP32[$100>>2] = $106;
     $107 = ((($7)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     HEAP32[$101>>2] = $108;
     HEAP32[$107>>2] = 0;
     HEAP32[$105>>2] = 0;
     HEAP32[$7>>2] = 0;
     $109 = HEAP32[$94>>2]|0;
     $110 = ((($109)) + 16|0);
     HEAP32[$94>>2] = $110;
    } else {
     $111 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($111,$7);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($7);
    $$1 = $85;
    break L1;
    break;
   }
   default: {
    $$1 = $0;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $$ptr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$3 = $0;
 } else {
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
  $6 = ($5|0)==($0|0);
  if ($6) {
   $$3 = $0;
  } else {
   $7 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5,$1,$2)|0);
   $8 = ($7|0)==($5|0);
   if ($8) {
    $$3 = $5;
   } else {
    $9 = ((($2)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = (($10) - ($11))|0;
    $13 = (($12|0) / 24)&-1;
    $14 = ($13>>>0)<(2);
    if ($14) {
     $$3 = $0;
    } else {
     $15 = $10;
     $16 = ((($15)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$16);
     $17 = HEAP32[$9>>2]|0;
     $$0$i$i$idx$i = 0;
     while(1) {
      $18 = ($$0$i$i$idx$i|0)==(-1);
      if ($18) {
       break;
      }
      $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
      $$ptr$i = (($17) + (($$0$i$i$add$i*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $19 = ((($17)) + -24|0);
     HEAP32[$9>>2] = $19;
     $20 = ((($17)) + -48|0);
     $21 = ((($3)) + 11|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)<(0);
     $24 = HEAP32[$3>>2]|0;
     $25 = ((($3)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $22&255;
     $28 = $23 ? $24 : $3;
     $29 = $23 ? $26 : $27;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($20,$28,$29)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $7;
    }
   }
  }
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$1 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   switch ($5|0) {
   case 68: case 67:  {
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $6;
    break L1;
    break;
   }
   case 85:  {
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $7;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
    $8 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $8;
    break L1;
    break;
   }
   default: {
    $9 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    return ($9|0);
   }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(1);
 L1: do {
  if ($11) {
   $12 = HEAP32[$2>>2]|0;
   $13 = ((($2)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $$023 = $0;
   } else {
    $16 = HEAP8[$0>>0]|0;
    $17 = $16 << 24 >> 24;
    switch ($17|0) {
    case 67:  {
     $18 = ((($0)) + 1|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 << 24 >> 24;
     switch ($20|0) {
     case 53: case 51: case 50: case 49:  {
      break;
     }
     default: {
      $$023 = $0;
      break L1;
     }
     }
     $21 = ((($14)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4,$21);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
     $22 = HEAP32[$13>>2]|0;
     $23 = ((($2)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22>>>0)<($24>>>0);
     if ($25) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22,$3);
      $26 = HEAP32[$13>>2]|0;
      $27 = ((($26)) + 24|0);
      HEAP32[$13>>2] = $27;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $28 = ((($0)) + 2|0);
     $29 = ((($2)) + 60|0);
     HEAP8[$29>>0] = 1;
     $$023 = $28;
     break L1;
     break;
    }
    case 68:  {
     break;
    }
    default: {
     $$023 = $0;
     break L1;
    }
    }
    $30 = ((($0)) + 1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    switch ($32|0) {
    case 53: case 50: case 49: case 48:  {
     break;
    }
    default: {
     $$023 = $0;
     break L1;
    }
    }
    $33 = ((($14)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($7,$33);
    $34 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7,0,3954)|0);
    ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $35 = (($7) + ($$0$i$i$i<<2)|0);
     HEAP32[$35>>2] = 0;
     $36 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $36;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
    $37 = HEAP32[$13>>2]|0;
    $38 = ((($2)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37>>>0)<($39>>>0);
    if ($40) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37,$5);
     $41 = HEAP32[$13>>2]|0;
     $42 = ((($41)) + 24|0);
     HEAP32[$13>>2] = $42;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    $43 = ((($0)) + 2|0);
    $44 = ((($2)) + 60|0);
    HEAP8[$44>>0] = 1;
    $$023 = $43;
   }
  } else {
   $$023 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$023|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i133 = 0, $$0$i$i$add$i139 = 0, $$0$i$i$add$i143 = 0, $$0$i$i$add$i148 = 0, $$0$i$i$add$i154 = 0, $$0$i$i$add$i158 = 0, $$0$i$i$add$i162 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i132 = 0, $$0$i$i$idx$i138 = 0, $$0$i$i$idx$i142 = 0, $$0$i$i$idx$i147 = 0, $$0$i$i$idx$i153 = 0, $$0$i$i$idx$i157 = 0, $$0$i$i$idx$i161 = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0;
 var $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $$ptr$i = 0, $$ptr$i134 = 0, $$ptr$i140 = 0, $$ptr$i144 = 0, $$ptr$i149 = 0, $$ptr$i155 = 0, $$ptr$i159 = 0, $$ptr$i163 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i$i = 0, $isdigit = 0, $isdigit127 = 0, $isdigit129 = 0, $isdigit131 = 0, $isdigittmp = 0, $isdigittmp126 = 0, $isdigittmp128 = 0;
 var $isdigittmp130 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 104|0;
 $3 = sp + 109|0;
 $4 = sp + 108|0;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 40|0;
 $8 = sp + 28|0;
 $9 = sp + 16|0;
 $10 = sp + 4|0;
 $11 = sp;
 $12 = $1;
 $13 = $0;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)>(2);
 L1: do {
  if ($15) {
   $16 = HEAP8[$0>>0]|0;
   $17 = ($16<<24>>24)==(85);
   if ($17) {
    $18 = ((($0)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    switch ($20|0) {
    case 116:  {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     $21 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4685)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6,4685,$21);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
     $22 = ((($2)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($2)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($23>>>0)<($25>>>0);
     if ($26) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23,$5);
      $27 = HEAP32[$22>>2]|0;
      $28 = ((($27)) + 24|0);
      HEAP32[$22>>2] = $28;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $29 = ((($0)) + 2|0);
     $30 = ($29|0)==($1|0);
     if ($30) {
      $31 = HEAP32[$22>>2]|0;
      $$0$i$i$idx$i = 0;
      while(1) {
       $32 = ($$0$i$i$idx$i|0)==(-1);
       if ($32) {
        break;
       }
       $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
       $$ptr$i = (($31) + (($$0$i$i$add$i*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      $33 = ((($31)) + -24|0);
      HEAP32[$22>>2] = $33;
      $$7 = $0;
      break L1;
     }
     $34 = HEAP8[$29>>0]|0;
     $35 = $34 << 24 >> 24;
     $isdigittmp128 = (($35) + -48)|0;
     $isdigit129 = ($isdigittmp128>>>0)<(10);
     if ($isdigit129) {
      $36 = ((($0)) + 3|0);
      $$0110 = $36;
      while(1) {
       $37 = ($$0110|0)==($1|0);
       if ($37) {
        $$0110$lcssa = $1;
        break;
       }
       $38 = HEAP8[$$0110>>0]|0;
       $39 = $38 << 24 >> 24;
       $isdigittmp130 = (($39) + -48)|0;
       $isdigit131 = ($isdigittmp130>>>0)<(10);
       if (!($isdigit131)) {
        $$0110$lcssa = $$0110;
        break;
       }
       $40 = ((($$0110)) + 1|0);
       $$0110 = $40;
      }
      $41 = HEAP32[$22>>2]|0;
      $42 = ((($41)) + -24|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($42,$29,$$0110$lcssa);
      $$0116 = $$0110$lcssa;
     } else {
      $$0116 = $29;
     }
     $43 = HEAP32[$22>>2]|0;
     $44 = ((($43)) + -24|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($44,39);
     $45 = ($$0116|0)==($1|0);
     if (!($45)) {
      $46 = HEAP8[$$0116>>0]|0;
      $47 = ($46<<24>>24)==(95);
      if ($47) {
       $51 = ((($$0116)) + 1|0);
       $$7 = $51;
       break L1;
      }
     }
     $48 = HEAP32[$22>>2]|0;
     $$0$i$i$idx$i132 = 0;
     while(1) {
      $49 = ($$0$i$i$idx$i132|0)==(-1);
      if ($49) {
       break;
      }
      $$0$i$i$add$i133 = (($$0$i$i$idx$i132) + -1)|0;
      $$ptr$i134 = (($48) + (($$0$i$i$add$i133*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i134);
      $$0$i$i$idx$i132 = $$0$i$i$add$i133;
     }
     $50 = ((($48)) + -24|0);
     HEAP32[$22>>2] = $50;
     $$7 = $0;
     break L1;
     break;
    }
    case 108:  {
     break;
    }
    default: {
     $$7 = $0;
     break L1;
    }
    }
    ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
    $52 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4694)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($8,4694,$52);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
    $53 = ((($2)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($2)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54>>>0)<($56>>>0);
    if ($57) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54,$7);
     $58 = HEAP32[$53>>2]|0;
     $59 = ((($58)) + 24|0);
     HEAP32[$53>>2] = $59;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    $60 = ((($0)) + 2|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = ($61<<24>>24)==(118);
    do {
     if ($62) {
      $63 = HEAP32[$53>>2]|0;
      $64 = ((($63)) + -24|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($64,41);
      $65 = ((($0)) + 3|0);
      $$2108 = $65;
     } else {
      $66 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($60,$1,$2)|0);
      $67 = ($66|0)==($60|0);
      if ($67) {
       $68 = HEAP32[$53>>2]|0;
       $$0$i$i$idx$i138 = 0;
       while(1) {
        $69 = ($$0$i$i$idx$i138|0)==(-1);
        if ($69) {
         break;
        }
        $$0$i$i$add$i139 = (($$0$i$i$idx$i138) + -1)|0;
        $$ptr$i140 = (($68) + (($$0$i$i$add$i139*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i140);
        $$0$i$i$idx$i138 = $$0$i$i$add$i139;
       }
       $70 = ((($68)) + -24|0);
       HEAP32[$53>>2] = $70;
       $$7 = $0;
       break L1;
      }
      $71 = HEAP32[$53>>2]|0;
      $72 = HEAP32[$2>>2]|0;
      $73 = (($71) - ($72))|0;
      $74 = (($73|0) / 24)&-1;
      $75 = ($74>>>0)<(2);
      if ($75) {
       $$7 = $0;
       break L1;
      }
      $76 = $71;
      $77 = ((($76)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$77);
      $78 = HEAP32[$53>>2]|0;
      $$0$i$i$idx$i142 = 0;
      while(1) {
       $79 = ($$0$i$i$idx$i142|0)==(-1);
       if ($79) {
        break;
       }
       $$0$i$i$add$i143 = (($$0$i$i$idx$i142) + -1)|0;
       $$ptr$i144 = (($78) + (($$0$i$i$add$i143*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i144);
       $$0$i$i$idx$i142 = $$0$i$i$add$i143;
      }
      $80 = ((($78)) + -24|0);
      HEAP32[$53>>2] = $80;
      $81 = ((($78)) + -48|0);
      $82 = ((($9)) + 11|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = ($83<<24>>24)<(0);
      $85 = HEAP32[$9>>2]|0;
      $86 = ((($9)) + 4|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $83&255;
      $89 = $84 ? $85 : $9;
      $90 = $84 ? $87 : $88;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($81,$89,$90)|0);
      $$0106 = $66;
      while(1) {
       $91 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0106,$1,$2)|0);
       $92 = ($91|0)==($$0106|0);
       if ($92) {
        label = 54;
        break;
       }
       $93 = HEAP32[$53>>2]|0;
       $94 = HEAP32[$2>>2]|0;
       $95 = (($93) - ($94))|0;
       $96 = (($95|0) / 24)&-1;
       $97 = ($96>>>0)<(2);
       if ($97) {
        label = 82;
        break;
       }
       $98 = $93;
       $99 = ((($98)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10,$99);
       $100 = HEAP8[$82>>0]|0;
       $101 = ($100<<24>>24)<(0);
       if ($101) {
        $102 = HEAP32[$9>>2]|0;
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($102,$3);
        HEAP32[$86>>2] = 0;
       } else {
        HEAP8[$4>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($9,$4);
        HEAP8[$82>>0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($9);
       ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $103 = (($10) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$103>>2] = 0;
        $104 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $104;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $105 = HEAP32[$53>>2]|0;
       $$0$i$i$idx$i147 = 0;
       while(1) {
        $106 = ($$0$i$i$idx$i147|0)==(-1);
        if ($106) {
         break;
        }
        $$0$i$i$add$i148 = (($$0$i$i$idx$i147) + -1)|0;
        $$ptr$i149 = (($105) + (($$0$i$i$add$i148*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i149);
        $$0$i$i$idx$i147 = $$0$i$i$add$i148;
       }
       $107 = ((($105)) + -24|0);
       HEAP32[$53>>2] = $107;
       $108 = HEAP8[$82>>0]|0;
       $109 = ($108<<24>>24)<(0);
       $110 = HEAP32[$86>>2]|0;
       $111 = $108&255;
       $112 = $109 ? $110 : $111;
       $113 = ($112|0)==(0);
       if (!($113)) {
        $114 = ((($105)) + -48|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($114,4106)|0);
        $115 = HEAP32[$53>>2]|0;
        $116 = ((($115)) + -24|0);
        $117 = HEAP8[$82>>0]|0;
        $118 = ($117<<24>>24)<(0);
        $119 = HEAP32[$9>>2]|0;
        $120 = HEAP32[$86>>2]|0;
        $121 = $117&255;
        $122 = $118 ? $119 : $9;
        $123 = $118 ? $120 : $121;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($116,$122,$123)|0);
       }
       $$0106 = $91;
      }
      if ((label|0) == 54) {
       $124 = HEAP32[$53>>2]|0;
       $125 = ((($124)) + -24|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($125,3882)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$2108 = $$0106;
       break;
      }
      else if ((label|0) == 82) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$7 = $0;
       break L1;
      }
     }
    } while(0);
    $126 = ($$2108|0)==($1|0);
    if (!($126)) {
     $127 = HEAP8[$$2108>>0]|0;
     $128 = ($127<<24>>24)==(69);
     if ($128) {
      $132 = ((($$2108)) + 1|0);
      $133 = ($132|0)==($1|0);
      if ($133) {
       $134 = HEAP32[$53>>2]|0;
       $$0$i$i$idx$i157 = 0;
       while(1) {
        $135 = ($$0$i$i$idx$i157|0)==(-1);
        if ($135) {
         break;
        }
        $$0$i$i$add$i158 = (($$0$i$i$idx$i157) + -1)|0;
        $$ptr$i159 = (($134) + (($$0$i$i$add$i158*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i159);
        $$0$i$i$idx$i157 = $$0$i$i$add$i158;
       }
       $136 = ((($134)) + -24|0);
       HEAP32[$53>>2] = $136;
       $$7 = $0;
       break;
      }
      $137 = HEAP8[$132>>0]|0;
      $138 = $137 << 24 >> 24;
      $isdigittmp = (($138) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $139 = ((($$2108)) + 2|0);
       $$0105 = $139;
       while(1) {
        $140 = ($$0105|0)==($1|0);
        if ($140) {
         $$0105$lcssa = $1;
         break;
        }
        $141 = HEAP8[$$0105>>0]|0;
        $142 = $141 << 24 >> 24;
        $isdigittmp126 = (($142) + -48)|0;
        $isdigit127 = ($isdigittmp126>>>0)<(10);
        if (!($isdigit127)) {
         $$0105$lcssa = $$0105;
         break;
        }
        $143 = ((($$0105)) + 1|0);
        $$0105 = $143;
       }
       $144 = HEAP32[$53>>2]|0;
       $145 = ((($144)) + -24|0);
       $146 = ((($145)) + 11|0);
       $147 = HEAP8[$146>>0]|0;
       $148 = ($147<<24>>24)<(0);
       if ($148) {
        $149 = HEAP32[$145>>2]|0;
        $151 = $149;
       } else {
        $151 = $145;
       }
       $150 = ((($151)) + 7|0);
       $152 = $150;
       HEAP32[$11>>2] = $152;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($145,$$byval_copy,$132,$$0105$lcssa)|0);
       $$3109 = $$0105$lcssa;
      } else {
       $$3109 = $132;
      }
      $153 = ($$3109|0)==($1|0);
      if (!($153)) {
       $154 = HEAP8[$$3109>>0]|0;
       $155 = ($154<<24>>24)==(95);
       if ($155) {
        $159 = ((($$3109)) + 1|0);
        $$7 = $159;
        break;
       }
      }
      $156 = HEAP32[$53>>2]|0;
      $$0$i$i$idx$i161 = 0;
      while(1) {
       $157 = ($$0$i$i$idx$i161|0)==(-1);
       if ($157) {
        break;
       }
       $$0$i$i$add$i162 = (($$0$i$i$idx$i161) + -1)|0;
       $$ptr$i163 = (($156) + (($$0$i$i$add$i162*24)|0)|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i163);
       $$0$i$i$idx$i161 = $$0$i$i$add$i162;
      }
      $158 = ((($156)) + -24|0);
      HEAP32[$53>>2] = $158;
      $$7 = $0;
      break;
     }
    }
    $129 = HEAP32[$53>>2]|0;
    $$0$i$i$idx$i153 = 0;
    while(1) {
     $130 = ($$0$i$i$idx$i153|0)==(-1);
     if ($130) {
      break;
     }
     $$0$i$i$add$i154 = (($$0$i$i$idx$i153) + -1)|0;
     $$ptr$i155 = (($129) + (($$0$i$i$add$i154*24)|0)|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i155);
     $$0$i$i$idx$i153 = $$0$i$i$add$i154;
    }
    $131 = ((($129)) + -24|0);
    HEAP32[$53>>2] = $131;
    $$7 = $0;
   } else {
    $$7 = $0;
   }
  } else {
   $$7 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1104|0);
 $3 = sp + 1080|0;
 $4 = sp + 1056|0;
 $5 = sp + 1032|0;
 $6 = sp + 1008|0;
 $7 = sp + 984|0;
 $8 = sp + 960|0;
 $9 = sp + 936|0;
 $10 = sp + 912|0;
 $11 = sp + 888|0;
 $12 = sp + 864|0;
 $13 = sp + 840|0;
 $14 = sp + 816|0;
 $15 = sp + 792|0;
 $16 = sp + 768|0;
 $17 = sp + 744|0;
 $18 = sp + 720|0;
 $19 = sp + 696|0;
 $20 = sp + 672|0;
 $21 = sp + 648|0;
 $22 = sp + 624|0;
 $23 = sp + 600|0;
 $24 = sp + 576|0;
 $25 = sp + 552|0;
 $26 = sp + 528|0;
 $27 = sp + 504|0;
 $28 = sp + 480|0;
 $29 = sp + 456|0;
 $30 = sp + 432|0;
 $31 = sp + 408|0;
 $32 = sp + 384|0;
 $33 = sp + 360|0;
 $34 = sp + 336|0;
 $35 = sp + 312|0;
 $36 = sp + 288|0;
 $37 = sp + 264|0;
 $38 = sp + 240|0;
 $39 = sp + 216|0;
 $40 = sp + 192|0;
 $41 = sp + 168|0;
 $42 = sp + 144|0;
 $43 = sp + 120|0;
 $44 = sp + 96|0;
 $45 = sp + 72|0;
 $46 = sp + 48|0;
 $47 = sp + 24|0;
 $48 = sp;
 $49 = $1;
 $50 = $0;
 $51 = (($49) - ($50))|0;
 $52 = ($51|0)>(1);
 L1: do {
  if ($52) {
   $53 = HEAP8[$0>>0]|0;
   $54 = $53 << 24 >> 24;
   do {
    switch ($54|0) {
    case 97:  {
     $55 = ((($0)) + 1|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     switch ($57|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3,4184);
      $58 = ((($2)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($2)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($59>>>0)<($61>>>0);
      if ($62) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($59,$3);
       $63 = HEAP32[$58>>2]|0;
       $64 = ((($63)) + 24|0);
       HEAP32[$58>>2] = $64;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $65 = ((($0)) + 2|0);
      $$3 = $65;
      break L1;
      break;
     }
     case 110: case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($4,4195);
      $66 = ((($2)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($2)) + 8|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67>>>0)<($69>>>0);
      if ($70) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($67,$4);
       $71 = HEAP32[$66>>2]|0;
       $72 = ((($71)) + 24|0);
       HEAP32[$66>>2] = $72;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $73 = ((($0)) + 2|0);
      $$3 = $73;
      break L1;
      break;
     }
     case 78:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($5,4205);
      $74 = ((($2)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($2)) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75>>>0)<($77>>>0);
      if ($78) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($75,$5);
       $79 = HEAP32[$74>>2]|0;
       $80 = ((($79)) + 24|0);
       HEAP32[$74>>2] = $80;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $81 = ((($0)) + 2|0);
      $$3 = $81;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($6,4216);
      $82 = ((($2)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($2)) + 8|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83>>>0)<($85>>>0);
      if ($86) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($83,$6);
       $87 = HEAP32[$82>>2]|0;
       $88 = ((($87)) + 24|0);
       HEAP32[$82>>2] = $88;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$6);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $89 = ((($0)) + 2|0);
      $$3 = $89;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $90 = ((($0)) + 1|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91 << 24 >> 24;
     switch ($92|0) {
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($7,4226);
      $93 = ((($2)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ((($2)) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($94>>>0)<($96>>>0);
      if ($97) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($94,$7);
       $98 = HEAP32[$93>>2]|0;
       $99 = ((($98)) + 24|0);
       HEAP32[$93>>2] = $99;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $100 = ((($0)) + 2|0);
      $$3 = $100;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($8,4237);
      $101 = ((($2)) + 4|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ((($2)) + 8|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($102>>>0)<($104>>>0);
      if ($105) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($102,$8);
       $106 = HEAP32[$101>>2]|0;
       $107 = ((($106)) + 24|0);
       HEAP32[$101>>2] = $107;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$8);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $108 = ((($0)) + 2|0);
      $$3 = $108;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($9,4247);
      $109 = ((($2)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($2)) + 8|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($110>>>0)<($112>>>0);
      if ($113) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($110,$9);
       $114 = HEAP32[$109>>2]|0;
       $115 = ((($114)) + 24|0);
       HEAP32[$109>>2] = $115;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$9);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $116 = ((($0)) + 2|0);
      $$3 = $116;
      break L1;
      break;
     }
     case 118:  {
      $117 = ((($2)) + 63|0);
      $118 = HEAP8[$117>>0]|0;
      HEAP8[$117>>0] = 0;
      $119 = ((($0)) + 2|0);
      $120 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($119,$1,$2)|0);
      HEAP8[$117>>0] = $118;
      $121 = ($120|0)==($119|0);
      if ($121) {
       $$3 = $0;
       break L1;
      }
      $122 = HEAP32[$2>>2]|0;
      $123 = ((($2)) + 4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($122|0)==($124|0);
      if ($125) {
       $$3 = $0;
       break L1;
      }
      $126 = ((($124)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($126,0,4257)|0);
      $127 = ((($2)) + 60|0);
      HEAP8[$127>>0] = 1;
      $$3 = $120;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $128 = ((($0)) + 1|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129 << 24 >> 24;
     switch ($130|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($10,4267);
      $131 = ((($2)) + 4|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($2)) + 8|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132>>>0)<($134>>>0);
      if ($135) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($132,$10);
       $136 = HEAP32[$131>>2]|0;
       $137 = ((($136)) + 24|0);
       HEAP32[$131>>2] = $137;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$10);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $138 = ((($0)) + 2|0);
      $$3 = $138;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($11,4285);
      $139 = ((($2)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($2)) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140>>>0)<($142>>>0);
      if ($143) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($140,$11);
       $144 = HEAP32[$139>>2]|0;
       $145 = ((($144)) + 24|0);
       HEAP32[$139>>2] = $145;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$11);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $146 = ((($0)) + 2|0);
      $$3 = $146;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm16EEERAT__Kc($12);
      $147 = ((($2)) + 4|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($2)) + 8|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($148>>>0)<($150>>>0);
      if ($151) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($148,$12);
       $152 = HEAP32[$147>>2]|0;
       $153 = ((($152)) + 24|0);
       HEAP32[$147>>2] = $153;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$12);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $154 = ((($0)) + 2|0);
      $$3 = $154;
      break L1;
      break;
     }
     case 118:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($13,4295);
      $155 = ((($2)) + 4|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ((($2)) + 8|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($156>>>0)<($158>>>0);
      if ($159) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($156,$13);
       $160 = HEAP32[$155>>2]|0;
       $161 = ((($160)) + 24|0);
       HEAP32[$155>>2] = $161;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$13);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $162 = ((($0)) + 2|0);
      $$3 = $162;
      break L1;
      break;
     }
     case 86:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($14,4305);
      $163 = ((($2)) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ((($2)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($164>>>0)<($166>>>0);
      if ($167) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($164,$14);
       $168 = HEAP32[$163>>2]|0;
       $169 = ((($168)) + 24|0);
       HEAP32[$163>>2] = $169;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$14);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $170 = ((($0)) + 2|0);
      $$3 = $170;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $171 = ((($0)) + 1|0);
     $172 = HEAP8[$171>>0]|0;
     $173 = $172 << 24 >> 24;
     switch ($173|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($15,4316);
      $174 = ((($2)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ((($2)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($175>>>0)<($177>>>0);
      if ($178) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($175,$15);
       $179 = HEAP32[$174>>2]|0;
       $180 = ((($179)) + 24|0);
       HEAP32[$174>>2] = $180;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$15);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $181 = ((($0)) + 2|0);
      $$3 = $181;
      break L1;
      break;
     }
     case 79:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($16,4326);
      $182 = ((($2)) + 4|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = ((($2)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($183>>>0)<($185>>>0);
      if ($186) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183,$16);
       $187 = HEAP32[$182>>2]|0;
       $188 = ((($187)) + 24|0);
       HEAP32[$182>>2] = $188;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$16);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $189 = ((($0)) + 2|0);
      $$3 = $189;
      break L1;
      break;
     }
     case 113:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($17,4337);
      $190 = ((($2)) + 4|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ((($2)) + 8|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($191>>>0)<($193>>>0);
      if ($194) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191,$17);
       $195 = HEAP32[$190>>2]|0;
       $196 = ((($195)) + 24|0);
       HEAP32[$190>>2] = $196;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$17);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
      $197 = ((($0)) + 2|0);
      $$3 = $197;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $198 = ((($0)) + 1|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = $199 << 24 >> 24;
     switch ($200|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($18,4348);
      $201 = ((($2)) + 4|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ((($2)) + 8|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($202>>>0)<($204>>>0);
      if ($205) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($202,$18);
       $206 = HEAP32[$201>>2]|0;
       $207 = ((($206)) + 24|0);
       HEAP32[$201>>2] = $207;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$18);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $208 = ((($0)) + 2|0);
      $$3 = $208;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($19,4359);
      $209 = ((($2)) + 4|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ((($2)) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($210,$19);
       $214 = HEAP32[$209>>2]|0;
       $215 = ((($214)) + 24|0);
       HEAP32[$209>>2] = $215;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$19);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $216 = ((($0)) + 2|0);
      $$3 = $216;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $217 = ((($0)) + 1|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = ($218<<24>>24)==(120);
     if (!($219)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($20,4369);
     $220 = ((($2)) + 4|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ((($2)) + 8|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($221>>>0)<($223>>>0);
     if ($224) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($221,$20);
      $225 = HEAP32[$220>>2]|0;
      $226 = ((($225)) + 24|0);
      HEAP32[$220>>2] = $226;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$20);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $227 = ((($0)) + 2|0);
     $$3 = $227;
     break L1;
     break;
    }
    case 108:  {
     $228 = ((($0)) + 1|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229 << 24 >> 24;
     switch ($230|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($21,4380);
      $231 = ((($2)) + 4|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ((($2)) + 8|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($232>>>0)<($234>>>0);
      if ($235) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($232,$21);
       $236 = HEAP32[$231>>2]|0;
       $237 = ((($236)) + 24|0);
       HEAP32[$231>>2] = $237;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$21);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $238 = ((($0)) + 2|0);
      $$3 = $238;
      break L1;
      break;
     }
     case 105:  {
      $239 = ((($0)) + 2|0);
      $240 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($239,$1,$2)|0);
      $241 = ($240|0)==($239|0);
      if ($241) {
       $$3 = $0;
       break L1;
      }
      $242 = HEAP32[$2>>2]|0;
      $243 = ((($2)) + 4|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = ($242|0)==($244|0);
      if ($245) {
       $$3 = $0;
       break L1;
      }
      $246 = ((($244)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($246,0,4391)|0);
      $$3 = $240;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($22,4403);
      $247 = ((($2)) + 4|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ((($2)) + 8|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = ($248>>>0)<($250>>>0);
      if ($251) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($248,$22);
       $252 = HEAP32[$247>>2]|0;
       $253 = ((($252)) + 24|0);
       HEAP32[$247>>2] = $253;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$22);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $254 = ((($0)) + 2|0);
      $$3 = $254;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($23,4414);
      $255 = ((($2)) + 4|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($2)) + 8|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($256>>>0)<($258>>>0);
      if ($259) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($256,$23);
       $260 = HEAP32[$255>>2]|0;
       $261 = ((($260)) + 24|0);
       HEAP32[$255>>2] = $261;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$23);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $262 = ((($0)) + 2|0);
      $$3 = $262;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($24,4426);
      $263 = ((($2)) + 4|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ((($2)) + 8|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ($264>>>0)<($266>>>0);
      if ($267) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($264,$24);
       $268 = HEAP32[$263>>2]|0;
       $269 = ((($268)) + 24|0);
       HEAP32[$263>>2] = $269;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$24);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $270 = ((($0)) + 2|0);
      $$3 = $270;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $271 = ((($0)) + 1|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = $272 << 24 >> 24;
     switch ($273|0) {
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($25,4436);
      $274 = ((($2)) + 4|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = ((($2)) + 8|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = ($275>>>0)<($277>>>0);
      if ($278) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($275,$25);
       $279 = HEAP32[$274>>2]|0;
       $280 = ((($279)) + 24|0);
       HEAP32[$274>>2] = $280;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$25);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $281 = ((($0)) + 2|0);
      $$3 = $281;
      break L1;
      break;
     }
     case 73:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($26,4446);
      $282 = ((($2)) + 4|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ((($2)) + 8|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = ($283>>>0)<($285>>>0);
      if ($286) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($283,$26);
       $287 = HEAP32[$282>>2]|0;
       $288 = ((($287)) + 24|0);
       HEAP32[$282>>2] = $288;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$26);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $289 = ((($0)) + 2|0);
      $$3 = $289;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($27,4285);
      $290 = ((($2)) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = ((($2)) + 8|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = ($291>>>0)<($293>>>0);
      if ($294) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($291,$27);
       $295 = HEAP32[$290>>2]|0;
       $296 = ((($295)) + 24|0);
       HEAP32[$290>>2] = $296;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$27);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $297 = ((($0)) + 2|0);
      $$3 = $297;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($28,4457);
      $298 = ((($2)) + 4|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = ((($2)) + 8|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = ($299>>>0)<($301>>>0);
      if ($302) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($299,$28);
       $303 = HEAP32[$298>>2]|0;
       $304 = ((($303)) + 24|0);
       HEAP32[$298>>2] = $304;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$28);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $305 = ((($0)) + 2|0);
      $$3 = $305;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($29,4468);
      $306 = ((($2)) + 4|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ((($2)) + 8|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ($307>>>0)<($309>>>0);
      if ($310) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($307,$29);
       $311 = HEAP32[$306>>2]|0;
       $312 = ((($311)) + 24|0);
       HEAP32[$306>>2] = $312;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$29);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $313 = ((($0)) + 2|0);
      $$3 = $313;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $314 = ((($0)) + 1|0);
     $315 = HEAP8[$314>>0]|0;
     $316 = $315 << 24 >> 24;
     switch ($316|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($30,4479);
      $317 = ((($2)) + 4|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ((($2)) + 8|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ($318>>>0)<($320>>>0);
      if ($321) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($318,$30);
       $322 = HEAP32[$317>>2]|0;
       $323 = ((($322)) + 24|0);
       HEAP32[$317>>2] = $323;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$30);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $324 = ((($0)) + 2|0);
      $$3 = $324;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($31,4494);
      $325 = ((($2)) + 4|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ((($2)) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($326>>>0)<($328>>>0);
      if ($329) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($326,$31);
       $330 = HEAP32[$325>>2]|0;
       $331 = ((($330)) + 24|0);
       HEAP32[$325>>2] = $331;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$31);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $332 = ((($0)) + 2|0);
      $$3 = $332;
      break L1;
      break;
     }
     case 103:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($32,4436);
      $333 = ((($2)) + 4|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = ((($2)) + 8|0);
      $336 = HEAP32[$335>>2]|0;
      $337 = ($334>>>0)<($336>>>0);
      if ($337) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($334,$32);
       $338 = HEAP32[$333>>2]|0;
       $339 = ((($338)) + 24|0);
       HEAP32[$333>>2] = $339;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$32);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
      $340 = ((($0)) + 2|0);
      $$3 = $340;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($33,4505);
      $341 = ((($2)) + 4|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ((($2)) + 8|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = ($342>>>0)<($344>>>0);
      if ($345) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($342,$33);
       $346 = HEAP32[$341>>2]|0;
       $347 = ((($346)) + 24|0);
       HEAP32[$341>>2] = $347;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$33);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
      $348 = ((($0)) + 2|0);
      $$3 = $348;
      break L1;
      break;
     }
     case 119:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($34,4515);
      $349 = ((($2)) + 4|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = ((($2)) + 8|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($350>>>0)<($352>>>0);
      if ($353) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($350,$34);
       $354 = HEAP32[$349>>2]|0;
       $355 = ((($354)) + 24|0);
       HEAP32[$349>>2] = $355;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$34);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
      $356 = ((($0)) + 2|0);
      $$3 = $356;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $357 = ((($0)) + 1|0);
     $358 = HEAP8[$357>>0]|0;
     $359 = $358 << 24 >> 24;
     switch ($359|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($35,4528);
      $360 = ((($2)) + 4|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ((($2)) + 8|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = ($361>>>0)<($363>>>0);
      if ($364) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($361,$35);
       $365 = HEAP32[$360>>2]|0;
       $366 = ((($365)) + 24|0);
       HEAP32[$360>>2] = $366;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$35);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
      $367 = ((($0)) + 2|0);
      $$3 = $367;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($36,4539);
      $368 = ((($2)) + 4|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ((($2)) + 8|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ($369>>>0)<($371>>>0);
      if ($372) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($369,$36);
       $373 = HEAP32[$368>>2]|0;
       $374 = ((($373)) + 24|0);
       HEAP32[$368>>2] = $374;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$36);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $375 = ((($0)) + 2|0);
      $$3 = $375;
      break L1;
      break;
     }
     case 82:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($37,4549);
      $376 = ((($2)) + 4|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ((($2)) + 8|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($377>>>0)<($379>>>0);
      if ($380) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($377,$37);
       $381 = HEAP32[$376>>2]|0;
       $382 = ((($381)) + 24|0);
       HEAP32[$376>>2] = $382;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$37);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
      $383 = ((($0)) + 2|0);
      $$3 = $383;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $384 = ((($0)) + 1|0);
     $385 = HEAP8[$384>>0]|0;
     $386 = $385 << 24 >> 24;
     switch ($386|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($38,4560);
      $387 = ((($2)) + 4|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = ((($2)) + 8|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = ($388>>>0)<($390>>>0);
      if ($391) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($388,$38);
       $392 = HEAP32[$387>>2]|0;
       $393 = ((($392)) + 24|0);
       HEAP32[$387>>2] = $393;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$38);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
      $394 = ((($0)) + 2|0);
      $$3 = $394;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($39,4572);
      $395 = ((($2)) + 4|0);
      $396 = HEAP32[$395>>2]|0;
      $397 = ((($2)) + 8|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = ($396>>>0)<($398>>>0);
      if ($399) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($396,$39);
       $400 = HEAP32[$395>>2]|0;
       $401 = ((($400)) + 24|0);
       HEAP32[$395>>2] = $401;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$39);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
      $402 = ((($0)) + 2|0);
      $$3 = $402;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($40,4582);
      $403 = ((($2)) + 4|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = ((($2)) + 8|0);
      $406 = HEAP32[$405>>2]|0;
      $407 = ($404>>>0)<($406>>>0);
      if ($407) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($404,$40);
       $408 = HEAP32[$403>>2]|0;
       $409 = ((($408)) + 24|0);
       HEAP32[$403>>2] = $409;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$40);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $410 = ((($0)) + 2|0);
      $$3 = $410;
      break L1;
      break;
     }
     case 112:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($41,4593);
      $411 = ((($2)) + 4|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = ((($2)) + 8|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = ($412>>>0)<($414>>>0);
      if ($415) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($412,$41);
       $416 = HEAP32[$411>>2]|0;
       $417 = ((($416)) + 24|0);
       HEAP32[$411>>2] = $417;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$41);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
      $418 = ((($0)) + 2|0);
      $$3 = $418;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($42,4572);
      $419 = ((($2)) + 4|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = ((($2)) + 8|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = ($420>>>0)<($422>>>0);
      if ($423) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($420,$42);
       $424 = HEAP32[$419>>2]|0;
       $425 = ((($424)) + 24|0);
       HEAP32[$419>>2] = $425;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$42);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
      $426 = ((($0)) + 2|0);
      $$3 = $426;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($43,4604);
      $427 = ((($2)) + 4|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = ((($2)) + 8|0);
      $430 = HEAP32[$429>>2]|0;
      $431 = ($428>>>0)<($430>>>0);
      if ($431) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($428,$43);
       $432 = HEAP32[$427>>2]|0;
       $433 = ((($432)) + 24|0);
       HEAP32[$427>>2] = $433;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$43);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $434 = ((($0)) + 2|0);
      $$3 = $434;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $435 = ((($0)) + 1|0);
     $436 = HEAP8[$435>>0]|0;
     $437 = ($436<<24>>24)==(117);
     if (!($437)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($44,4615);
     $438 = ((($2)) + 4|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ((($2)) + 8|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = ($439>>>0)<($441>>>0);
     if ($442) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($439,$44);
      $443 = HEAP32[$438>>2]|0;
      $444 = ((($443)) + 24|0);
      HEAP32[$438>>2] = $444;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$44);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
     $445 = ((($0)) + 2|0);
     $$3 = $445;
     break L1;
     break;
    }
    case 114:  {
     $446 = ((($0)) + 1|0);
     $447 = HEAP8[$446>>0]|0;
     $448 = $447 << 24 >> 24;
     switch ($448|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($45,4625);
      $449 = ((($2)) + 4|0);
      $450 = HEAP32[$449>>2]|0;
      $451 = ((($2)) + 8|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = ($450>>>0)<($452>>>0);
      if ($453) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($450,$45);
       $454 = HEAP32[$449>>2]|0;
       $455 = ((($454)) + 24|0);
       HEAP32[$449>>2] = $455;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$45);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $456 = ((($0)) + 2|0);
      $$3 = $456;
      break L1;
      break;
     }
     case 77:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($46,4635);
      $457 = ((($2)) + 4|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = ((($2)) + 8|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ($458>>>0)<($460>>>0);
      if ($461) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($458,$46);
       $462 = HEAP32[$457>>2]|0;
       $463 = ((($462)) + 24|0);
       HEAP32[$457>>2] = $463;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$46);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
      $464 = ((($0)) + 2|0);
      $$3 = $464;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($47,4646);
      $465 = ((($2)) + 4|0);
      $466 = HEAP32[$465>>2]|0;
      $467 = ((($2)) + 8|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = ($466>>>0)<($468>>>0);
      if ($469) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($466,$47);
       $470 = HEAP32[$465>>2]|0;
       $471 = ((($470)) + 24|0);
       HEAP32[$465>>2] = $471;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$47);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
      $472 = ((($0)) + 2|0);
      $$3 = $472;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($48,4657);
      $473 = ((($2)) + 4|0);
      $474 = HEAP32[$473>>2]|0;
      $475 = ((($2)) + 8|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = ($474>>>0)<($476>>>0);
      if ($477) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($474,$48);
       $478 = HEAP32[$473>>2]|0;
       $479 = ((($478)) + 24|0);
       HEAP32[$473>>2] = $479;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$48);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($48);
      $480 = ((($0)) + 2|0);
      $$3 = $480;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 118:  {
     $481 = ((($0)) + 1|0);
     $482 = HEAP8[$481>>0]|0;
     $483 = $482 << 24 >> 24;
     $isdigittmp = (($483) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$3 = $0;
      break L1;
     }
     $484 = ((($0)) + 2|0);
     $485 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($484,$1,$2)|0);
     $486 = ($485|0)==($484|0);
     if ($486) {
      $$3 = $0;
      break L1;
     }
     $487 = HEAP32[$2>>2]|0;
     $488 = ((($2)) + 4|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = ($487|0)==($489|0);
     if ($490) {
      $$3 = $0;
      break L1;
     }
     $491 = ((($489)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($491,0,4257)|0);
     $$3 = $485;
     break L1;
     break;
    }
    default: {
     $$3 = $0;
     break L1;
    }
    }
   } while(0);
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,10);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,9);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,17);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm16EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,4669,15);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,11);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,14);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,12);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $scevgep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = sp + 12|0;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 2147483647;
  $phitmp$i = (($14) + -1)|0;
  $36 = $11;$37 = $phitmp$i;
 } else {
  $9 = $7&255;
  $36 = $9;$37 = 10;
 }
 $15 = $2;
 $16 = (($15) - ($3))|0;
 $17 = ($16|0)==(0);
 do {
  if (!($17)) {
   if ($8) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $18;$24 = $20;
   } else {
    $21 = $7&255;
    $23 = $0;$24 = $21;
   }
   $22 = (($23) + ($24)|0);
   $25 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1,$23,$22)|0);
   if ($25) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4,$1,$2);
    $26 = ((($4)) + 11|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)<(0);
    $29 = HEAP32[$4>>2]|0;
    $30 = ((($4)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27&255;
    $33 = $28 ? $29 : $4;
    $34 = $28 ? $31 : $32;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0,$33,$34)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    break;
   }
   $35 = (($37) - ($36))|0;
   $38 = ($35>>>0)<($16>>>0);
   if ($38) {
    $39 = (($36) + ($16))|0;
    $40 = (($39) - ($37))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0,$37,$40,$36,$36,0);
   }
   $41 = HEAP8[$6>>0]|0;
   $42 = ($41<<24>>24)<(0);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $45 = $43;
   } else {
    $45 = $0;
   }
   $44 = (($45) + ($36)|0);
   $46 = (($36) - ($3))|0;
   $scevgep = (($2) + ($46)|0);
   $scevgep5 = $scevgep;
   $$0 = $44;$$040 = $1;
   while(1) {
    $47 = ($$040|0)==($2|0);
    if ($47) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$040);
    $48 = ((($$0)) + 1|0);
    $49 = ((($$040)) + 1|0);
    $$0 = $48;$$040 = $49;
   }
   $scevgep6 = (($45) + ($scevgep5)|0);
   HEAP8[$5>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep6,$5);
   $50 = (($36) + ($16))|0;
   $51 = HEAP8[$6>>0]|0;
   $52 = ($51<<24>>24)<(0);
   if ($52) {
    $53 = ((($0)) + 4|0);
    HEAP32[$53>>2] = $50;
    break;
   } else {
    $54 = $50&255;
    HEAP8[$6>>0] = $54;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$059 = 0, $$1 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$0$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = sp + 20|0;
 $7 = ((($0)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $12 = $10;
 } else {
  $12 = $0;
 }
 $11 = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) - ($11))|0;
 $15 = $3;
 $16 = $2;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)==(0);
 do {
  if ($18) {
   $70 = $8;
   label = 27;
  } else {
   if ($9) {
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($0)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $19;$25 = $21;
   } else {
    $22 = $8&255;
    $24 = $0;$25 = $22;
   }
   $23 = (($24) + ($25)|0);
   $26 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($2,$24,$23)|0);
   if ($26) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4,$2,$3);
    HEAP32[$5>>2] = $13;
    $27 = ((($4)) + 11|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)<(0);
    $30 = HEAP32[$4>>2]|0;
    $31 = ((($4)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $28&255;
    $34 = $29 ? $30 : $4;
    $35 = $29 ? $32 : $33;
    $36 = (($34) + ($35)|0);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
    $37 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0,$$byval_copy,$34,$36)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$sroa$0$1 = $37;
    break;
   }
   $38 = HEAP8[$7>>0]|0;
   $39 = ($38<<24>>24)<(0);
   if ($39) {
    $41 = ((($0)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 & 2147483647;
    $phitmp$i = (($45) + -1)|0;
    $47 = $42;$48 = $phitmp$i;
   } else {
    $40 = $38&255;
    $47 = $40;$48 = 10;
   }
   $46 = (($48) - ($47))|0;
   $49 = ($46>>>0)<($17>>>0);
   if ($49) {
    $56 = (($47) + ($17))|0;
    $57 = (($56) - ($48))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0,$48,$57,$47,$14,$17);
    $58 = HEAP32[$0>>2]|0;
    $$0 = $58;
   } else {
    if ($39) {
     $50 = HEAP32[$0>>2]|0;
     $54 = $50;
    } else {
     $54 = $0;
    }
    $51 = (($47) - ($14))|0;
    $52 = ($51|0)==(0);
    if ($52) {
     $$0 = $54;
    } else {
     $53 = (($54) + ($14)|0);
     $55 = (($53) + ($17)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcm($55,$53,$51)|0);
     $$0 = $54;
    }
   }
   $59 = (($47) + ($17))|0;
   $60 = HEAP8[$7>>0]|0;
   $61 = ($60<<24>>24)<(0);
   if ($61) {
    $62 = ((($0)) + 4|0);
    HEAP32[$62>>2] = $59;
   } else {
    $63 = $59&255;
    HEAP8[$7>>0] = $63;
   }
   $64 = (($$0) + ($59)|0);
   HEAP8[$6>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($64,$6);
   $65 = (($$0) + ($14)|0);
   $$059 = $2;$$1 = $65;
   while(1) {
    $66 = ($$059|0)==($3|0);
    if ($66) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$059);
    $67 = ((($$1)) + 1|0);
    $68 = ((($$059)) + 1|0);
    $$059 = $68;$$1 = $67;
   }
   $$pre = HEAP8[$7>>0]|0;
   $70 = $$pre;
   label = 27;
  }
 } while(0);
 if ((label|0) == 27) {
  $69 = ($70<<24>>24)<(0);
  if ($69) {
   $71 = HEAP32[$0>>2]|0;
   $73 = $71;
  } else {
   $73 = $0;
  }
  $72 = (($73) + ($14)|0);
  $$sroa$0$1 = $72;
 }
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $spec$select = $3 & $4;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6&255;
  $10 = ((($0)) + 11|0);
  HEAP8[$10>>0] = $9;
  $$021 = $0;
 } else {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021 = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$1 = $$021;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$1)) + 1|0);
  $$0 = $20;$$1 = $21;
 }
 $scevgep23 = (($$021) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (-17 - ($1))|0;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ((($0)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $22 = $11;
 } else {
  $22 = $0;
 }
 $12 = ($1>>>0)<(2147483623);
 if ($12) {
  $13 = (($2) + ($1))|0;
  $14 = $1 << 1;
  $15 = ($13>>>0)<($14>>>0);
  $$sroa$speculated = $15 ? $14 : $13;
  $16 = ($$sroa$speculated>>>0)<(11);
  $17 = (($$sroa$speculated) + 16)|0;
  $18 = $17 & -16;
  $phitmp = $16 ? 11 : $18;
  $19 = $phitmp;
 } else {
  $19 = -17;
 }
 $20 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($19)|0);
 $21 = ($4|0)==(0);
 if (!($21)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($20,$22,$4)|0);
 }
 $23 = (($3) - ($4))|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (($20) + ($4)|0);
  $26 = (($25) + ($5)|0);
  $27 = (($22) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($26,$27,$23)|0);
 }
 $28 = ($1|0)==(10);
 if (!($28)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($22);
 }
 HEAP32[$0>>2] = $20;
 $29 = $19 | -2147483648;
 $30 = ((($0)) + 8|0);
 HEAP32[$30>>2] = $29;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $$032$ph = 0, $$032$ph$be = 0, $$034 = 0, $$034$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $$pre44 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = $4 ? $6 : $7;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
  } else {
   $10 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4704)|0);
   $11 = HEAP8[$2>>0]|0;
   $12 = ($11<<24>>24)<(0);
   $13 = HEAP32[$5>>2]|0;
   $14 = $11&255;
   $15 = $12 ? $13 : $14;
   $16 = ($10|0)==($15|0);
   if ($16) {
    $17 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1,4704,$10)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4716);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $19 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4787)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,4787,$19);
     break;
    }
   }
   $20 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4800)|0);
   $21 = HEAP8[$2>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = HEAP32[$5>>2]|0;
   $24 = $21&255;
   $25 = $22 ? $23 : $24;
   $26 = ($20|0)==($25|0);
   if ($26) {
    $27 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1,4800,$20)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4813);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $29 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4863)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,4863,$29);
     break;
    }
   }
   $30 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4877)|0);
   $31 = HEAP8[$2>>0]|0;
   $32 = ($31<<24>>24)<(0);
   $33 = HEAP32[$5>>2]|0;
   $34 = $31&255;
   $35 = $32 ? $33 : $34;
   $36 = ($30|0)==($35|0);
   if ($36) {
    $37 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1,4877,$30)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4890);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $39 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4940)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,4940,$39);
     break;
    }
   }
   $40 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4954)|0);
   $41 = HEAP8[$2>>0]|0;
   $42 = ($41<<24>>24)<(0);
   $43 = HEAP32[$5>>2]|0;
   $44 = $41&255;
   $45 = $42 ? $43 : $44;
   $46 = ($40|0)==($45|0);
   do {
    if ($46) {
     $47 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1,4954,$40)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4968);
      ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $49 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5019)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5019,$49);
      break L1;
     } else {
      $$pre = HEAP8[$2>>0]|0;
      $$pre43 = HEAP32[$5>>2]|0;
      $$pre44 = $$pre&255;
      $$pre$phiZ2D = $$pre44;$51 = $$pre;$55 = $$pre43;
      break;
     }
    } else {
     $$pre$phiZ2D = $44;$51 = $41;$55 = $43;
    }
   } while(0);
   $50 = ($51<<24>>24)<(0);
   $52 = HEAP32[$1>>2]|0;
   $53 = $50 ? $52 : $1;
   $54 = $50 ? $55 : $$pre$phiZ2D;
   $56 = (($53) + ($54)|0);
   $57 = ((($56)) + -1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = ($58<<24>>24)==(62);
   do {
    if ($59) {
     $$032$ph = 1;$$034$ph = $56;
     L24: while(1) {
      $$034 = $$034$ph;
      L26: while(1) {
       $60 = ((($$034)) + -1|0);
       $61 = ($60|0)==($53|0);
       if ($61) {
        break L24;
       }
       $64 = ((($$034)) + -2|0);
       $65 = HEAP8[$64>>0]|0;
       switch ($65<<24>>24) {
       case 60:  {
        label = 24;
        break L26;
        break;
       }
       case 62:  {
        label = 25;
        break L26;
        break;
       }
       default: {
        $$034 = $60;
       }
       }
      }
      if ((label|0) == 24) {
       label = 0;
       $66 = (($$032$ph) + -1)|0;
       $67 = ($66|0)==(0);
       if ($67) {
        label = 27;
        break;
       } else {
        $$032$ph$be = $66;
       }
      }
      else if ((label|0) == 25) {
       label = 0;
       $68 = (($$032$ph) + 1)|0;
       $$032$ph$be = $68;
      }
      $$032$ph = $$032$ph$be;$$034$ph = $60;
     }
     if ((label|0) == 27) {
      $69 = ((($$034)) + -2|0);
      $$2 = $69;
      break;
     }
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break L1;
      }
      $62 = (($0) + ($$0$i$i<<2)|0);
      HEAP32[$62>>2] = 0;
      $63 = (($$0$i$i) + 1)|0;
      $$0$i$i = $63;
     }
    } else {
     $$2 = $56;
    }
   } while(0);
   $$2$pn = $$2;
   while(1) {
    $$0 = ((($$2$pn)) + -1|0);
    $70 = ($$0|0)==($53|0);
    if ($70) {
     $$1 = $53;
     break;
    }
    $71 = HEAP8[$$0>>0]|0;
    $72 = ($71<<24>>24)==(58);
    if ($72) {
     $$1 = $$2$pn;
     break;
    } else {
     $$2$pn = $$0;
    }
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0,$$1,$$2);
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$019 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$1 = $0;
 } else {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
  $5 = ($4|0)==($0|0);
  if ($5) {
   $6 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $$019 = $6;
  } else {
   $$019 = $4;
  }
  $7 = ($$019|0)==($0|0);
  if ($7) {
   $$1 = $0;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($2)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $$1 = $0;
   } else {
    $12 = ((($10)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($12,0,3954)|0);
    $$1 = $$019;
   }
  }
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 12|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $4 = (($3) + ($$0$i$i1<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $5;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0|0;
 var $$sroa$speculated$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = (($6) + 1)|0;
 $8 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0)|0);
 $9 = ($8>>>0)<($7>>>0);
 if ($9) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $10 = ((($0)) + 12|0);
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 24)&-1;
  $16 = $8 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $15 << 1;
  $19 = ($18>>>0)<($7>>>0);
  $$sroa$speculated$i = $19 ? $7 : $18;
  $spec$select$i = $17 ? $$sroa$speculated$i : $8;
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = (($21|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($1,$spec$select$i,$22,$10);
  $23 = ((($1)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
  $25 = ((($24)) + 24|0);
  HEAP32[$23>>2] = $25;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 178956970;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + (($2*24)|0)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + (($1*24)|0)|0);
 HEAP32[$4>>2] = $12;
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -24|0);
  $9 = ((($$0$i)) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8,$9);
  $10 = HEAP32[$5>>2]|0;
  $11 = ((($10)) + -24|0);
  HEAP32[$5>>2] = $11;
  $$0$i = $9;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -24|0);
  HEAP32[$3>>2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = (($14|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1*24)|0;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($1)|0);
 $3 = ((($0)) + 4096|0);
 $4 = ((($0)) + 4096|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  $11 = (_malloc($2)|0);
  $$0 = $11;
 } else {
  $10 = (($5) + ($2)|0);
  HEAP32[$4>>2] = $10;
  $$0 = $5;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$025 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1)|0);
 $8 = ($7|0)==($0|0);
 $9 = ($7|0)==($1|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $$1 = $0;
 } else {
  $10 = HEAP8[$7>>0]|0;
  $11 = ($10<<24>>24)==(69);
  if ($11) {
   $12 = ((($2)) + 11|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)<(0);
   $15 = ((($2)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $13&255;
   $18 = $14 ? $16 : $17;
   $19 = ($18>>>0)>(3);
   do {
    if ($19) {
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6,3884,$2);
     $20 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3882)|0);
     ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
     $$0$i$i$i = 0;
     while(1) {
      $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
      if ($exitcond$i$i$i) {
       break;
      }
      $21 = (($6) + ($$0$i$i$i<<2)|0);
      HEAP32[$21>>2] = 0;
      $22 = (($$0$i$i$i) + 1)|0;
      $$0$i$i$i = $22;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
     $23 = ((($3)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($3)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24>>>0)<($26>>>0);
     if ($27) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24,$4);
      $28 = HEAP32[$23>>2]|0;
      $29 = ((($28)) + 24|0);
      HEAP32[$23>>2] = $29;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($3,$4);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    } else {
     $30 = ((($3)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($3)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31>>>0)<($33>>>0);
     if ($34) {
      ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;HEAP32[$31+12>>2]=0|0;HEAP32[$31+16>>2]=0|0;HEAP32[$31+20>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($31);
      $35 = HEAP32[$30>>2]|0;
      $36 = ((($35)) + 24|0);
      HEAP32[$30>>2] = $36;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
      break;
     }
    }
   } while(0);
   $37 = HEAP8[$0>>0]|0;
   $38 = ($37<<24>>24)==(110);
   $39 = ((($3)) + 4|0);
   if ($38) {
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + -24|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($41,45);
    $42 = ((($0)) + 1|0);
    $$025 = $42;
   } else {
    $$025 = $0;
   }
   $43 = HEAP32[$39>>2]|0;
   $44 = ((($43)) + -24|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($44,$$025,$7);
   $45 = HEAP8[$12>>0]|0;
   $46 = ($45<<24>>24)<(0);
   $47 = HEAP32[$15>>2]|0;
   $48 = $45&255;
   $49 = $46 ? $47 : $48;
   $50 = ($49>>>0)<(4);
   if ($50) {
    $51 = HEAP32[$39>>2]|0;
    $52 = ((($51)) + -24|0);
    $53 = HEAP32[$2>>2]|0;
    $54 = $46 ? $53 : $2;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($52,$54,$49)|0);
   }
   $55 = ((($7)) + 1|0);
   $$1 = $55;
  } else {
   $$1 = $0;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,4);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 24|0;
 $3 = sp + 72|0;
 $4 = sp;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(8);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(8);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
      $31 = +HEAPF32[$3>>2];
      $32 = $31;
      HEAPF64[$vararg_buffer>>3] = $32;
      $33 = (_snprintf($4,24,5196,$vararg_buffer)|0);
      $34 = ($33>>>0)>(23);
      if ($34) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6,$4,$33);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $35 = ((($2)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($2)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36,$5);
       $40 = HEAP32[$35>>2]|0;
       $41 = ((($40)) + 24|0);
       HEAP32[$35>>2] = $41;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $42 = ((($0)) + 9|0);
      $$247$ph = $42;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = sp + 64|0;
 $6 = sp + 48|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(16);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(16);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;HEAP32[$4+24>>2]=0|0;HEAP32[$4+28>>2]=0|0;
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,32,5193,$vararg_buffer)|0);
      $33 = ($32>>>0)>(31);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6,$4,$32);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $34 = ((($2)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($2)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35,$5);
       $39 = HEAP32[$34>>2]|0;
       $40 = ((($39)) + 24|0);
       HEAP32[$34>>2] = $40;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $41 = ((($0)) + 17|0);
      $$247$ph = $41;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp;
 $5 = sp + 72|0;
 $6 = sp + 56|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(20);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(20);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,40,5188,$vararg_buffer)|0);
      $33 = ($32>>>0)>(39);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6,$4,$32);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $34 = ((($2)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($2)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35,$5);
       $39 = HEAP32[$34>>2]|0;
       $40 = ((($39)) + 24|0);
       HEAP32[$34>>2] = $40;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $41 = ((($0)) + 21|0);
      $$247$ph = $41;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,13);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i184 = 0, $$0$i$i$add$i188 = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i210 = 0, $$0$i$i$add$i220 = 0, $$0$i$i$add$i231 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i183 = 0, $$0$i$i$idx$i187 = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i209 = 0, $$0$i$i$idx$i219 = 0, $$0$i$i$idx$i230 = 0, $$0151$off0$ph = 0, $$0157 = 0, $$1158 = 0, $$2159 = 0, $$2159$be = 0, $$2159$ph = 0;
 var $$2159$ph$be = 0, $$4166 = 0, $$ptr$i = 0, $$ptr$i185 = 0, $$ptr$i189 = 0, $$ptr$i200 = 0, $$ptr$i211 = 0, $$ptr$i221 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i215 = 0, $$sroa$0$0$copyload$i195239 = 0, $$sroa$0$0$copyload$i206237 = 0, $$sroa$0$0$copyload$i216236 = 0, $$sroa$0$0$copyload$i227238 = 0, $$sroa$0$0$copyload$i240 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond179 = 0, $or$cond180 = 0, $or$cond181 = 0, $or$cond182 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $3 = sp + 224|0;
 $4 = sp + 212|0;
 $5 = sp + 200|0;
 $6 = sp + 184|0;
 $7 = sp + 176|0;
 $8 = sp + 164|0;
 $9 = sp + 152|0;
 $10 = sp + 136|0;
 $11 = sp + 128|0;
 $12 = sp + 116|0;
 $13 = sp + 104|0;
 $14 = sp + 88|0;
 $15 = sp + 84|0;
 $16 = sp + 72|0;
 $17 = sp + 56|0;
 $18 = sp + 48|0;
 $19 = sp + 36|0;
 $20 = sp + 24|0;
 $21 = sp + 8|0;
 $22 = sp;
 $23 = ($0|0)==($1|0);
 L1: do {
  if ($23) {
   $$4166 = $0;
  } else {
   $24 = HEAP8[$0>>0]|0;
   $25 = ($24<<24>>24)==(78);
   if ($25) {
    $26 = ((($0)) + 1|0);
    $27 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($26,$1,$3)|0);
    $28 = ($27|0)==($1|0);
    L4: do {
     if (!($28)) {
      $29 = ((($2)) + 52|0);
      HEAP32[$29>>2] = 0;
      $30 = HEAP8[$27>>0]|0;
      switch ($30<<24>>24) {
      case 82:  {
       $$sink = 1;
       label = 6;
       break;
      }
      case 79:  {
       $$sink = 2;
       label = 6;
       break;
      }
      default: {
       $$0157 = $27;
      }
      }
      if ((label|0) == 6) {
       HEAP32[$29>>2] = $$sink;
       $31 = ((($27)) + 1|0);
       $$0157 = $31;
      }
      $32 = ((($2)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($2)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33>>>0)<($35>>>0);
      if ($36) {
       ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($33);
       $37 = HEAP32[$32>>2]|0;
       $38 = ((($37)) + 24|0);
       HEAP32[$32>>2] = $38;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      }
      $39 = $1;
      $40 = $$0157;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)>(1);
      if ($42) {
       $43 = HEAP8[$$0157>>0]|0;
       $44 = ($43<<24>>24)==(83);
       if ($44) {
        $45 = ((($$0157)) + 1|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = ($46<<24>>24)==(116);
        if ($47) {
         $48 = ((($$0157)) + 2|0);
         $49 = HEAP32[$32>>2]|0;
         $50 = ((($49)) + -24|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($50,5260);
         $$1158 = $48;
        } else {
         $$1158 = $$0157;
        }
       } else {
        $$1158 = $$0157;
       }
      } else {
       $$1158 = $$0157;
      }
      $51 = ($$1158|0)==($1|0);
      if ($51) {
       $52 = HEAP32[$32>>2]|0;
       $$0$i$i$idx$i = 0;
       while(1) {
        $53 = ($$0$i$i$idx$i|0)==(-1);
        if ($53) {
         break;
        }
        $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
        $$ptr$i = (($52) + (($$0$i$i$add$i*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $54 = ((($52)) + -24|0);
       HEAP32[$32>>2] = $54;
       break;
      }
      $55 = ((($16)) + 11|0);
      $56 = ((($16)) + 4|0);
      $$sroa$0$0$$sroa_idx$i215 = ((($2)) + 12|0);
      $57 = ((($2)) + 20|0);
      $58 = ((($2)) + 24|0);
      $59 = ((($20)) + 11|0);
      $60 = ((($20)) + 4|0);
      $61 = ((($9)) + 11|0);
      $62 = ((($9)) + 4|0);
      $63 = ((($17)) + 12|0);
      $64 = ((($17)) + 4|0);
      $65 = ((($17)) + 8|0);
      $66 = ((($2)) + 16|0);
      $67 = ((($21)) + 12|0);
      $68 = ((($21)) + 4|0);
      $69 = ((($21)) + 8|0);
      $70 = ((($5)) + 11|0);
      $71 = ((($5)) + 4|0);
      $72 = ((($10)) + 12|0);
      $73 = ((($10)) + 4|0);
      $74 = ((($10)) + 8|0);
      $75 = ((($13)) + 11|0);
      $76 = ((($13)) + 4|0);
      $77 = ((($14)) + 12|0);
      $78 = ((($14)) + 4|0);
      $79 = ((($14)) + 8|0);
      $80 = ((($6)) + 12|0);
      $81 = ((($6)) + 4|0);
      $82 = ((($6)) + 8|0);
      $$0151$off0$ph = 0;$$2159$ph = $$1158;
      L27: while(1) {
       $$2159 = $$2159$ph;
       L29: while(1) {
        $83 = HEAP8[$$2159>>0]|0;
        $84 = ($83<<24>>24)==(69);
        if ($84) {
         break L27;
        }
        $85 = $83 << 24 >> 24;
        switch ($85|0) {
        case 83:  {
         label = 23;
         break L29;
         break;
        }
        case 84:  {
         label = 39;
         break L29;
         break;
        }
        case 68:  {
         label = 53;
         break L29;
         break;
        }
        case 73:  {
         $213 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $214 = ($213|0)==($$2159|0);
         $215 = ($213|0)==($1|0);
         $or$cond181 = $214 | $215;
         if ($or$cond181) {
          break L4;
         }
         $216 = HEAP32[$32>>2]|0;
         $217 = ((($216)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($16,$217);
         $218 = HEAP32[$32>>2]|0;
         $$0$i$i$idx$i209 = 0;
         while(1) {
          $219 = ($$0$i$i$idx$i209|0)==(-1);
          if ($219) {
           break;
          }
          $$0$i$i$add$i210 = (($$0$i$i$idx$i209) + -1)|0;
          $$ptr$i211 = (($218) + (($$0$i$i$add$i210*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i211);
          $$0$i$i$idx$i209 = $$0$i$i$add$i210;
         }
         $220 = ((($218)) + -24|0);
         HEAP32[$32>>2] = $220;
         $221 = ((($218)) + -48|0);
         $222 = HEAP8[$55>>0]|0;
         $223 = ($222<<24>>24)<(0);
         $224 = HEAP32[$16>>2]|0;
         $225 = HEAP32[$56>>2]|0;
         $226 = $222&255;
         $227 = $223 ? $224 : $16;
         $228 = $223 ? $225 : $226;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($221,$227,$228)|0);
         $229 = HEAP32[$32>>2]|0;
         $230 = ((($229)) + -24|0);
         $$sroa$0$0$copyload$i216236 = HEAP32[$$sroa$0$0$$sroa_idx$i215>>2]|0;
         HEAP32[$18>>2] = $$sroa$0$0$copyload$i216236;
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($17,$230,$18);
         $231 = HEAP32[$57>>2]|0;
         $232 = HEAP32[$58>>2]|0;
         $233 = ($231>>>0)<($232>>>0);
         if ($233) {
          HEAP32[$231>>2] = 0;
          $234 = ((($231)) + 4|0);
          HEAP32[$234>>2] = 0;
          $235 = ((($231)) + 8|0);
          HEAP32[$235>>2] = 0;
          $236 = ((($231)) + 12|0);
          $237 = HEAP32[$63>>2]|0;
          HEAP32[$236>>2] = $237;
          $238 = HEAP32[$17>>2]|0;
          HEAP32[$231>>2] = $238;
          $239 = HEAP32[$64>>2]|0;
          HEAP32[$234>>2] = $239;
          $240 = HEAP32[$65>>2]|0;
          HEAP32[$235>>2] = $240;
          HEAP32[$65>>2] = 0;
          HEAP32[$64>>2] = 0;
          HEAP32[$17>>2] = 0;
          $241 = HEAP32[$57>>2]|0;
          $242 = ((($241)) + 16|0);
          HEAP32[$57>>2] = $242;
         } else {
          __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($66,$17);
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($17);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
         $$2159$be = $213;
         break;
        }
        case 76:  {
         $243 = ((($$2159)) + 1|0);
         $244 = ($243|0)==($1|0);
         if ($244) {
          break L4;
         } else {
          $$2159$be = $243;
         }
         break;
        }
        default: {
         label = 79;
         break L29;
        }
        }
        $$2159 = $$2159$be;
       }
       L45: do {
        if ((label|0) == 23) {
         label = 0;
         $86 = ((($$2159)) + 1|0);
         $87 = ($86|0)==($1|0);
         if (!($87)) {
          $88 = HEAP8[$86>>0]|0;
          $89 = ($88<<24>>24)==(116);
          if ($89) {
           label = 79;
           break;
          }
         }
         $90 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $91 = ($90|0)==($$2159|0);
         $92 = ($90|0)==($1|0);
         $or$cond = $91 | $92;
         if ($or$cond) {
          break L4;
         }
         $93 = HEAP32[$32>>2]|0;
         $94 = ((($93)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$94);
         $95 = HEAP32[$32>>2]|0;
         $$0$i$i$idx$i183 = 0;
         while(1) {
          $96 = ($$0$i$i$idx$i183|0)==(-1);
          if ($96) {
           break;
          }
          $$0$i$i$add$i184 = (($$0$i$i$idx$i183) + -1)|0;
          $$ptr$i185 = (($95) + (($$0$i$i$add$i184*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i185);
          $$0$i$i$idx$i183 = $$0$i$i$add$i184;
         }
         $97 = ((($95)) + -24|0);
         HEAP32[$32>>2] = $97;
         $98 = ((($95)) + -48|0);
         $99 = ((($98)) + 11|0);
         $100 = HEAP8[$99>>0]|0;
         $101 = ($100<<24>>24)<(0);
         if ($101) {
          $102 = ((($95)) + -44|0);
          $103 = HEAP32[$102>>2]|0;
          $106 = $103;
         } else {
          $104 = $100&255;
          $106 = $104;
         }
         $105 = ($106|0)==(0);
         if ($105) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($98,$4);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3956,$4);
          $107 = HEAP32[$32>>2]|0;
          $108 = ((($107)) + -24|0);
          $109 = HEAP8[$70>>0]|0;
          $110 = ($109<<24>>24)<(0);
          $111 = HEAP32[$5>>2]|0;
          $112 = HEAP32[$71>>2]|0;
          $113 = $109&255;
          $114 = $110 ? $111 : $5;
          $115 = $110 ? $112 : $113;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($108,$114,$115)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $116 = HEAP32[$32>>2]|0;
          $117 = ((($116)) + -24|0);
          $$sroa$0$0$copyload$i240 = HEAP32[$$sroa$0$0$$sroa_idx$i215>>2]|0;
          HEAP32[$7>>2] = $$sroa$0$0$copyload$i240;
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($6,$117,$7);
          $118 = HEAP32[$57>>2]|0;
          $119 = HEAP32[$58>>2]|0;
          $120 = ($118>>>0)<($119>>>0);
          if ($120) {
           HEAP32[$118>>2] = 0;
           $121 = ((($118)) + 4|0);
           HEAP32[$121>>2] = 0;
           $122 = ((($118)) + 8|0);
           HEAP32[$122>>2] = 0;
           $123 = ((($118)) + 12|0);
           $124 = HEAP32[$80>>2]|0;
           HEAP32[$123>>2] = $124;
           $125 = HEAP32[$6>>2]|0;
           HEAP32[$118>>2] = $125;
           $126 = HEAP32[$81>>2]|0;
           HEAP32[$121>>2] = $126;
           $127 = HEAP32[$82>>2]|0;
           HEAP32[$122>>2] = $127;
           HEAP32[$82>>2] = 0;
           HEAP32[$81>>2] = 0;
           HEAP32[$6>>2] = 0;
           $128 = HEAP32[$57>>2]|0;
           $129 = ((($128)) + 16|0);
           HEAP32[$57>>2] = $129;
          } else {
           __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($66,$6);
          }
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($6);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$2159$ph$be = $90;
        }
        else if ((label|0) == 39) {
         label = 0;
         $130 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $131 = ($130|0)==($$2159|0);
         $132 = ($130|0)==($1|0);
         $or$cond179 = $131 | $132;
         if ($or$cond179) {
          break L4;
         }
         $133 = HEAP32[$32>>2]|0;
         $134 = ((($133)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$134);
         $135 = HEAP32[$32>>2]|0;
         $$0$i$i$idx$i187 = 0;
         while(1) {
          $136 = ($$0$i$i$idx$i187|0)==(-1);
          if ($136) {
           break;
          }
          $$0$i$i$add$i188 = (($$0$i$i$idx$i187) + -1)|0;
          $$ptr$i189 = (($135) + (($$0$i$i$add$i188*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i189);
          $$0$i$i$idx$i187 = $$0$i$i$add$i188;
         }
         $137 = ((($135)) + -24|0);
         HEAP32[$32>>2] = $137;
         $138 = ((($135)) + -48|0);
         $139 = ((($138)) + 11|0);
         $140 = HEAP8[$139>>0]|0;
         $141 = ($140<<24>>24)<(0);
         if ($141) {
          $142 = ((($135)) + -44|0);
          $143 = HEAP32[$142>>2]|0;
          $146 = $143;
         } else {
          $144 = $140&255;
          $146 = $144;
         }
         $145 = ($146|0)==(0);
         if ($145) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($138,$8);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9,3956,$8);
          $147 = HEAP32[$32>>2]|0;
          $148 = ((($147)) + -24|0);
          $149 = HEAP8[$61>>0]|0;
          $150 = ($149<<24>>24)<(0);
          $151 = HEAP32[$9>>2]|0;
          $152 = HEAP32[$62>>2]|0;
          $153 = $149&255;
          $154 = $150 ? $151 : $9;
          $155 = $150 ? $152 : $153;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($148,$154,$155)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         }
         $156 = HEAP32[$32>>2]|0;
         $157 = ((($156)) + -24|0);
         $$sroa$0$0$copyload$i195239 = HEAP32[$$sroa$0$0$$sroa_idx$i215>>2]|0;
         HEAP32[$11>>2] = $$sroa$0$0$copyload$i195239;
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($10,$157,$11);
         $158 = HEAP32[$57>>2]|0;
         $159 = HEAP32[$58>>2]|0;
         $160 = ($158>>>0)<($159>>>0);
         if ($160) {
          HEAP32[$158>>2] = 0;
          $161 = ((($158)) + 4|0);
          HEAP32[$161>>2] = 0;
          $162 = ((($158)) + 8|0);
          HEAP32[$162>>2] = 0;
          $163 = ((($158)) + 12|0);
          $164 = HEAP32[$72>>2]|0;
          HEAP32[$163>>2] = $164;
          $165 = HEAP32[$10>>2]|0;
          HEAP32[$158>>2] = $165;
          $166 = HEAP32[$73>>2]|0;
          HEAP32[$161>>2] = $166;
          $167 = HEAP32[$74>>2]|0;
          HEAP32[$162>>2] = $167;
          HEAP32[$74>>2] = 0;
          HEAP32[$73>>2] = 0;
          HEAP32[$10>>2] = 0;
          $168 = HEAP32[$57>>2]|0;
          $169 = ((($168)) + 16|0);
          HEAP32[$57>>2] = $169;
         } else {
          __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($66,$10);
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($10);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         $$2159$ph$be = $130;
        }
        else if ((label|0) == 53) {
         label = 0;
         $170 = ((($$2159)) + 1|0);
         $171 = ($170|0)==($1|0);
         if (!($171)) {
          $172 = HEAP8[$170>>0]|0;
          switch ($172<<24>>24) {
          case 84: case 116:  {
           break;
          }
          default: {
           label = 79;
           break L45;
          }
          }
         }
         $173 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $174 = ($173|0)==($$2159|0);
         $175 = ($173|0)==($1|0);
         $or$cond180 = $174 | $175;
         if ($or$cond180) {
          break L4;
         }
         $176 = HEAP32[$32>>2]|0;
         $177 = ((($176)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($12,$177);
         $178 = HEAP32[$32>>2]|0;
         $$0$i$i$idx$i198 = 0;
         while(1) {
          $179 = ($$0$i$i$idx$i198|0)==(-1);
          if ($179) {
           break;
          }
          $$0$i$i$add$i199 = (($$0$i$i$idx$i198) + -1)|0;
          $$ptr$i200 = (($178) + (($$0$i$i$add$i199*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i200);
          $$0$i$i$idx$i198 = $$0$i$i$add$i199;
         }
         $180 = ((($178)) + -24|0);
         HEAP32[$32>>2] = $180;
         $181 = ((($178)) + -48|0);
         $182 = ((($181)) + 11|0);
         $183 = HEAP8[$182>>0]|0;
         $184 = ($183<<24>>24)<(0);
         if ($184) {
          $185 = ((($178)) + -44|0);
          $186 = HEAP32[$185>>2]|0;
          $189 = $186;
         } else {
          $187 = $183&255;
          $189 = $187;
         }
         $188 = ($189|0)==(0);
         if ($188) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($181,$12);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($13,3956,$12);
          $190 = HEAP32[$32>>2]|0;
          $191 = ((($190)) + -24|0);
          $192 = HEAP8[$75>>0]|0;
          $193 = ($192<<24>>24)<(0);
          $194 = HEAP32[$13>>2]|0;
          $195 = HEAP32[$76>>2]|0;
          $196 = $192&255;
          $197 = $193 ? $194 : $13;
          $198 = $193 ? $195 : $196;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($191,$197,$198)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
         }
         $199 = HEAP32[$32>>2]|0;
         $200 = ((($199)) + -24|0);
         $$sroa$0$0$copyload$i206237 = HEAP32[$$sroa$0$0$$sroa_idx$i215>>2]|0;
         HEAP32[$15>>2] = $$sroa$0$0$copyload$i206237;
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($14,$200,$15);
         $201 = HEAP32[$57>>2]|0;
         $202 = HEAP32[$58>>2]|0;
         $203 = ($201>>>0)<($202>>>0);
         if ($203) {
          HEAP32[$201>>2] = 0;
          $204 = ((($201)) + 4|0);
          HEAP32[$204>>2] = 0;
          $205 = ((($201)) + 8|0);
          HEAP32[$205>>2] = 0;
          $206 = ((($201)) + 12|0);
          $207 = HEAP32[$77>>2]|0;
          HEAP32[$206>>2] = $207;
          $208 = HEAP32[$14>>2]|0;
          HEAP32[$201>>2] = $208;
          $209 = HEAP32[$78>>2]|0;
          HEAP32[$204>>2] = $209;
          $210 = HEAP32[$79>>2]|0;
          HEAP32[$205>>2] = $210;
          HEAP32[$79>>2] = 0;
          HEAP32[$78>>2] = 0;
          HEAP32[$14>>2] = 0;
          $211 = HEAP32[$57>>2]|0;
          $212 = ((($211)) + 16|0);
          HEAP32[$57>>2] = $212;
         } else {
          __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($66,$14);
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         $$2159$ph$be = $173;
        }
       } while(0);
       if ((label|0) == 79) {
        label = 0;
        $245 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
        $246 = ($245|0)==($$2159|0);
        $247 = ($245|0)==($1|0);
        $or$cond182 = $246 | $247;
        if ($or$cond182) {
         break L4;
        }
        $248 = HEAP32[$32>>2]|0;
        $249 = ((($248)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($19,$249);
        $250 = HEAP32[$32>>2]|0;
        $$0$i$i$idx$i219 = 0;
        while(1) {
         $251 = ($$0$i$i$idx$i219|0)==(-1);
         if ($251) {
          break;
         }
         $$0$i$i$add$i220 = (($$0$i$i$idx$i219) + -1)|0;
         $$ptr$i221 = (($250) + (($$0$i$i$add$i220*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i221);
         $$0$i$i$idx$i219 = $$0$i$i$add$i220;
        }
        $252 = ((($250)) + -24|0);
        HEAP32[$32>>2] = $252;
        $253 = ((($250)) + -48|0);
        $254 = ((($253)) + 11|0);
        $255 = HEAP8[$254>>0]|0;
        $256 = ($255<<24>>24)<(0);
        if ($256) {
         $257 = ((($250)) + -44|0);
         $258 = HEAP32[$257>>2]|0;
         $261 = $258;
        } else {
         $259 = $255&255;
         $261 = $259;
        }
        $260 = ($261|0)==(0);
        if ($260) {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($253,$19);
        } else {
         __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($20,3956,$19);
         $262 = HEAP32[$32>>2]|0;
         $263 = ((($262)) + -24|0);
         $264 = HEAP8[$59>>0]|0;
         $265 = ($264<<24>>24)<(0);
         $266 = HEAP32[$20>>2]|0;
         $267 = HEAP32[$60>>2]|0;
         $268 = $264&255;
         $269 = $265 ? $266 : $20;
         $270 = $265 ? $267 : $268;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($263,$269,$270)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
        }
        $271 = HEAP32[$32>>2]|0;
        $272 = ((($271)) + -24|0);
        $$sroa$0$0$copyload$i227238 = HEAP32[$$sroa$0$0$$sroa_idx$i215>>2]|0;
        HEAP32[$22>>2] = $$sroa$0$0$copyload$i227238;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($21,$272,$22);
        $273 = HEAP32[$57>>2]|0;
        $274 = HEAP32[$58>>2]|0;
        $275 = ($273>>>0)<($274>>>0);
        if ($275) {
         HEAP32[$273>>2] = 0;
         $276 = ((($273)) + 4|0);
         HEAP32[$276>>2] = 0;
         $277 = ((($273)) + 8|0);
         HEAP32[$277>>2] = 0;
         $278 = ((($273)) + 12|0);
         $279 = HEAP32[$67>>2]|0;
         HEAP32[$278>>2] = $279;
         $280 = HEAP32[$21>>2]|0;
         HEAP32[$273>>2] = $280;
         $281 = HEAP32[$68>>2]|0;
         HEAP32[$276>>2] = $281;
         $282 = HEAP32[$69>>2]|0;
         HEAP32[$277>>2] = $282;
         HEAP32[$69>>2] = 0;
         HEAP32[$68>>2] = 0;
         HEAP32[$21>>2] = 0;
         $283 = HEAP32[$57>>2]|0;
         $284 = ((($283)) + 16|0);
         HEAP32[$57>>2] = $284;
        } else {
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($66,$21);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($21);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        $$2159$ph$be = $245;
       }
       $$0151$off0$ph = 1;$$2159$ph = $$2159$ph$be;
      }
      $285 = ((($$2159)) + 1|0);
      $286 = HEAP32[$3>>2]|0;
      $287 = ((($2)) + 48|0);
      HEAP32[$287>>2] = $286;
      if ($$0151$off0$ph) {
       $288 = ((($2)) + 16|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = HEAP32[$57>>2]|0;
       $291 = ($289|0)==($290|0);
       if (!($291)) {
        $$0$i$i$idx$i230 = 0;
        while(1) {
         $292 = ($$0$i$i$idx$i230|0)==(-1);
         if ($292) {
          break;
         }
         $$0$i$i$add$i231 = (($$0$i$i$idx$i230) + -1)|0;
         $293 = (($290) + ($$0$i$i$add$i231<<4)|0);
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($293);
         $$0$i$i$idx$i230 = $$0$i$i$add$i231;
        }
        $294 = ((($290)) + -16|0);
        HEAP32[$57>>2] = $294;
       }
      }
      $$4166 = $285;
      break L1;
     }
    } while(0);
    $$4166 = $0;
   } else {
    $$4166 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4166|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i79 = 0, $$0$i$i$add$i83 = 0, $$0$i$i$add$i88 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i78 = 0, $$0$i$i$idx$i82 = 0, $$0$i$i$idx$i87 = 0, $$4 = 0, $$ptr$i = 0, $$ptr$i80 = 0, $$ptr$i84 = 0, $$ptr$i89 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 L1: do {
  if ($5) {
   $$4 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(90);
   if ($7) {
    $8 = ((($0)) + 1|0);
    $9 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($8,$1,$2)|0);
    $10 = ($9|0)==($8|0);
    $11 = ($9|0)==($1|0);
    $or$cond = $10 | $11;
    if ($or$cond) {
     $$4 = $0;
    } else {
     $12 = HEAP8[$9>>0]|0;
     $13 = ($12<<24>>24)==(69);
     if ($13) {
      $14 = ((($9)) + 1|0);
      $15 = ($14|0)==($1|0);
      if ($15) {
       $$4 = $0;
      } else {
       $16 = HEAP8[$14>>0]|0;
       $17 = $16 << 24 >> 24;
       switch ($17|0) {
       case 115:  {
        $18 = ((($9)) + 2|0);
        $19 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($18,$1)|0);
        $20 = HEAP32[$2>>2]|0;
        $21 = ((($2)) + 4|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($20|0)==($22|0);
        if ($23) {
         $$4 = $19;
         break L1;
        }
        $24 = ((($22)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($24,5243)|0);
        $$4 = $19;
        break L1;
        break;
       }
       case 100:  {
        $25 = ((($9)) + 2|0);
        $26 = ($25|0)==($1|0);
        if ($26) {
         $$4 = $0;
         break L1;
        }
        $27 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($25,$1)|0);
        $28 = ($27|0)==($1|0);
        if ($28) {
         $$4 = $0;
         break L1;
        }
        $29 = HEAP8[$27>>0]|0;
        $30 = ($29<<24>>24)==(95);
        if (!($30)) {
         $$4 = $0;
         break L1;
        }
        $31 = ((($27)) + 1|0);
        $32 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($31,$1,$2)|0);
        $33 = ($32|0)==($31|0);
        $34 = ((($2)) + 4|0);
        if ($33) {
         $57 = HEAP32[$34>>2]|0;
         $$0$i$i$idx$i78 = 0;
         while(1) {
          $58 = ($$0$i$i$idx$i78|0)==(-1);
          if ($58) {
           break;
          }
          $$0$i$i$add$i79 = (($$0$i$i$idx$i78) + -1)|0;
          $$ptr$i80 = (($57) + (($$0$i$i$add$i79*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i80);
          $$0$i$i$idx$i78 = $$0$i$i$add$i79;
         }
         $59 = ((($57)) + -24|0);
         HEAP32[$34>>2] = $59;
         $$4 = $0;
         break L1;
        }
        $35 = HEAP32[$34>>2]|0;
        $36 = HEAP32[$2>>2]|0;
        $37 = (($35) - ($36))|0;
        $38 = (($37|0) / 24)&-1;
        $39 = ($38>>>0)<(2);
        if ($39) {
         $$4 = $0;
         break L1;
        }
        $40 = $35;
        $41 = ((($40)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$41);
        $42 = HEAP32[$34>>2]|0;
        $$0$i$i$idx$i = 0;
        while(1) {
         $43 = ($$0$i$i$idx$i|0)==(-1);
         if ($43) {
          break;
         }
         $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
         $$ptr$i = (($42) + (($$0$i$i$add$i*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
         $$0$i$i$idx$i = $$0$i$i$add$i;
        }
        $44 = ((($42)) + -24|0);
        HEAP32[$34>>2] = $44;
        $45 = ((($42)) + -48|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($45,3956)|0);
        $46 = HEAP32[$34>>2]|0;
        $47 = ((($46)) + -24|0);
        $48 = ((($3)) + 11|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = ($49<<24>>24)<(0);
        $51 = HEAP32[$3>>2]|0;
        $52 = ((($3)) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $49&255;
        $55 = $50 ? $51 : $3;
        $56 = $50 ? $53 : $54;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($47,$55,$56)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$4 = $32;
        break L1;
        break;
       }
       default: {
        $60 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
        $61 = ($60|0)==($14|0);
        if ($61) {
         $86 = ((($2)) + 4|0);
         $87 = HEAP32[$86>>2]|0;
         $$0$i$i$idx$i87 = 0;
         while(1) {
          $88 = ($$0$i$i$idx$i87|0)==(-1);
          if ($88) {
           break;
          }
          $$0$i$i$add$i88 = (($$0$i$i$idx$i87) + -1)|0;
          $$ptr$i89 = (($87) + (($$0$i$i$add$i88*24)|0)|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i89);
          $$0$i$i$idx$i87 = $$0$i$i$add$i88;
         }
         $89 = ((($87)) + -24|0);
         HEAP32[$86>>2] = $89;
         $$4 = $0;
         break L1;
        }
        $62 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($60,$1)|0);
        $63 = ((($2)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = HEAP32[$2>>2]|0;
        $66 = (($64) - ($65))|0;
        $67 = (($66|0) / 24)&-1;
        $68 = ($67>>>0)<(2);
        if ($68) {
         $$4 = $62;
         break L1;
        }
        $69 = $64;
        $70 = ((($69)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$70);
        $71 = HEAP32[$63>>2]|0;
        $$0$i$i$idx$i82 = 0;
        while(1) {
         $72 = ($$0$i$i$idx$i82|0)==(-1);
         if ($72) {
          break;
         }
         $$0$i$i$add$i83 = (($$0$i$i$idx$i82) + -1)|0;
         $$ptr$i84 = (($71) + (($$0$i$i$add$i83*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i84);
         $$0$i$i$idx$i82 = $$0$i$i$add$i83;
        }
        $73 = ((($71)) + -24|0);
        HEAP32[$63>>2] = $73;
        $74 = ((($71)) + -48|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($74,3956)|0);
        $75 = HEAP32[$63>>2]|0;
        $76 = ((($75)) + -24|0);
        $77 = ((($4)) + 11|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = ($78<<24>>24)<(0);
        $80 = HEAP32[$4>>2]|0;
        $81 = ((($4)) + 4|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = $78&255;
        $84 = $79 ? $80 : $4;
        $85 = $79 ? $82 : $83;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($76,$84,$85)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$4 = $62;
        break L1;
       }
       }
      }
     } else {
      $$4 = $0;
     }
    }
   } else {
    $$4 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$026$off0 = 0, $$027 = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(83);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(116);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = ($12|0)==($1|0);
    if ($13) {
     $$026$off0 = 0;$$027 = $1;
    } else {
     $14 = HEAP8[$12>>0]|0;
     $15 = ($14<<24>>24)==(76);
     $16 = ((($0)) + 3|0);
     $spec$select = $15 ? $16 : $12;
     $$026$off0 = 0;$$027 = $spec$select;
    }
   } else {
    $$026$off0 = 1;$$027 = $0;
   }
  } else {
   $$026$off0 = 1;$$027 = $0;
  }
  $17 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027,$1,$2)|0);
  $18 = ($17|0)==($$027|0);
  $brmerge = $$026$off0 | $18;
  $$mux = $18 ? $0 : $17;
  if ($brmerge) {
   $$1 = $$mux;
  } else {
   $19 = HEAP32[$2>>2]|0;
   $20 = ((($2)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)==($21|0);
   if ($22) {
    $$1 = $0;
   } else {
    $23 = ((($21)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($23,0,4178)|0);
    $$1 = $17;
   }
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029 = 0, $$1 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit32 = 0, $isdigit34 = 0, $isdigit36 = 0, $isdigittmp = 0, $isdigittmp31 = 0, $isdigittmp33 = 0, $isdigittmp35 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$1 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(95);
   if (!($4)) {
    $18 = $3 << 24 >> 24;
    $isdigittmp = (($18) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $$1 = $0;
     break;
    }
    $$pn = $0;
    while(1) {
     $$0 = ((($$pn)) + 1|0);
     $19 = ($$0|0)==($1|0);
     if ($19) {
      $$1 = $1;
      break L1;
     }
     $20 = HEAP8[$$0>>0]|0;
     $21 = $20 << 24 >> 24;
     $isdigittmp31 = (($21) + -48)|0;
     $isdigit32 = ($isdigittmp31>>>0)<(10);
     if ($isdigit32) {
      $$pn = $$0;
     } else {
      $$1 = $$0;
      break L1;
     }
    }
   }
   $5 = ((($0)) + 1|0);
   $6 = ($5|0)==($1|0);
   if ($6) {
    $$1 = $0;
   } else {
    $7 = HEAP8[$5>>0]|0;
    $8 = $7 << 24 >> 24;
    $isdigittmp33 = (($8) + -48)|0;
    $isdigit34 = ($isdigittmp33>>>0)<(10);
    if ($isdigit34) {
     $9 = ((($0)) + 2|0);
     $$1 = $9;
     break;
    }
    $10 = ($7<<24>>24)==(95);
    if ($10) {
     $11 = ((($0)) + 2|0);
     $$029 = $11;
     while(1) {
      $12 = ($$029|0)==($1|0);
      if ($12) {
       $$1 = $0;
       break L1;
      }
      $13 = HEAP8[$$029>>0]|0;
      $14 = $13 << 24 >> 24;
      $isdigittmp35 = (($14) + -48)|0;
      $isdigit36 = ($isdigittmp35>>>0)<(10);
      if (!($isdigit36)) {
       break;
      }
      $15 = ((($$029)) + 1|0);
      $$029 = $15;
     }
     $16 = ($13<<24>>24)==(95);
     $17 = ((($$029)) + 1|0);
     $spec$select = $16 ? $17 : $0;
     return ($spec$select|0);
    } else {
     $$1 = $0;
    }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $4&255;
  $10 = $5 ? $6 : $1;
  $11 = $5 ? $8 : $9;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0,$10,$11);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm22EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5275,21);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 12|0);
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 4;
  $18 = $10 >>> 1;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $16 >> 3;
  $21 = ($20>>>0)<($9>>>0);
  $$sroa$speculated$i = $21 ? $9 : $20;
  $spec$select$i = $19 ? $$sroa$speculated$i : $10;
  $22 = HEAP32[$4>>2]|0;
  $23 = (($22) - ($15))|0;
  $24 = $23 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($3,$spec$select$i,$24,$12);
  $25 = ((($3)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($2,$1);
  HEAP32[$26>>2] = 0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($26)) + 8|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($26)) + 12|0);
  $30 = HEAP32[$2>>2]|0;
  HEAP32[$29>>2] = $30;
  $31 = ((($26)) + 16|0);
  HEAP32[$25>>2] = $31;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$051 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond56 = 0, $spec$select = 0, $spec$select57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$4 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   switch ($5|0) {
   case 88:  {
    $6 = ((($0)) + 1|0);
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$1,$2)|0);
    $8 = ($7|0)==($6|0);
    $9 = ($7|0)==($1|0);
    $or$cond = $8 | $9;
    if ($or$cond) {
     $$4 = $0;
     break L1;
    }
    $10 = HEAP8[$7>>0]|0;
    $11 = ($10<<24>>24)==(69);
    $12 = ((($7)) + 1|0);
    $spec$select = $11 ? $12 : $0;
    $$4 = $spec$select;
    break L1;
    break;
   }
   case 74:  {
    $13 = ((($0)) + 1|0);
    $14 = ($13|0)==($1|0);
    if ($14) {
     $$4 = $0;
     break L1;
    }
    $$051 = $13;
    while(1) {
     $15 = HEAP8[$$051>>0]|0;
     $16 = ($15<<24>>24)==(69);
     if ($16) {
      break;
     }
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051,$1,$2)|0);
     $18 = ($17|0)==($$051|0);
     if ($18) {
      $$4 = $0;
      break L1;
     } else {
      $$051 = $17;
     }
    }
    $19 = ((($$051)) + 1|0);
    $$4 = $19;
    break L1;
    break;
   }
   case 76:  {
    $20 = ((($0)) + 1|0);
    $21 = ($20|0)==($1|0);
    if (!($21)) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(90);
     if ($23) {
      $24 = ((($0)) + 2|0);
      $25 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($24,$1,$2)|0);
      $26 = ($25|0)==($24|0);
      $27 = ($25|0)==($1|0);
      $or$cond56 = $26 | $27;
      if ($or$cond56) {
       $$4 = $0;
       break L1;
      }
      $28 = HEAP8[$25>>0]|0;
      $29 = ($28<<24>>24)==(69);
      $30 = ((($25)) + 1|0);
      $spec$select57 = $29 ? $30 : $0;
      $$4 = $spec$select57;
      break L1;
     }
    }
    $31 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $31;
    break L1;
    break;
   }
   default: {
    $32 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $32;
    break L1;
   }
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE8allocateEm($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 HEAP32[$4>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($7)) + -4|0);
  $14 = HEAP32[$10>>2]|0;
  HEAP32[$13>>2] = $14;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$12>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($20)) + -16|0);
  HEAP32[$5>>2] = $21;
  $$0$i = $9;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $23;
 HEAP32[$5>>2] = $22;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$24>>2]|0;
 HEAP32[$3>>2] = $26;
 HEAP32[$24>>2] = $25;
 $27 = ((($0)) + 8|0);
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$27>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$27>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $31;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm3EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5300,2);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKcm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated = 0, $$sroa$speculated17 = 0, $$sroa$speculated18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<(11);
  $$sroa$speculated17 = $10 ? $9 : 11;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $$sroa$speculated18 = $$sroa$speculated17;$15 = $9;$17 = $phitmp$i;
 } else {
  $6 = $4&255;
  $7 = ($6>>>0)<(11);
  $$sroa$speculated = $7 ? $6 : 11;
  $$sroa$speculated18 = $$sroa$speculated;$15 = $6;$17 = 10;
 }
 $14 = (($$sroa$speculated18) - ($15))|0;
 $16 = (($14) + ($17))|0;
 $18 = ($16>>>0)<($1>>>0);
 if ($18) {
  $47 = (($1) - ($$sroa$speculated18))|0;
  $48 = (($47) + ($15))|0;
  $49 = (($48) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$17,$49,$15,0,$$sroa$speculated18,$1,5303);
 } else {
  if ($5) {
   $19 = HEAP32[$0>>2]|0;
   $25 = $19;
  } else {
   $25 = $0;
  }
  $20 = ($$sroa$speculated18|0)==($1|0);
  do {
   if ($20) {
    $$215 = $1;$$3 = 0;$$373 = 5303;$$377 = $1;
    label = 17;
   } else {
    $21 = (($15) - ($$sroa$speculated18))|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $$215 = $$sroa$speculated18;$$3 = 0;$$373 = 5303;$$377 = $1;
     label = 17;
    } else {
     $23 = ($$sroa$speculated18>>>0)>($1>>>0);
     if ($23) {
      (__ZNSt3__211char_traitsIcE4moveEPcPKcm($25,5303,$1)|0);
      $37 = (($25) + ($1)|0);
      $38 = (($25) + ($$sroa$speculated18)|0);
      (__ZNSt3__211char_traitsIcE4moveEPcPKcm($37,$38,$21)|0);
      $$316 = $$sroa$speculated18;$$4 = $1;
      break;
     }
     $24 = ($25>>>0)<(5303>>>0);
     $26 = (($25) + ($15)|0);
     $27 = ($26>>>0)>(5303>>>0);
     $or$cond = $24 & $27;
     do {
      if ($or$cond) {
       $28 = (($25) + ($$sroa$speculated18)|0);
       $29 = ($28>>>0)>(5303>>>0);
       if ($29) {
        (__ZNSt3__211char_traitsIcE4moveEPcPKcm($25,5303,$$sroa$speculated18)|0);
        $32 = (5303 + ($1)|0);
        $33 = (($1) - ($$sroa$speculated18))|0;
        $$014 = 0;$$069 = $$sroa$speculated18;$$070 = $32;$$074 = $33;
        break;
       } else {
        $30 = (($1) - ($$sroa$speculated18))|0;
        $31 = (5303 + ($30)|0);
        $$014 = $$sroa$speculated18;$$069 = 0;$$070 = $31;$$074 = $1;
        break;
       }
      } else {
       $$014 = $$sroa$speculated18;$$069 = 0;$$070 = 5303;$$074 = $1;
      }
     } while(0);
     $34 = (($25) + ($$069)|0);
     $35 = (($34) + ($$074)|0);
     $36 = (($34) + ($$014)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcm($35,$36,$21)|0);
     $$215 = $$014;$$3 = $$069;$$373 = $$070;$$377 = $$074;
     label = 17;
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $39 = (($25) + ($$3)|0);
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($39,$$373,$$377)|0);
   $$316 = $$215;$$4 = $$377;
  }
  $40 = (($$4) - ($$316))|0;
  $41 = (($40) + ($15))|0;
  $42 = HEAP8[$3>>0]|0;
  $43 = ($42<<24>>24)<(0);
  if ($43) {
   $44 = ((($0)) + 4|0);
   HEAP32[$44>>2] = $41;
  } else {
   $45 = $41&255;
   HEAP8[$3>>0] = $45;
  }
  $46 = (($25) + ($41)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($46,$2);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 if ($11) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($7) {
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 2147483647;
  $phitmp$i = (($15) + -1)|0;
  $17 = $phitmp$i;
 } else {
  $17 = 10;
 }
 $16 = (($17) - ($12))|0;
 $18 = ($16>>>0)<($3>>>0);
 if ($18) {
  $36 = (($12) + ($3))|0;
  $37 = (($36) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$17,$37,$12,$1,0,$3,$2);
 } else {
  $19 = ($3|0)==(0);
  if (!($19)) {
   if ($7) {
    $20 = HEAP32[$0>>2]|0;
    $24 = $20;
   } else {
    $24 = $0;
   }
   $21 = (($12) - ($1))|0;
   $22 = ($21|0)==(0);
   $23 = (($24) + ($1)|0);
   if ($22) {
    $$1 = $2;
   } else {
    $25 = (($23) + ($3)|0);
    $26 = ($23>>>0)<=($2>>>0);
    $27 = (($24) + ($12)|0);
    $28 = ($27>>>0)>($2>>>0);
    $or$cond = $26 & $28;
    $29 = (($2) + ($3)|0);
    $$0 = $or$cond ? $29 : $2;
    (__ZNSt3__211char_traitsIcE4moveEPcPKcm($25,$23,$21)|0);
    $$1 = $$0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($23,$$1,$3)|0);
   $30 = (($12) + ($3))|0;
   $31 = HEAP8[$5>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = ((($0)) + 4|0);
    HEAP32[$33>>2] = $30;
   } else {
    $34 = $30&255;
    HEAP8[$5>>0] = $34;
   }
   $35 = (($24) + ($30)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE8allocateEm($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 HEAP32[$4>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($7)) + -4|0);
  $14 = HEAP32[$10>>2]|0;
  HEAP32[$13>>2] = $14;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$12>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($20)) + -16|0);
  HEAP32[$5>>2] = $21;
  $$0$i = $9;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $23;
 HEAP32[$5>>2] = $22;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$24>>2]|0;
 HEAP32[$3>>2] = $26;
 HEAP32[$24>>2] = $25;
 $27 = ((($0)) + 8|0);
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$27>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$27>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $31;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8allocateEm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $3 = ((($0)) + 12|0);
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($3,1)|0);
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $4;
  HEAP32[$0>>2] = $4;
  $6 = ((($4)) + 24|0);
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $6;
  return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($0) {
 $0 = $0|0;
 var $$pre = 0, $$sroa$speculated = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $10 = $6;$14 = $7;
 } else {
  $8 = $3&255;
  $10 = $8;$14 = $0;
 }
 $9 = ($10|0)!=(0);
 $$sroa$speculated = $9&1;
 $11 = (($10) - ($$sroa$speculated))|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $3;
 } else {
  $13 = (($14) + ($$sroa$speculated)|0);
  (__ZNSt3__211char_traitsIcE4moveEPcPKcm($14,$13,$11)|0);
  $$pre = HEAP8[$2>>0]|0;
  $16 = $$pre;
 }
 $15 = ($16<<24>>24)<(0);
 if ($15) {
  $17 = ((($0)) + 4|0);
  HEAP32[$17>>2] = $11;
 } else {
  $18 = $11&255;
  HEAP8[$2>>0] = $18;
 }
 $19 = (($14) + ($11)|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($19,$1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm8EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5076,7);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,3);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm19EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5496,18);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,$1,8);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm7EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0,5489,6);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$0$i$i$idx$i = 0, $$11 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $$ptr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i159 = 0, $exitcond$i$i$i162 = 0, $or$cond = 0, $switch = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 61|0;
 $4 = sp + 60|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = $14 << 24 >> 24;
   switch ($15|0) {
   case 84:  {
    break;
   }
   case 71:  {
    $126 = ((($0)) + 1|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    switch ($128|0) {
    case 86:  {
     $129 = ((($0)) + 2|0);
     $130 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($129,$1,$2)|0);
     $131 = ($130|0)==($129|0);
     if ($131) {
      $$11 = $0;
      label = 60;
      break L1;
     }
     $132 = HEAP32[$2>>2]|0;
     $133 = ((($2)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $$8 = $0;
      break L1;
     }
     $136 = ((($134)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($136,0,5714)|0);
     $$11 = $130;
     label = 60;
     break L1;
     break;
    }
    case 82:  {
     $137 = ((($0)) + 2|0);
     $138 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($137,$1,$2)|0);
     $139 = ($138|0)==($137|0);
     if ($139) {
      $$11 = $0;
      label = 60;
      break L1;
     }
     $140 = HEAP32[$2>>2]|0;
     $141 = ((($2)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $$8 = $0;
      break L1;
     }
     $144 = ((($142)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($144,0,5734)|0);
     $$11 = $138;
     label = 60;
     break L1;
     break;
    }
    default: {
     $$11 = $0;
     label = 60;
     break L1;
    }
    }
    break;
   }
   default: {
    $$11 = $0;
    label = 60;
    break L1;
   }
   }
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   switch ($18|0) {
   case 86:  {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $22 = HEAP32[$2>>2]|0;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if ($25) {
     $$8 = $0;
     break L1;
    }
    $26 = ((($24)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($26,0,5563)|0);
    $$11 = $20;
    label = 60;
    break L1;
    break;
   }
   case 84:  {
    $27 = ((($0)) + 2|0);
    $28 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($27,$1,$2)|0);
    $29 = ($28|0)==($27|0);
    if ($29) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $30 = HEAP32[$2>>2]|0;
    $31 = ((($2)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($30|0)==($32|0);
    if ($33) {
     $$8 = $0;
     break L1;
    }
    $34 = ((($32)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($34,0,5575)|0);
    $$11 = $28;
    label = 60;
    break L1;
    break;
   }
   case 73:  {
    $35 = ((($0)) + 2|0);
    $36 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($35,$1,$2)|0);
    $37 = ($36|0)==($35|0);
    if ($37) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $38 = HEAP32[$2>>2]|0;
    $39 = ((($2)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($38|0)==($40|0);
    if ($41) {
     $$8 = $0;
     break L1;
    }
    $42 = ((($40)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($42,0,5584)|0);
    $$11 = $36;
    label = 60;
    break L1;
    break;
   }
   case 83:  {
    $43 = ((($0)) + 2|0);
    $44 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($43,$1,$2)|0);
    $45 = ($44|0)==($43|0);
    if ($45) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $46 = HEAP32[$2>>2]|0;
    $47 = ((($2)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $$8 = $0;
     break L1;
    }
    $50 = ((($48)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($50,0,5598)|0);
    $$11 = $44;
    label = 60;
    break L1;
    break;
   }
   case 99:  {
    $51 = ((($0)) + 2|0);
    $52 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($51,$1)|0);
    $53 = ($52|0)==($51|0);
    if ($53) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $54 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($52,$1)|0);
    $55 = ($54|0)==($52|0);
    if ($55) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $56 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($54,$1,$2)|0);
    $57 = ($56|0)==($54|0);
    if ($57) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $58 = HEAP32[$2>>2]|0;
    $59 = ((($2)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58|0)==($60|0);
    if ($61) {
     $$8 = $0;
     break L1;
    }
    $62 = ((($60)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($62,0,5617)|0);
    $$11 = $56;
    label = 60;
    break L1;
    break;
   }
   case 67:  {
    $63 = ((($0)) + 2|0);
    $64 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($63,$1,$2)|0);
    $65 = ($64|0)==($63|0);
    if ($65) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $66 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($64,$1)|0);
    $67 = ($66|0)==($64|0);
    $68 = ($66|0)==($1|0);
    $or$cond = $67 | $68;
    if ($or$cond) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $69 = HEAP8[$66>>0]|0;
    $70 = ($69<<24>>24)==(95);
    if (!($70)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $71 = ((($66)) + 1|0);
    $72 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($71,$1,$2)|0);
    $73 = ($72|0)==($71|0);
    if ($73) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$2>>2]|0;
    $77 = (($75) - ($76))|0;
    $78 = (($77|0) / 24)&-1;
    $79 = ($78>>>0)<(2);
    if ($79) {
     $$8 = $0;
     break L1;
    }
    $80 = $75;
    $81 = ((($80)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$81);
    $82 = HEAP32[$74>>2]|0;
    $$0$i$i$idx$i = 0;
    while(1) {
     $83 = ($$0$i$i$idx$i|0)==(-1);
     if ($83) {
      break;
     }
     $$0$i$i$add$i = (($$0$i$i$idx$i) + -1)|0;
     $$ptr$i = (($82) + (($$0$i$i$add$i*24)|0)|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$ptr$i);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    $84 = ((($82)) + -24|0);
    HEAP32[$74>>2] = $84;
    $85 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5,0,5644)|0);
    ;HEAP32[$8>>2]=HEAP32[$5>>2]|0;HEAP32[$8+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$5+8>>2]|0;
    $$0$i$i$i161 = 0;
    while(1) {
     $exitcond$i$i$i162 = ($$0$i$i$i161|0)==(3);
     if ($exitcond$i$i$i162) {
      break;
     }
     $86 = (($5) + ($$0$i$i$i161<<2)|0);
     HEAP32[$86>>2] = 0;
     $87 = (($$0$i$i$i161) + 1)|0;
     $$0$i$i$i161 = $87;
    }
    $88 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,5669)|0);
    ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
    $$0$i$i$i158 = 0;
    while(1) {
     $exitcond$i$i$i159 = ($$0$i$i$i158|0)==(3);
     if ($exitcond$i$i$i159) {
      break;
     }
     $89 = (($8) + ($$0$i$i$i158<<2)|0);
     HEAP32[$89>>2] = 0;
     $90 = (($$0$i$i$i158) + 1)|0;
     $$0$i$i$i158 = $90;
    }
    $91 = HEAP32[$74>>2]|0;
    $92 = ((($91)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$92);
    $93 = ((($9)) + 11|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = ($94<<24>>24)<(0);
    $96 = HEAP32[$9>>2]|0;
    $97 = ((($9)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $94&255;
    $100 = $95 ? $96 : $9;
    $101 = $95 ? $98 : $99;
    $102 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7,$100,$101)|0);
    ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $103 = (($7) + ($$0$i$i$i<<2)|0);
     HEAP32[$103>>2] = 0;
     $104 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $104;
    }
    $105 = HEAP32[$74>>2]|0;
    $106 = ((($105)) + -24|0);
    $107 = ((($106)) + 11|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)<(0);
    if ($109) {
     $110 = HEAP32[$106>>2]|0;
     HEAP8[$3>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($110,$3);
     $111 = ((($105)) + -20|0);
     HEAP32[$111>>2] = 0;
    } else {
     HEAP8[$4>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($106,$4);
     HEAP8[$107>>0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($106);
    ;HEAP32[$106>>2]=HEAP32[$6>>2]|0;HEAP32[$106+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$6+8>>2]|0;
    $$0$i$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
     if ($exitcond$i$i$i$i) {
      break;
     }
     $112 = (($6) + ($$0$i$i$i$i<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = (($$0$i$i$i$i) + 1)|0;
     $$0$i$i$i$i = $113;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$11 = $72;
    label = 60;
    break L1;
    break;
   }
   default: {
    $114 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($16,$1)|0);
    $115 = ($114|0)==($16|0);
    do {
     if ($115) {
      $$4156 = 3;$$8151 = $0;
     } else {
      $116 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($114,$1,$2)|0);
      $117 = ($116|0)==($114|0);
      if ($117) {
       $$4156 = 0;$$8151 = $0;
      } else {
       $118 = HEAP32[$2>>2]|0;
       $119 = ((($2)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($118|0)==($120|0);
       if ($121) {
        $$4156 = 1;$$8151 = $0;
       } else {
        $122 = ((($0)) + 2|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = ($123<<24>>24)==(118);
        $125 = ((($120)) + -24|0);
        if ($124) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($125,0,5674)|0);
         $$4156 = 0;$$8151 = $116;
         break;
        } else {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($125,0,5692)|0);
         $$4156 = 0;$$8151 = $116;
         break;
        }
       }
      }
     }
    } while(0);
    $trunc = $$4156&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 3: case 0:  {
     $$11 = $$8151;
     label = 60;
     break L1;
     break;
    }
    default: {
    }
    }
    $switch = ($$4156|0)==(0);
    if ($switch) {
     $$11 = $$8151;
     label = 60;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
   }
  } else {
   $$11 = $0;
   label = 60;
  }
 } while(0);
 if ((label|0) == 60) {
  $$8 = $$11;
 }
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP8[$3>>0] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond32 = 0, $or$cond33 = 0, $spec$select = 0, $spec$select34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$3 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = $3 << 24 >> 24;
   switch ($4|0) {
   case 104:  {
    $5 = ((($0)) + 1|0);
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5,$1)|0);
    $7 = ($6|0)==($5|0);
    $8 = ($6|0)==($1|0);
    $or$cond = $7 | $8;
    if ($or$cond) {
     $$3 = $0;
     break L1;
    }
    $9 = HEAP8[$6>>0]|0;
    $10 = ($9<<24>>24)==(95);
    $11 = ((($6)) + 1|0);
    $spec$select = $10 ? $11 : $0;
    return ($spec$select|0);
    break;
   }
   case 118:  {
    break;
   }
   default: {
    $$3 = $0;
    break L1;
   }
   }
   $12 = ((($0)) + 1|0);
   $13 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($12,$1)|0);
   $14 = ($13|0)==($12|0);
   $15 = ($13|0)==($1|0);
   $or$cond32 = $14 | $15;
   if ($or$cond32) {
    $$3 = $0;
   } else {
    $16 = HEAP8[$13>>0]|0;
    $17 = ($16<<24>>24)==(95);
    if ($17) {
     $18 = ((($13)) + 1|0);
     $19 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18,$1)|0);
     $20 = ($19|0)==($18|0);
     $21 = ($19|0)==($1|0);
     $or$cond33 = $20 | $21;
     if ($or$cond33) {
      $$3 = $0;
     } else {
      $22 = HEAP8[$19>>0]|0;
      $23 = ($22<<24>>24)==(95);
      $24 = ((($19)) + 1|0);
      $spec$select34 = $23 ? $24 : $0;
      $$3 = $spec$select34;
     }
    } else {
     $$3 = $0;
    }
   }
  }
 } while(0);
 return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EEC2ERNS0_5arenaILm4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEC2EmRKS6_RKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $5;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEEC2EmRKS8_RKS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $5;
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1846]|0;
 $1 = (($0) + 0)|0;
 HEAP32[1846] = $1;
 $2 = $0;
 return ($2|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2() {
 ; nullFunc_v(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4);
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1,b1,b1,b1,b1,b1,b1,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_v = [b2,b2,b2,b2,b2,b2,__ZL25default_terminate_handlerv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_viiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b4,b4,b4,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_viiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b5,b5,b5,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b6,b6,b6,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];

  return { ___cxa_demangle: ___cxa_demangle, ___em_js__init: ___em_js__init, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_bind_Layout_Layout_1: _emscripten_bind_Layout_Layout_1, _emscripten_bind_Layout___destroy___0: _emscripten_bind_Layout___destroy___0, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_demangle.apply(null, arguments);
};

var real____em_js__init = asm["___em_js__init"]; asm["___em_js__init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__init.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_bind_Layout_Layout_1 = asm["_emscripten_bind_Layout_Layout_1"]; asm["_emscripten_bind_Layout_Layout_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_bind_Layout_Layout_1.apply(null, arguments);
};

var real__emscripten_bind_Layout___destroy___0 = asm["_emscripten_bind_Layout___destroy___0"]; asm["_emscripten_bind_Layout___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_bind_Layout___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_VoidPtr___destroy___0 = asm["_emscripten_bind_VoidPtr___destroy___0"]; asm["_emscripten_bind_VoidPtr___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_bind_VoidPtr___destroy___0.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___em_js__init = Module["___em_js__init"] = asm["___em_js__init"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_bind_Layout_Layout_1 = Module["_emscripten_bind_Layout_Layout_1"] = asm["_emscripten_bind_Layout_Layout_1"];
var _emscripten_bind_Layout___destroy___0 = Module["_emscripten_bind_Layout___destroy___0"] = asm["_emscripten_bind_Layout___destroy___0"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}




// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (ensureCache.needed) {
      // clear the temps
      for (var i = 0; i < ensureCache.temps.length; i++) {
        Module['_free'](ensureCache.temps[i]);
      }
      ensureCache.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](ensureCache.buffer);
      ensureCache.buffer = 0;
      ensureCache.size += ensureCache.needed;
      // clean up
      ensureCache.needed = 0;
    }
    if (!ensureCache.buffer) { // happens first time, or when we need to grow
      ensureCache.size += 128; // heuristic, avoid many small grow events
      ensureCache.buffer = Module['_malloc'](ensureCache.size);
      assert(ensureCache.buffer);
    }
    ensureCache.pos = 0;
  },
  alloc: function(array, view) {
    assert(ensureCache.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (ensureCache.pos + len >= ensureCache.size) {
      // we failed to allocate in the buffer, ensureCache time around :(
      assert(len > 0); // null terminator, at least
      ensureCache.needed += len;
      ret = Module['_malloc'](len);
      ensureCache.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = ensureCache.buffer + ensureCache.pos;
      ensureCache.pos += len;
    }
    return ret;
  },
  copy: function(array, view, offset) {
    var offsetShifted = offset;
    var bytes = view.BYTES_PER_ELEMENT;
    switch (bytes) {
      case 2: offsetShifted >>= 1; break;
      case 4: offsetShifted >>= 2; break;
      case 8: offsetShifted >>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[offsetShifted + i] = array[i];
    }
  },
};

function ensureString(value) {
  if (typeof value === 'string') {
    var intArray = intArrayFromString(value);
    var offset = ensureCache.alloc(intArray, HEAP8);
    ensureCache.copy(intArray, HEAP8, offset);
    return offset;
  }
  return value;
}
function ensureInt8(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP8);
    ensureCache.copy(value, HEAP8, offset);
    return offset;
  }
  return value;
}
function ensureInt16(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP16);
    ensureCache.copy(value, HEAP16, offset);
    return offset;
  }
  return value;
}
function ensureInt32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP32);
    ensureCache.copy(value, HEAP32, offset);
    return offset;
  }
  return value;
}
function ensureFloat32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF32);
    ensureCache.copy(value, HEAPF32, offset);
    return offset;
  }
  return value;
}
function ensureFloat64(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF64);
    ensureCache.copy(value, HEAPF64, offset);
    return offset;
  }
  return value;
}


// VoidPtr
/** @suppress {undefinedVars, duplicate} */function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} */function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// Layout
/** @suppress {undefinedVars, duplicate} */function Layout(arg0) {
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  this.ptr = _emscripten_bind_Layout_Layout_1(arg0);
  getCache(Layout)[this.ptr] = this;
};;
Layout.prototype = Object.create(WrapperObject.prototype);
Layout.prototype.constructor = Layout;
Layout.prototype.__class__ = Layout;
Layout.__cache__ = {};
Module['Layout'] = Layout;

  Layout.prototype['__destroy__'] = Layout.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} */function() {
  var self = this.ptr;
  _emscripten_bind_Layout___destroy___0(self);
};
(function() {
  function setupEnums() {
    
  }
  if (Module['calledRun']) setupEnums();
  else addOnPreMain(setupEnums);
})();

